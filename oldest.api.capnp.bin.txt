( groups = [
    ( name = "dom-exception",
      structures = [
        ( name = "DOMException",
          members = [
            ( property = (
                name = "message",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "code",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stack",
                type = (unknown = void),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( constant = (name = "INDEX_SIZE_ERR", value = 1) ),
            ( constant = (
                name = "DOMSTRING_SIZE_ERR",
                value = 2 ) ),
            ( constant = (
                name = "HIERARCHY_REQUEST_ERR",
                value = 3 ) ),
            ( constant = (
                name = "WRONG_DOCUMENT_ERR",
                value = 4 ) ),
            ( constant = (
                name = "INVALID_CHARACTER_ERR",
                value = 5 ) ),
            ( constant = (
                name = "NO_DATA_ALLOWED_ERR",
                value = 6 ) ),
            ( constant = (
                name = "NO_MODIFICATION_ALLOWED_ERR",
                value = 7 ) ),
            ( constant = (name = "NOT_FOUND_ERR", value = 8) ),
            ( constant = (
                name = "NOT_SUPPORTED_ERR",
                value = 9 ) ),
            ( constant = (
                name = "INUSE_ATTRIBUTE_ERR",
                value = 10 ) ),
            ( constant = (
                name = "INVALID_STATE_ERR",
                value = 11 ) ),
            ( constant = (name = "SYNTAX_ERR", value = 12) ),
            ( constant = (
                name = "INVALID_MODIFICATION_ERR",
                value = 13 ) ),
            ( constant = (name = "NAMESPACE_ERR", value = 14) ),
            ( constant = (
                name = "INVALID_ACCESS_ERR",
                value = 15 ) ),
            ( constant = (name = "VALIDATION_ERR", value = 16) ),
            ( constant = (
                name = "TYPE_MISMATCH_ERR",
                value = 17 ) ),
            ( constant = (name = "SECURITY_ERR", value = 18) ),
            ( constant = (name = "NETWORK_ERR", value = 19) ),
            ( constant = (name = "ABORT_ERR", value = 20) ),
            ( constant = (
                name = "URL_MISMATCH_ERR",
                value = 21 ) ),
            ( constant = (
                name = "QUOTA_EXCEEDED_ERR",
                value = 22 ) ),
            ( constant = (name = "TIMEOUT_ERR", value = 23) ),
            ( constant = (
                name = "INVALID_NODE_TYPE_ERR",
                value = 24 ) ),
            ( constant = (name = "DATA_CLONE_ERR", value = 25) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kErrorPrototype" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::DOMException",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "global-scope",
      structures = [
        ( name = "WorkerGlobalScope",
          members = [
            ( nested = (
                structure = (
                  name = "EventTarget",
                  members = [
                    ( method = (
                        name = "addEventListener",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( oneOf = (
                              variants = [
                                ( function = (
                                    returnType = (
                                      maybe = (value = (unknown = void), name = "jsg::Optional") ),
                                    args = [
                                      ( structure = (
                                          name = "Event",
                                          fullyQualifiedName = "workerd::api::Event" ) ) ] ) ),
                                ( structure = (
                                    name = "HandlerObject",
                                    fullyQualifiedName = "workerd::api::EventTarget::HandlerObject" ) ) ] ) ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "AddEventListenerOptions",
                                        fullyQualifiedName = "workerd::api::EventTarget::AddEventListenerOptions" ) ),
                                    (boolt = void) ] ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "removeEventListener",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          (object = void),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "EventListenerOptions",
                                        fullyQualifiedName = "workerd::api::EventTarget::EventListenerOptions" ) ),
                                    (boolt = void) ] ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "dispatchEvent",
                        returnType = (boolt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "Event",
                              fullyQualifiedName = "workerd::api::Event" ) ) ],
                        static = false ) ),
                    ( constructor = (args = []) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::EventTarget",
                  tsRoot = false,
                  tsOverride = "<EventMap extends Record<string, Event> = Record<string, Event>> { addEventListener<Type extends keyof EventMap>(type: Type, handler: EventListenerOrEventListenerObject<EventMap[Type]>, options?: EventTargetAddEventListenerOptions | boolean): void; removeEventListener<Type extends keyof EventMap>(type: Type, handler: EventListenerOrEventListenerObject<EventMap[Type]>, options?: EventTargetEventListenerOptions | boolean): void; dispatchEvent(event: EventMap[keyof EventMap]): boolean; }",
                  tsDefine = "type EventListener<EventType extends Event = Event> = (event: EventType) => void; interface EventListenerObject<EventType extends Event = Event> { handleEvent(event: EventType): void; } type EventListenerOrEventListenerObject<EventType extends Event = Event> = EventListener<EventType> | EventListenerObject<EventType>;",
                  disposable = false,
                  asyncDisposable = false ),
                name = "EventTarget" ) ),
            ( method = (
                name = "importScripts",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ) ],
          extends = (
            structure = (
              name = "EventTarget",
              fullyQualifiedName = "workerd::api::EventTarget" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WorkerGlobalScope",
          tsRoot = false,
          tsOverride = "extends EventTarget<WorkerGlobalScopeEventMap>",
          tsDefine = "type WorkerGlobalScopeEventMap = { fetch: FetchEvent; scheduled: ScheduledEvent; queue: QueueEvent; unhandledrejection: PromiseRejectionEvent; rejectionhandled: PromiseRejectionEvent; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ServiceWorkerGlobalScope",
          members = [
            ( nested = (
                structure = (
                  name = "DOMException",
                  members = [
                    ( property = (
                        name = "message",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "name",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "code",
                        type = (number = (name = "int")),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "stack",
                        type = (unknown = void),
                        readonly = true,
                        lazy = true,
                        prototype = false ) ),
                    ( constant = (name = "INDEX_SIZE_ERR", value = 1) ),
                    ( constant = (
                        name = "DOMSTRING_SIZE_ERR",
                        value = 2 ) ),
                    ( constant = (
                        name = "HIERARCHY_REQUEST_ERR",
                        value = 3 ) ),
                    ( constant = (
                        name = "WRONG_DOCUMENT_ERR",
                        value = 4 ) ),
                    ( constant = (
                        name = "INVALID_CHARACTER_ERR",
                        value = 5 ) ),
                    ( constant = (
                        name = "NO_DATA_ALLOWED_ERR",
                        value = 6 ) ),
                    ( constant = (
                        name = "NO_MODIFICATION_ALLOWED_ERR",
                        value = 7 ) ),
                    ( constant = (name = "NOT_FOUND_ERR", value = 8) ),
                    ( constant = (
                        name = "NOT_SUPPORTED_ERR",
                        value = 9 ) ),
                    ( constant = (
                        name = "INUSE_ATTRIBUTE_ERR",
                        value = 10 ) ),
                    ( constant = (
                        name = "INVALID_STATE_ERR",
                        value = 11 ) ),
                    ( constant = (name = "SYNTAX_ERR", value = 12) ),
                    ( constant = (
                        name = "INVALID_MODIFICATION_ERR",
                        value = 13 ) ),
                    ( constant = (name = "NAMESPACE_ERR", value = 14) ),
                    ( constant = (
                        name = "INVALID_ACCESS_ERR",
                        value = 15 ) ),
                    ( constant = (name = "VALIDATION_ERR", value = 16) ),
                    ( constant = (
                        name = "TYPE_MISMATCH_ERR",
                        value = 17 ) ),
                    ( constant = (name = "SECURITY_ERR", value = 18) ),
                    ( constant = (name = "NETWORK_ERR", value = 19) ),
                    ( constant = (name = "ABORT_ERR", value = 20) ),
                    ( constant = (
                        name = "URL_MISMATCH_ERR",
                        value = 21 ) ),
                    ( constant = (
                        name = "QUOTA_EXCEEDED_ERR",
                        value = 22 ) ),
                    ( constant = (name = "TIMEOUT_ERR", value = 23) ),
                    ( constant = (
                        name = "INVALID_NODE_TYPE_ERR",
                        value = 24 ) ),
                    ( constant = (name = "DATA_CLONE_ERR", value = 25) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    intrinsic = (
                      name = "v8::kErrorPrototype" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::jsg::DOMException",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "DOMException" ) ),
            ( nested = (
                structure = (
                  name = "WorkerGlobalScope",
                  members = [
                    ( nested = (
                        structure = (
                          name = "EventTarget",
                          members = [
                            ( method = (
                                name = "addEventListener",
                                returnType = (voidt = void),
                                args = [
                                  ( jsgImpl = (type = jsgLock) ),
                                  ( string = (name = "kj::String") ),
                                  ( oneOf = (
                                      variants = [
                                        ( function = (
                                            returnType = (
                                              maybe = (value = (unknown = void), name = "jsg::Optional") ),
                                            args = [
                                              ( structure = (
                                                  name = "Event",
                                                  fullyQualifiedName = "workerd::api::Event" ) ) ] ) ),
                                        ( structure = (
                                            name = "HandlerObject",
                                            fullyQualifiedName = "workerd::api::EventTarget::HandlerObject" ) ) ] ) ),
                                  ( maybe = (
                                      value = (
                                        oneOf = (
                                          variants = [
                                            ( structure = (
                                                name = "AddEventListenerOptions",
                                                fullyQualifiedName = "workerd::api::EventTarget::AddEventListenerOptions" ) ),
                                            (boolt = void) ] ) ),
                                      name = "jsg::Optional" ) ) ],
                                static = false ) ),
                            ( method = (
                                name = "removeEventListener",
                                returnType = (voidt = void),
                                args = [
                                  ( jsgImpl = (type = jsgLock) ),
                                  ( string = (name = "kj::String") ),
                                  (object = void),
                                  ( maybe = (
                                      value = (
                                        oneOf = (
                                          variants = [
                                            ( structure = (
                                                name = "EventListenerOptions",
                                                fullyQualifiedName = "workerd::api::EventTarget::EventListenerOptions" ) ),
                                            (boolt = void) ] ) ),
                                      name = "jsg::Optional" ) ) ],
                                static = false ) ),
                            ( method = (
                                name = "dispatchEvent",
                                returnType = (boolt = void),
                                args = [
                                  ( jsgImpl = (type = jsgLock) ),
                                  ( structure = (
                                      name = "Event",
                                      fullyQualifiedName = "workerd::api::Event" ) ) ],
                                static = false ) ),
                            ( constructor = (args = []) ) ],
                          iterable = false,
                          asyncIterable = false,
                          fullyQualifiedName = "workerd::api::EventTarget",
                          tsRoot = false,
                          tsOverride = "<EventMap extends Record<string, Event> = Record<string, Event>> { addEventListener<Type extends keyof EventMap>(type: Type, handler: EventListenerOrEventListenerObject<EventMap[Type]>, options?: EventTargetAddEventListenerOptions | boolean): void; removeEventListener<Type extends keyof EventMap>(type: Type, handler: EventListenerOrEventListenerObject<EventMap[Type]>, options?: EventTargetEventListenerOptions | boolean): void; dispatchEvent(event: EventMap[keyof EventMap]): boolean; }",
                          tsDefine = "type EventListener<EventType extends Event = Event> = (event: EventType) => void; interface EventListenerObject<EventType extends Event = Event> { handleEvent(event: EventType): void; } type EventListenerOrEventListenerObject<EventType extends Event = Event> = EventListener<EventType> | EventListenerObject<EventType>;",
                          disposable = false,
                          asyncDisposable = false ),
                        name = "EventTarget" ) ),
                    ( method = (
                        name = "importScripts",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ) ],
                  extends = (
                    structure = (
                      name = "EventTarget",
                      fullyQualifiedName = "workerd::api::EventTarget" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::WorkerGlobalScope",
                  tsRoot = false,
                  tsOverride = "extends EventTarget<WorkerGlobalScopeEventMap>",
                  tsDefine = "type WorkerGlobalScopeEventMap = { fetch: FetchEvent; scheduled: ScheduledEvent; queue: QueueEvent; unhandledrejection: PromiseRejectionEvent; rejectionhandled: PromiseRejectionEvent; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "WorkerGlobalScope" ) ),
            ( method = (
                name = "btoa",
                returnType = (
                  string = (name = "kj::String") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ),
            ( method = (
                name = "atob",
                returnType = (
                  string = (name = "jsg::JsString") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "setTimeout",
                returnType = (
                  number = (name = "double") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                  ( maybe = (
                      value = (
                        number = (name = "double") ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgVarargs) ) ],
                static = false ) ),
            ( method = (
                name = "clearTimeout",
                returnType = (voidt = void),
                args = [
                  ( maybe = (
                      value = (
                        number = (name = "double") ),
                      name = "kj::Maybe" ) ) ],
                static = false ) ),
            ( method = (
                name = "setInterval",
                returnType = (
                  number = (name = "double") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                  ( maybe = (
                      value = (
                        number = (name = "double") ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgVarargs) ) ],
                static = false ) ),
            ( method = (
                name = "clearInterval",
                returnType = (voidt = void),
                args = [
                  ( maybe = (
                      value = (
                        number = (name = "double") ),
                      name = "kj::Maybe" ) ) ],
                static = false ) ),
            ( method = (
                name = "queueMicrotask",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ) ],
                static = false ) ),
            ( method = (
                name = "structuredClone",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "StructuredCloneOptions",
                          fullyQualifiedName = "workerd::api::ServiceWorkerGlobalScope::StructuredCloneOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "fetch",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "Response",
                        fullyQualifiedName = "workerd::api::Response" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "RequestInitializerDict",
                                fullyQualifiedName = "workerd::api::RequestInitializerDict" ) ),
                            ( structure = (
                                name = "Request",
                                fullyQualifiedName = "workerd::api::Request" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( property = (
                name = "self",
                type = (
                  structure = (
                    name = "ServiceWorkerGlobalScope",
                    fullyQualifiedName = "workerd::api::ServiceWorkerGlobalScope" ) ),
                readonly = false,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "crypto",
                type = (
                  structure = (
                    name = "Crypto",
                    fullyQualifiedName = "workerd::api::Crypto" ) ),
                readonly = false,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "caches",
                type = (
                  structure = (
                    name = "CacheStorage",
                    fullyQualifiedName = "workerd::api::CacheStorage" ) ),
                readonly = false,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "scheduler",
                type = (
                  structure = (
                    name = "Scheduler",
                    fullyQualifiedName = "workerd::api::Scheduler" ) ),
                readonly = false,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "performance",
                type = (
                  structure = (
                    name = "Performance",
                    fullyQualifiedName = "workerd::api::Performance" ) ),
                readonly = false,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "origin",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( nested = (
                structure = (
                  name = "Event",
                  members = [
                    ( property = (
                        name = "type",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "eventPhase",
                        type = (number = (name = "int")),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "composed",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "bubbles",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "cancelable",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "defaultPrevented",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "returnValue",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "currentTarget",
                        type = (
                          maybe = (
                            value = (
                              structure = (
                                name = "EventTarget",
                                fullyQualifiedName = "workerd::api::EventTarget" ) ),
                            name = "jsg::Optional" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "srcElement",
                        type = (
                          maybe = (
                            value = (
                              structure = (
                                name = "EventTarget",
                                fullyQualifiedName = "workerd::api::EventTarget" ) ),
                            name = "jsg::Optional" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "timeStamp",
                        type = (
                          number = (name = "double") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "isTrusted",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "cancelBubble",
                        type = (boolt = void),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "stopImmediatePropagation",
                        returnType = (voidt = void),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "preventDefault",
                        returnType = (voidt = void),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "stopPropagation",
                        returnType = (voidt = void),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "composedPath",
                        returnType = (
                          array = (
                            element = (
                              structure = (
                                name = "EventTarget",
                                fullyQualifiedName = "workerd::api::EventTarget" ) ),
                            name = "kj::Array" ) ),
                        args = [],
                        static = false ) ),
                    ( constant = (name = "NONE", value = 0) ),
                    ( constant = (name = "CAPTURING_PHASE", value = 1) ),
                    ( constant = (name = "AT_TARGET", value = 2) ),
                    ( constant = (name = "BUBBLING_PHASE", value = 3) ),
                    ( constructor = (
                        args = [
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "Init",
                                  fullyQualifiedName = "workerd::api::Event::Init" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Event",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "Event" ) ),
            ( nested = (
                structure = (
                  name = "ExtendableEvent",
                  members = [
                    ( method = (
                        name = "waitUntil",
                        returnType = (voidt = void),
                        args = [
                          ( promise = (value = (voidt = void)) ) ],
                        static = false ) ),
                    ( property = (
                        name = "actorState",
                        type = (
                          maybe = (
                            value = (
                              structure = (
                                name = "ActorState",
                                fullyQualifiedName = "workerd::api::ActorState" ) ),
                            name = "jsg::Optional" ) ),
                        readonly = true,
                        lazy = true,
                        prototype = false ) ) ],
                  extends = (
                    structure = (
                      name = "Event",
                      fullyQualifiedName = "workerd::api::Event" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::ExtendableEvent",
                  tsRoot = false,
                  tsOverride = "{ actorState: never }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "ExtendableEvent" ) ),
            ( nested = (
                structure = (
                  name = "CustomEvent",
                  members = [
                    ( property = (
                        name = "detail",
                        type = (
                          maybe = (value = (unknown = void), name = "jsg::Optional") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "CustomEventInit",
                                  fullyQualifiedName = "workerd::api::CustomEvent::CustomEventInit" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "Event",
                      fullyQualifiedName = "workerd::api::Event" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::CustomEvent",
                  tsRoot = false,
                  tsOverride = "<T = any> { get detail(): T; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "CustomEvent" ) ),
            ( nested = (
                structure = (
                  name = "PromiseRejectionEvent",
                  members = [
                    ( property = (
                        name = "promise",
                        type = (
                          promise = (value = (unknown = void)) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "reason",
                        type = (unknown = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ) ],
                  extends = (
                    structure = (
                      name = "Event",
                      fullyQualifiedName = "workerd::api::Event" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::PromiseRejectionEvent",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "PromiseRejectionEvent" ) ),
            ( nested = (
                structure = (
                  name = "FetchEvent",
                  members = [
                    ( property = (
                        name = "request",
                        type = (
                          structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "respondWith",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( promise = (
                              value = (
                                structure = (
                                  name = "Response",
                                  fullyQualifiedName = "workerd::api::Response" ) ) ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "passThroughOnException",
                        returnType = (voidt = void),
                        args = [],
                        static = false ) ) ],
                  extends = (
                    structure = (
                      name = "ExtendableEvent",
                      fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::FetchEvent",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "FetchEvent" ) ),
            ( nested = (
                structure = (
                  name = "TailEvent",
                  members = [
                    ( property = (
                        name = "events",
                        type = (
                          array = (
                            element = (
                              structure = (
                                name = "TraceItem",
                                fullyQualifiedName = "workerd::api::TraceItem" ) ),
                            name = "kj::Array" ) ),
                        readonly = true,
                        lazy = true,
                        prototype = false ) ),
                    ( property = (
                        name = "traces",
                        type = (
                          array = (
                            element = (
                              structure = (
                                name = "TraceItem",
                                fullyQualifiedName = "workerd::api::TraceItem" ) ),
                            name = "kj::Array" ) ),
                        readonly = true,
                        lazy = true,
                        prototype = false ) ) ],
                  extends = (
                    structure = (
                      name = "ExtendableEvent",
                      fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::TailEvent",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "TailEvent" ) ),
            ( nested = (
                structure = (
                  name = "TailEvent",
                  members = [
                    ( property = (
                        name = "events",
                        type = (
                          array = (
                            element = (
                              structure = (
                                name = "TraceItem",
                                fullyQualifiedName = "workerd::api::TraceItem" ) ),
                            name = "kj::Array" ) ),
                        readonly = true,
                        lazy = true,
                        prototype = false ) ),
                    ( property = (
                        name = "traces",
                        type = (
                          array = (
                            element = (
                              structure = (
                                name = "TraceItem",
                                fullyQualifiedName = "workerd::api::TraceItem" ) ),
                            name = "kj::Array" ) ),
                        readonly = true,
                        lazy = true,
                        prototype = false ) ) ],
                  extends = (
                    structure = (
                      name = "ExtendableEvent",
                      fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::TailEvent",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "TraceEvent" ) ),
            ( nested = (
                structure = (
                  name = "ScheduledEvent",
                  members = [
                    ( property = (
                        name = "scheduledTime",
                        type = (
                          number = (name = "double") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "cron",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "noRetry",
                        returnType = (voidt = void),
                        args = [],
                        static = false ) ) ],
                  extends = (
                    structure = (
                      name = "ExtendableEvent",
                      fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::ScheduledEvent",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "ScheduledEvent" ) ),
            ( nested = (
                structure = (
                  name = "MessageEvent",
                  members = [
                    ( property = (
                        name = "data",
                        type = (unknown = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "origin",
                        type = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "lastEventId",
                        type = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "source",
                        type = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "ports",
                        type = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "Initializer",
                              fullyQualifiedName = "workerd::api::MessageEvent::Initializer" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "Event",
                      fullyQualifiedName = "workerd::api::Event" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::MessageEvent",
                  tsRoot = true,
                  tsOverride = "{ readonly data: ArrayBuffer | string; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "MessageEvent" ) ),
            ( nested = (
                structure = (
                  name = "CloseEvent",
                  members = [
                    ( property = (
                        name = "code",
                        type = (number = (name = "int")),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "reason",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "wasClean",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "Initializer",
                                  fullyQualifiedName = "workerd::api::CloseEvent::Initializer" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "Event",
                      fullyQualifiedName = "workerd::api::Event" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::CloseEvent",
                  tsRoot = true,
                  disposable = false,
                  asyncDisposable = false ),
                name = "CloseEvent" ) ),
            ( nested = (
                structure = (
                  name = "ReadableStreamDefaultReader",
                  members = [
                    ( property = (
                        name = "closed",
                        type = (
                          promise = (value = (voidt = void)) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "cancel",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( method = (
                        name = "read",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "ReadResult",
                                fullyQualifiedName = "workerd::api::ReadResult" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "releaseLock",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "ReadableStream",
                              fullyQualifiedName = "workerd::api::ReadableStream" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::ReadableStreamDefaultReader",
                  tsRoot = false,
                  tsOverride = "<R = any> { read(): Promise<ReadableStreamReadResult<R>>; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "ReadableStreamDefaultReader" ) ),
            ( nested = (
                structure = (
                  name = "ReadableStreamBYOBReader",
                  members = [
                    ( property = (
                        name = "closed",
                        type = (
                          promise = (value = (voidt = void)) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "cancel",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( method = (
                        name = "read",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "ReadResult",
                                fullyQualifiedName = "workerd::api::ReadResult" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8ArrayBufferView) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ReadableStreamBYOBReaderReadOptions",
                                  fullyQualifiedName = "workerd::api::ReadableStreamBYOBReader::ReadableStreamBYOBReaderReadOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "releaseLock",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "readAtLeast",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "ReadResult",
                                fullyQualifiedName = "workerd::api::ReadResult" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (number = (name = "int")),
                          ( builtin = (type = v8ArrayBufferView) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "ReadableStream",
                              fullyQualifiedName = "workerd::api::ReadableStream" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::ReadableStreamBYOBReader",
                  tsRoot = false,
                  tsOverride = "ReadableStreamBYOBReader { read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>; readAtLeast<T extends ArrayBufferView>(minElements: number, view: T): Promise<ReadableStreamReadResult<T>>; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "ReadableStreamBYOBReader" ) ),
            ( nested = (
                structure = (
                  name = "ReadableStream",
                  members = [
                    ( property = (
                        name = "locked",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "cancel",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( method = (
                        name = "getReader",
                        returnType = (
                          oneOf = (
                            variants = [
                              ( structure = (
                                  name = "ReadableStreamDefaultReader",
                                  fullyQualifiedName = "workerd::api::ReadableStreamDefaultReader" ) ),
                              ( structure = (
                                  name = "ReadableStreamBYOBReader",
                                  fullyQualifiedName = "workerd::api::ReadableStreamBYOBReader" ) ) ] ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "GetReaderOptions",
                                  fullyQualifiedName = "workerd::api::ReadableStream::GetReaderOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "pipeThrough",
                        returnType = (
                          structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "Transform",
                              fullyQualifiedName = "workerd::api::ReadableStream::Transform" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "PipeToOptions",
                                  fullyQualifiedName = "workerd::api::PipeToOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "pipeTo",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "WritableStream",
                              fullyQualifiedName = "workerd::api::WritableStream" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "PipeToOptions",
                                  fullyQualifiedName = "workerd::api::PipeToOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "tee",
                        returnType = (
                          array = (
                            element = (
                              structure = (
                                name = "ReadableStream",
                                fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                            name = "kj::Array" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "values",
                        returnType = (
                          structure = (
                            name = "ReadableStreamAsyncIterator",
                            fullyQualifiedName = "workerd::api::ReadableStream::ReadableStreamAsyncIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ValuesOptions",
                                  fullyQualifiedName = "workerd::api::ReadableStream::ValuesOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "from",
                        returnType = (
                          structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( array = (
                              element = (unknown = void),
                              name = "jsg::AsyncGenerator" ) ) ],
                        static = true ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "UnderlyingSource",
                                  fullyQualifiedName = "workerd::api::UnderlyingSource" ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "StreamQueuingStrategy",
                                  fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = true,
                  fullyQualifiedName = "workerd::api::ReadableStream",
                  asyncIterator = (
                    name = "values",
                    returnType = (
                      structure = (
                        name = "ReadableStreamAsyncIterator",
                        fullyQualifiedName = "workerd::api::ReadableStream::ReadableStreamAsyncIterator" ) ),
                    args = [
                      ( jsgImpl = (type = jsgLock) ),
                      ( maybe = (
                          value = (
                            structure = (
                              name = "ValuesOptions",
                              fullyQualifiedName = "workerd::api::ReadableStream::ValuesOptions" ) ),
                          name = "jsg::Optional" ) ) ],
                    static = false ),
                  tsRoot = false,
                  tsOverride = "const ReadableStream: { prototype: ReadableStream; new (underlyingSource: UnderlyingByteSource, strategy?: QueuingStrategy<Uint8Array>): ReadableStream<Uint8Array>; new <R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>; }",
                  tsDefine = "interface ReadableStream<R = any> { readonly locked: boolean; cancel(reason?: any): Promise<void>; getReader(): ReadableStreamDefaultReader<R>; getReader(options: ReadableStreamGetReaderOptions): ReadableStreamBYOBReader; pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>; pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>; tee(): [ReadableStream<R>, ReadableStream<R>]; values(options?: ReadableStreamValuesOptions): AsyncIterableIterator<R>; [Symbol.asyncIterator](options?: ReadableStreamValuesOptions): AsyncIterableIterator<R>; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "ReadableStream" ) ),
            ( nested = (
                structure = (
                  name = "WritableStream",
                  members = [
                    ( property = (
                        name = "locked",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "abort",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( method = (
                        name = "close",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "getWriter",
                        returnType = (
                          structure = (
                            name = "WritableStreamDefaultWriter",
                            fullyQualifiedName = "workerd::api::WritableStreamDefaultWriter" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "UnderlyingSink",
                                  fullyQualifiedName = "workerd::api::UnderlyingSink" ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "StreamQueuingStrategy",
                                  fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::WritableStream",
                  tsRoot = false,
                  tsOverride = "<W = any> { getWriter(): WritableStreamDefaultWriter<W>; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "WritableStream" ) ),
            ( nested = (
                structure = (
                  name = "WritableStreamDefaultWriter",
                  members = [
                    ( property = (
                        name = "closed",
                        type = (
                          promise = (value = (voidt = void)) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "ready",
                        type = (
                          promise = (value = (voidt = void)) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "desiredSize",
                        type = (
                          maybe = (
                            value = (number = (name = "int")),
                            name = "kj::Maybe" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "abort",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( method = (
                        name = "close",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "write",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (unknown = void) ],
                        static = false ) ),
                    ( method = (
                        name = "releaseLock",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "WritableStream",
                              fullyQualifiedName = "workerd::api::WritableStream" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::WritableStreamDefaultWriter",
                  tsRoot = false,
                  tsOverride = "<W = any> { write(chunk?: W): Promise<void>; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "WritableStreamDefaultWriter" ) ),
            ( nested = (
                structure = (
                  name = "TransformStream",
                  members = [
                    ( property = (
                        name = "readable",
                        type = (
                          structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "writable",
                        type = (
                          structure = (
                            name = "WritableStream",
                            fullyQualifiedName = "workerd::api::WritableStream" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "Transformer",
                                  fullyQualifiedName = "workerd::api::Transformer" ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "StreamQueuingStrategy",
                                  fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "StreamQueuingStrategy",
                                  fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::TransformStream",
                  tsRoot = false,
                  tsOverride = "<I = any, O = any> { constructor(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>); readonly readable: ReadableStream<O>; readonly writable: WritableStream<I>; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "TransformStream" ) ),
            ( nested = (
                structure = (
                  name = "ByteLengthQueuingStrategy",
                  members = [
                    ( property = (
                        name = "highWaterMark",
                        type = (
                          number = (name = "double") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "size",
                        type = (
                          function = (
                            returnType = (
                              maybe = (
                                value = (
                                  number = (name = "unsigned int") ),
                                name = "jsg::Optional" ) ),
                            args = [
                              ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ] ) ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( constructor = (
                        args = [
                          ( structure = (
                              name = "QueuingStrategyInit",
                              fullyQualifiedName = "workerd::api::QueuingStrategyInit" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::ByteLengthQueuingStrategy",
                  tsRoot = false,
                  tsOverride = "implements QueuingStrategy<ArrayBufferView> { get size(): (chunk?: any) => number; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "ByteLengthQueuingStrategy" ) ),
            ( nested = (
                structure = (
                  name = "CountQueuingStrategy",
                  members = [
                    ( property = (
                        name = "highWaterMark",
                        type = (
                          number = (name = "double") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "size",
                        type = (
                          function = (
                            returnType = (
                              maybe = (
                                value = (
                                  number = (name = "unsigned int") ),
                                name = "jsg::Optional" ) ),
                            args = [
                              ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ] ) ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( constructor = (
                        args = [
                          ( structure = (
                              name = "QueuingStrategyInit",
                              fullyQualifiedName = "workerd::api::QueuingStrategyInit" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::CountQueuingStrategy",
                  tsRoot = false,
                  tsOverride = "implements QueuingStrategy { get size(): (chunk?: any) => number; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "CountQueuingStrategy" ) ),
            ( nested = (
                structure = (
                  name = "CompressionStream",
                  members = [
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "TransformStream",
                      fullyQualifiedName = "workerd::api::TransformStream" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::CompressionStream",
                  tsRoot = false,
                  tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, Uint8Array> { constructor(format: \"gzip\" | \"deflate\" | \"deflate-raw\"); }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "CompressionStream" ) ),
            ( nested = (
                structure = (
                  name = "DecompressionStream",
                  members = [
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "TransformStream",
                      fullyQualifiedName = "workerd::api::TransformStream" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::DecompressionStream",
                  tsRoot = false,
                  tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, Uint8Array> { constructor(format: \"gzip\" | \"deflate\" | \"deflate-raw\"); }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "DecompressionStream" ) ),
            ( nested = (
                structure = (
                  name = "TextEncoderStream",
                  members = [
                    ( property = (
                        name = "encoding",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "TransformStream",
                      fullyQualifiedName = "workerd::api::TransformStream" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::TextEncoderStream",
                  tsRoot = false,
                  tsOverride = "extends TransformStream<string, Uint8Array>",
                  disposable = false,
                  asyncDisposable = false ),
                name = "TextEncoderStream" ) ),
            ( nested = (
                structure = (
                  name = "TextDecoderStream",
                  members = [
                    ( property = (
                        name = "encoding",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "fatal",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "ignoreBOM",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "TextDecoderStreamInit",
                                  fullyQualifiedName = "workerd::api::TextDecoderStream::TextDecoderStreamInit" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "TransformStream",
                      fullyQualifiedName = "workerd::api::TransformStream" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::TextDecoderStream",
                  tsRoot = false,
                  tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, string>",
                  disposable = false,
                  asyncDisposable = false ),
                name = "TextDecoderStream" ) ),
            ( nested = (
                structure = (
                  name = "Headers",
                  members = [
                    ( method = (
                        name = "get",
                        returnType = (
                          maybe = (
                            value = (
                              string = (name = "ByteString") ),
                            name = "kj::Maybe" ) ),
                        args = [
                          ( string = (name = "ByteString") ) ],
                        static = false ) ),
                    ( method = (
                        name = "getAll",
                        returnType = (
                          array = (
                            element = (
                              string = (name = "ByteString") ),
                            name = "kj::ArrayPtr" ) ),
                        args = [
                          ( string = (name = "ByteString") ) ],
                        static = false ) ),
                    ( method = (
                        name = "has",
                        returnType = (boolt = void),
                        args = [
                          ( string = (name = "ByteString") ) ],
                        static = false ) ),
                    ( method = (
                        name = "set",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "ByteString") ),
                          ( string = (name = "ByteString") ) ],
                        static = false ) ),
                    ( method = (
                        name = "append",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "ByteString") ),
                          ( string = (name = "ByteString") ) ],
                        static = false ) ),
                    ( method = (
                        name = "delete",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "ByteString") ) ],
                        static = false ) ),
                    ( method = (
                        name = "forEach",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( function = (
                              returnType = (voidt = void),
                              args = [
                                ( string = (name = "kj::StringPtr") ),
                                ( string = (name = "kj::StringPtr") ),
                                ( structure = (
                                    name = "Headers",
                                    fullyQualifiedName = "workerd::api::Headers" ) ) ] ) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( method = (
                        name = "entries",
                        returnType = (
                          structure = (
                            name = "EntryIterator",
                            fullyQualifiedName = "workerd::api::Headers::EntryIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "keys",
                        returnType = (
                          structure = (
                            name = "KeyIterator",
                            fullyQualifiedName = "workerd::api::Headers::KeyIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "values",
                        returnType = (
                          structure = (
                            name = "ValueIterator",
                            fullyQualifiedName = "workerd::api::Headers::ValueIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "Headers",
                                        fullyQualifiedName = "workerd::api::Headers" ) ),
                                    ( array = (
                                        element = (
                                          array = (
                                            element = (
                                              string = (name = "ByteString") ),
                                            name = "jsg::Sequence" ) ),
                                        name = "jsg::Sequence" ) ),
                                    ( dict = (
                                        key = (
                                          string = (name = "ByteString") ),
                                        value = (
                                          string = (name = "ByteString") ) ) ) ] ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = true,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Headers",
                  iterator = (
                    name = "entries",
                    returnType = (
                      structure = (
                        name = "EntryIterator",
                        fullyQualifiedName = "workerd::api::Headers::EntryIterator" ) ),
                    args = [
                      ( jsgImpl = (type = jsgLock) ) ],
                    static = false ),
                  tsRoot = false,
                  tsOverride = "{ constructor(init?: HeadersInit); entries(): IterableIterator<[key: string, value: string]>; [Symbol.iterator](): IterableIterator<[key: string, value: string]>; forEach<This = unknown>(callback: (this: This, value: string, key: string, parent: Headers) => void, thisArg?: This): void; }",
                  tsDefine = "type HeadersInit = Headers | Iterable<Iterable<string>> | Record<string, string>",
                  disposable = false,
                  asyncDisposable = false ),
                name = "Headers" ) ),
            ( nested = (
                structure = (
                  name = "Body",
                  members = [
                    ( property = (
                        name = "body",
                        type = (
                          maybe = (
                            value = (
                              structure = (
                                name = "ReadableStream",
                                fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                            name = "kj::Maybe" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "bodyUsed",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "arrayBuffer",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "text",
                        returnType = (
                          promise = (
                            value = (
                              string = (name = "kj::String") ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "json",
                        returnType = (
                          promise = (value = (unknown = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "formData",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "FormData",
                                fullyQualifiedName = "workerd::api::FormData" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "blob",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "Blob",
                                fullyQualifiedName = "workerd::api::Blob" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Body",
                  tsRoot = false,
                  tsOverride = "{ json<T>(): Promise<T>; }",
                  tsDefine = "type BodyInit = ReadableStream<Uint8Array> | string | ArrayBuffer | ArrayBufferView | Blob | URLSearchParams | FormData",
                  disposable = false,
                  asyncDisposable = false ),
                name = "Body" ) ),
            ( nested = (
                structure = (
                  name = "Request",
                  members = [
                    ( method = (
                        name = "clone",
                        returnType = (
                          structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( property = (
                        name = "method",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "url",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "headers",
                        type = (
                          structure = (
                            name = "Headers",
                            fullyQualifiedName = "workerd::api::Headers" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "redirect",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "fetcher",
                        type = (
                          maybe = (
                            value = (
                              structure = (
                                name = "Fetcher",
                                fullyQualifiedName = "workerd::api::Fetcher" ) ),
                            name = "kj::Maybe" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "signal",
                        type = (
                          structure = (
                            name = "AbortSignal",
                            fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "cf",
                        type = (
                          maybe = (value = (object = void), name = "jsg::Optional") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "integrity",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "keepalive",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "Request",
                                    fullyQualifiedName = "workerd::api::Request" ) ),
                                ( string = (name = "kj::String") ) ] ) ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "RequestInitializerDict",
                                        fullyQualifiedName = "workerd::api::RequestInitializerDict" ) ),
                                    ( structure = (
                                        name = "Request",
                                        fullyQualifiedName = "workerd::api::Request" ) ) ] ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "Body",
                      fullyQualifiedName = "workerd::api::Body" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Request",
                  tsRoot = false,
                  tsOverride = "<CfHostMetadata = unknown, Cf = CfProperties<CfHostMetadata>> { constructor(input: RequestInfo<CfProperties>, init?: RequestInit<Cf>); clone(): Request<CfHostMetadata, Cf>; readonly cf?: Cf; }",
                  tsDefine = "type RequestInfo<CfHostMetadata = unknown, Cf = CfProperties<CfHostMetadata>> = Request<CfHostMetadata, Cf> | string | URL",
                  disposable = false,
                  asyncDisposable = false ),
                name = "Request" ) ),
            ( nested = (
                structure = (
                  name = "Response",
                  members = [
                    ( method = (
                        name = "error",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [],
                        static = true ) ),
                    ( method = (
                        name = "redirect",
                        returnType = (
                          structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (number = (name = "int")),
                              name = "jsg::Optional" ) ) ],
                        static = true ) ),
                    ( method = (
                        name = "json",
                        returnType = (
                          structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (unknown = void),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "InitializerDict",
                                        fullyQualifiedName = "workerd::api::Response::InitializerDict" ) ),
                                    ( structure = (
                                        name = "Response",
                                        fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                              name = "jsg::Optional" ) ) ],
                        static = true ) ),
                    ( method = (
                        name = "clone",
                        returnType = (
                          structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( property = (
                        name = "status",
                        type = (number = (name = "int")),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "statusText",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "headers",
                        type = (
                          structure = (
                            name = "Headers",
                            fullyQualifiedName = "workerd::api::Headers" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "ok",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "redirected",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "url",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "webSocket",
                        type = (
                          maybe = (
                            value = (
                              structure = (
                                name = "WebSocket",
                                fullyQualifiedName = "workerd::api::WebSocket" ) ),
                            name = "kj::Maybe" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "cf",
                        type = (
                          maybe = (value = (object = void), name = "jsg::Optional") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                maybe = (
                                  value = (
                                    oneOf = (
                                      variants = [
                                        ( structure = (
                                            name = "ReadableStream",
                                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                                        ( string = (name = "kj::String") ),
                                        ( array = (
                                            element = (
                                              number = (name = "unsigned char") ),
                                            name = "kj::Array" ) ),
                                        ( structure = (
                                            name = "Blob",
                                            fullyQualifiedName = "workerd::api::Blob" ) ),
                                        ( structure = (
                                            name = "URLSearchParams",
                                            fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                                        ( structure = (
                                            name = "FormData",
                                            fullyQualifiedName = "workerd::api::FormData" ) ) ] ) ),
                                  name = "kj::Maybe" ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "InitializerDict",
                                        fullyQualifiedName = "workerd::api::Response::InitializerDict" ) ),
                                    ( structure = (
                                        name = "Response",
                                        fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "Body",
                      fullyQualifiedName = "workerd::api::Body" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Response",
                  tsRoot = false,
                  tsOverride = "{ constructor(body?: BodyInit | null, init?: ResponseInit); }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "Response" ) ),
            ( nested = (
                structure = (
                  name = "WebSocket",
                  members = [
                    ( method = (
                        name = "accept",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "send",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                ( string = (name = "kj::String") ) ] ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "close",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (number = (name = "int")),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "serializeAttachment",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (unknown = void) ],
                        static = false ) ),
                    ( method = (
                        name = "deserializeAttachment",
                        returnType = (
                          maybe = (value = (unknown = void), name = "kj::Maybe") ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( constant = (
                        name = "READY_STATE_CONNECTING",
                        value = 0 ) ),
                    ( constant = (name = "CONNECTING", value = 0) ),
                    ( constant = (
                        name = "READY_STATE_OPEN",
                        value = 1 ) ),
                    ( constant = (name = "OPEN", value = 1) ),
                    ( constant = (
                        name = "READY_STATE_CLOSING",
                        value = 2 ) ),
                    ( constant = (name = "CLOSING", value = 2) ),
                    ( constant = (
                        name = "READY_STATE_CLOSED",
                        value = 3 ) ),
                    ( constant = (name = "CLOSED", value = 3) ),
                    ( property = (
                        name = "readyState",
                        type = (number = (name = "int")),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "url",
                        type = (
                          maybe = (
                            value = (
                              string = (name = "kj::StringPtr") ),
                            name = "kj::Maybe" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "protocol",
                        type = (
                          maybe = (
                            value = (
                              string = (name = "kj::StringPtr") ),
                            name = "kj::Maybe" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "extensions",
                        type = (
                          maybe = (
                            value = (
                              string = (name = "kj::StringPtr") ),
                            name = "kj::Maybe" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( array = (
                                        element = (
                                          string = (name = "kj::String") ),
                                        name = "kj::Array" ) ),
                                    ( string = (name = "kj::String") ) ] ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "EventTarget",
                      fullyQualifiedName = "workerd::api::EventTarget" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::WebSocket",
                  tsRoot = false,
                  tsOverride = "extends EventTarget<WebSocketEventMap>",
                  tsDefine = "type WebSocketEventMap = { close: CloseEvent; message: MessageEvent; open: Event; error: ErrorEvent; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "WebSocket" ) ),
            ( nested = (
                structure = (
                  name = "WebSocketPair",
                  members = [
                    ( property = (
                        name = "0",
                        type = (
                          structure = (
                            name = "WebSocket",
                            fullyQualifiedName = "workerd::api::WebSocket" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "1",
                        type = (
                          structure = (
                            name = "WebSocket",
                            fullyQualifiedName = "workerd::api::WebSocket" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (args = []) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::WebSocketPair",
                  tsRoot = false,
                  tsOverride = "const WebSocketPair: { new (): { 0: WebSocket; 1: WebSocket }; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "WebSocketPair" ) ),
            ( nested = (
                structure = (
                  name = "WebSocketRequestResponsePair",
                  members = [
                    ( property = (
                        name = "request",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "response",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( constructor = (
                        args = [
                          ( string = (name = "kj::String") ),
                          ( string = (name = "kj::String") ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::WebSocketRequestResponsePair",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "WebSocketRequestResponsePair" ) ),
            ( nested = (
                structure = (
                  name = "AbortController",
                  members = [
                    ( property = (
                        name = "signal",
                        type = (
                          structure = (
                            name = "AbortSignal",
                            fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "abort",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( constructor = (args = []) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::AbortController",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "AbortController" ) ),
            ( nested = (
                structure = (
                  name = "AbortSignal",
                  members = [
                    ( method = (
                        name = "abort",
                        returnType = (
                          structure = (
                            name = "AbortSignal",
                            fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = true ) ),
                    ( method = (
                        name = "timeout",
                        returnType = (
                          structure = (
                            name = "AbortSignal",
                            fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( number = (name = "double") ) ],
                        static = true ) ),
                    ( method = (
                        name = "any",
                        returnType = (
                          structure = (
                            name = "AbortSignal",
                            fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( array = (
                              element = (
                                structure = (
                                  name = "AbortSignal",
                                  fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                              name = "kj::Array" ) ),
                          ( jsgImpl = (type = jsgTypeHandler) ) ],
                        static = true ) ),
                    ( property = (
                        name = "aborted",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "reason",
                        type = (unknown = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "onabort",
                        type = (
                          maybe = (value = (unknown = void), name = "kj::Maybe") ),
                        readonly = false,
                        lazy = false,
                        prototype = true ) ),
                    ( method = (
                        name = "throwIfAborted",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ) ],
                  extends = (
                    structure = (
                      name = "EventTarget",
                      fullyQualifiedName = "workerd::api::EventTarget" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::AbortSignal",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "AbortSignal" ) ),
            ( nested = (
                structure = (
                  name = "TextDecoder",
                  members = [
                    ( method = (
                        name = "decode",
                        returnType = (
                          string = (name = "jsg::JsString") ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                array = (
                                  element = (
                                    number = (name = "unsigned char") ),
                                  name = "kj::Array" ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "DecodeOptions",
                                  fullyQualifiedName = "workerd::api::TextDecoder::DecodeOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( property = (
                        name = "encoding",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "fatal",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "ignoreBOM",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ConstructorOptions",
                                  fullyQualifiedName = "workerd::api::TextDecoder::ConstructorOptions" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::TextDecoder",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "TextDecoder" ) ),
            ( nested = (
                structure = (
                  name = "TextEncoder",
                  members = [
                    ( method = (
                        name = "encode",
                        returnType = (
                          builtin = (type = jsgBufferSource) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                string = (name = "jsg::JsString") ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "encodeInto",
                        returnType = (
                          structure = (
                            name = "EncodeIntoResult",
                            fullyQualifiedName = "workerd::api::TextEncoder::EncodeIntoResult" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "jsg::JsString") ),
                          ( builtin = (type = jsgBufferSource) ) ],
                        static = false ) ),
                    ( property = (
                        name = "encoding",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (args = []) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::TextEncoder",
                  tsRoot = false,
                  tsOverride = "{ encode(input?: string): Uint8Array; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "TextEncoder" ) ),
            ( nested = (
                structure = (
                  name = "URL",
                  members = [
                    ( property = (
                        name = "href",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "origin",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "protocol",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "username",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "password",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "host",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "hostname",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "port",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "pathname",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "search",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "searchParams",
                        type = (
                          structure = (
                            name = "URLSearchParams",
                            fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "hash",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = false,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "toString",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "toJSON",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::URL",
                  tsRoot = false,
                  tsOverride = "{ constructor(url: string | URL, base?: string | URL); }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "URL" ) ),
            ( nested = (
                structure = (
                  name = "URLSearchParams",
                  members = [
                    ( property = (
                        name = "size",
                        type = (
                          number = (name = "unsigned int") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( method = (
                        name = "append",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ),
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "delete",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "get",
                        returnType = (
                          maybe = (
                            value = (
                              string = (name = "kj::String") ),
                            name = "kj::Maybe" ) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "getAll",
                        returnType = (
                          array = (
                            element = (
                              string = (name = "kj::String") ),
                            name = "kj::Array" ) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "has",
                        returnType = (boolt = void),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "set",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ),
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "sort",
                        returnType = (voidt = void),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "entries",
                        returnType = (
                          structure = (
                            name = "EntryIterator",
                            fullyQualifiedName = "workerd::api::URLSearchParams::EntryIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "keys",
                        returnType = (
                          structure = (
                            name = "KeyIterator",
                            fullyQualifiedName = "workerd::api::URLSearchParams::KeyIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "values",
                        returnType = (
                          structure = (
                            name = "ValueIterator",
                            fullyQualifiedName = "workerd::api::URLSearchParams::ValueIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "forEach",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( function = (
                              returnType = (voidt = void),
                              args = [
                                ( string = (name = "kj::StringPtr") ),
                                ( string = (name = "kj::StringPtr") ),
                                ( structure = (
                                    name = "URLSearchParams",
                                    fullyQualifiedName = "workerd::api::URLSearchParams" ) ) ] ) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( method = (
                        name = "toString",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "URLSearchParams",
                                        fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                                    ( string = (name = "kj::String") ),
                                    ( dict = (
                                        key = (
                                          string = (name = "kj::String") ),
                                        value = (
                                          string = (name = "kj::String") ) ) ),
                                    ( array = (
                                        element = (
                                          array = (
                                            element = (
                                              string = (name = "kj::String") ),
                                            name = "kj::Array" ) ),
                                        name = "kj::Array" ) ) ] ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = true,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::URLSearchParams",
                  iterator = (
                    name = "entries",
                    returnType = (
                      structure = (
                        name = "EntryIterator",
                        fullyQualifiedName = "workerd::api::URLSearchParams::EntryIterator" ) ),
                    args = [
                      ( jsgImpl = (type = jsgLock) ) ],
                    static = false ),
                  tsRoot = false,
                  tsOverride = "{ constructor(init?: URLSearchParams | string | Record<string, string> | [key: string, value: string][]); entries(): IterableIterator<[key: string, value: string]>; [Symbol.iterator](): IterableIterator<[key: string, value: string]>; forEach<This = unknown>(callback: (this: This, value: string, key: string, parent: URLSearchParams) => void, thisArg?: This): void; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "URLSearchParams" ) ),
            ( nested = (
                structure = (
                  name = "URLPattern",
                  members = [
                    ( property = (
                        name = "protocol",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "username",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "password",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "hostname",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "port",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "pathname",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "search",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "hash",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( method = (
                        name = "test",
                        returnType = (boolt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( string = (name = "kj::String") ),
                                    ( structure = (
                                        name = "URLPatternInit",
                                        fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit" ) ) ] ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "exec",
                        returnType = (
                          maybe = (
                            value = (
                              structure = (
                                name = "URLPatternResult",
                                fullyQualifiedName = "workerd::api::URLPattern::URLPatternResult" ) ),
                            name = "kj::Maybe" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( string = (name = "kj::String") ),
                                    ( structure = (
                                        name = "URLPatternInit",
                                        fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit" ) ) ] ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( string = (name = "kj::String") ),
                                    ( structure = (
                                        name = "URLPatternInit",
                                        fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit" ) ) ] ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "URLPatternOptions",
                                  fullyQualifiedName = "workerd::api::URLPattern::URLPatternOptions" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::URLPattern",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "URLPattern" ) ),
            ( nested = (
                structure = (
                  name = "Blob",
                  members = [
                    ( property = (
                        name = "size",
                        type = (number = (name = "int")),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "type",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "slice",
                        returnType = (
                          structure = (
                            name = "Blob",
                            fullyQualifiedName = "workerd::api::Blob" ) ),
                        args = [
                          ( maybe = (
                              value = (number = (name = "int")),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (number = (name = "int")),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "arrayBuffer",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "text",
                        returnType = (
                          promise = (
                            value = (
                              string = (name = "kj::String") ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "stream",
                        returnType = (
                          structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        args = [],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( maybe = (
                              value = (
                                array = (
                                  element = (
                                    oneOf = (
                                      variants = [
                                        ( array = (
                                            element = (
                                              number = (name = "unsigned char") ),
                                            name = "kj::Array" ) ),
                                        ( string = (name = "kj::String") ),
                                        ( structure = (
                                            name = "Blob",
                                            fullyQualifiedName = "workerd::api::Blob" ) ) ] ) ),
                                  name = "kj::Array" ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "Options",
                                  fullyQualifiedName = "workerd::api::Blob::Options" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Blob",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "Blob" ) ),
            ( nested = (
                structure = (
                  name = "File",
                  members = [
                    ( property = (
                        name = "name",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "lastModified",
                        type = (
                          number = (name = "double") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( maybe = (
                              value = (
                                array = (
                                  element = (
                                    oneOf = (
                                      variants = [
                                        ( array = (
                                            element = (
                                              number = (name = "unsigned char") ),
                                            name = "kj::Array" ) ),
                                        ( string = (name = "kj::String") ),
                                        ( structure = (
                                            name = "Blob",
                                            fullyQualifiedName = "workerd::api::Blob" ) ) ] ) ),
                                  name = "kj::Array" ) ),
                              name = "jsg::Optional" ) ),
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "Options",
                                  fullyQualifiedName = "workerd::api::File::Options" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "Blob",
                      fullyQualifiedName = "workerd::api::Blob" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::File",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "File" ) ),
            ( nested = (
                structure = (
                  name = "FormData",
                  members = [
                    ( method = (
                        name = "append",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ),
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "File",
                                    fullyQualifiedName = "workerd::api::File" ) ),
                                ( structure = (
                                    name = "Blob",
                                    fullyQualifiedName = "workerd::api::Blob" ) ),
                                ( string = (name = "kj::String") ) ] ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "delete",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "get",
                        returnType = (
                          maybe = (
                            value = (
                              oneOf = (
                                variants = [
                                  ( structure = (
                                      name = "File",
                                      fullyQualifiedName = "workerd::api::File" ) ),
                                  ( string = (name = "kj::String") ) ] ) ),
                            name = "kj::Maybe" ) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "getAll",
                        returnType = (
                          array = (
                            element = (
                              oneOf = (
                                variants = [
                                  ( structure = (
                                      name = "File",
                                      fullyQualifiedName = "workerd::api::File" ) ),
                                  ( string = (name = "kj::String") ) ] ) ),
                            name = "kj::Array" ) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "has",
                        returnType = (boolt = void),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "set",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ),
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "File",
                                    fullyQualifiedName = "workerd::api::File" ) ),
                                ( structure = (
                                    name = "Blob",
                                    fullyQualifiedName = "workerd::api::Blob" ) ),
                                ( string = (name = "kj::String") ) ] ) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "entries",
                        returnType = (
                          structure = (
                            name = "EntryIterator",
                            fullyQualifiedName = "workerd::api::FormData::EntryIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "keys",
                        returnType = (
                          structure = (
                            name = "KeyIterator",
                            fullyQualifiedName = "workerd::api::FormData::KeyIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "values",
                        returnType = (
                          structure = (
                            name = "ValueIterator",
                            fullyQualifiedName = "workerd::api::FormData::ValueIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "forEach",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( function = (
                              returnType = (voidt = void),
                              args = [
                                ( oneOf = (
                                    variants = [
                                      ( structure = (
                                          name = "File",
                                          fullyQualifiedName = "workerd::api::File" ) ),
                                      ( string = (name = "kj::String") ) ] ) ),
                                ( string = (name = "kj::StringPtr") ),
                                ( structure = (
                                    name = "FormData",
                                    fullyQualifiedName = "workerd::api::FormData" ) ) ] ) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                        static = false ) ),
                    ( constructor = (args = []) ) ],
                  iterable = true,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::FormData",
                  iterator = (
                    name = "entries",
                    returnType = (
                      structure = (
                        name = "EntryIterator",
                        fullyQualifiedName = "workerd::api::FormData::EntryIterator" ) ),
                    args = [
                      ( jsgImpl = (type = jsgLock) ) ],
                    static = false ),
                  tsRoot = false,
                  tsOverride = "{ get(name: string): string | null; getAll(name: string): string[]; append(name: string, value: string): void; append(name: string, value: Blob, filename?: string): void; set(name: string, value: string): void; set(name: string, value: Blob, filename?: string): void; entries(): IterableIterator<[key: string, value: string]>; [Symbol.iterator](): IterableIterator<[key: string, value: string]>; forEach<This = unknown>(callback: (this: This, value: string, key: string, parent: FormData) => void, thisArg?: This): void; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "FormData" ) ),
            ( nested = (
                structure = (
                  name = "Crypto",
                  members = [
                    ( property = (
                        name = "subtle",
                        type = (
                          structure = (
                            name = "SubtleCrypto",
                            fullyQualifiedName = "workerd::api::SubtleCrypto" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( method = (
                        name = "getRandomValues",
                        returnType = (
                          builtin = (type = jsgBufferSource) ),
                        args = [
                          ( builtin = (type = jsgBufferSource) ) ],
                        static = false ) ),
                    ( method = (
                        name = "randomUUID",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( nested = (
                        structure = (
                          name = "DigestStream",
                          members = [
                            ( property = (
                                name = "digest",
                                type = (
                                  promise = (
                                    value = (
                                      array = (
                                        element = (
                                          number = (name = "unsigned char") ),
                                        name = "kj::Array" ) ) ) ),
                                readonly = true,
                                lazy = false,
                                prototype = false ) ),
                            ( constructor = (
                                args = [
                                  ( jsgImpl = (type = jsgLock) ),
                                  ( oneOf = (
                                      variants = [
                                        ( string = (name = "kj::String") ),
                                        ( structure = (
                                            name = "HashAlgorithm",
                                            fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ) ] ) ) ],
                          extends = (
                            structure = (
                              name = "WritableStream",
                              fullyQualifiedName = "workerd::api::WritableStream" ) ),
                          iterable = false,
                          asyncIterable = false,
                          fullyQualifiedName = "workerd::api::DigestStream",
                          tsRoot = false,
                          tsOverride = "extends WritableStream<ArrayBuffer | ArrayBufferView>",
                          disposable = false,
                          asyncDisposable = false ),
                        name = "DigestStream" ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Crypto",
                  tsRoot = false,
                  tsOverride = "{ getRandomValues< T extends | Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | BigInt64Array | BigUint64Array >(buffer: T): T; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "Crypto" ) ),
            ( nested = (
                structure = (
                  name = "SubtleCrypto",
                  members = [
                    ( method = (
                        name = "encrypt",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "EncryptAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "decrypt",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "EncryptAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "sign",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "SignAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::SignAlgorithm" ) ) ] ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "verify",
                        returnType = (
                          promise = (value = (boolt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "SignAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::SignAlgorithm" ) ) ] ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "digest",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "HashAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "generateKey",
                        returnType = (
                          promise = (
                            value = (
                              oneOf = (
                                variants = [
                                  ( structure = (
                                      name = "CryptoKey",
                                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                                  ( structure = (
                                      name = "CryptoKeyPair",
                                      fullyQualifiedName = "workerd::api::CryptoKeyPair" ) ) ] ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "GenerateKeyAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::GenerateKeyAlgorithm" ) ) ] ) ),
                          (boolt = void),
                          ( array = (
                              element = (
                                string = (name = "kj::String") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "deriveKey",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "CryptoKey",
                                fullyQualifiedName = "workerd::api::CryptoKey" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "DeriveKeyAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::DeriveKeyAlgorithm" ) ) ] ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "ImportKeyAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::ImportKeyAlgorithm" ) ) ] ) ),
                          (boolt = void),
                          ( array = (
                              element = (
                                string = (name = "kj::String") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "deriveBits",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "DeriveKeyAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::DeriveKeyAlgorithm" ) ) ] ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( maybe = (
                              value = (number = (name = "int")),
                              name = "kj::Maybe" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "importKey",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "CryptoKey",
                                fullyQualifiedName = "workerd::api::CryptoKey" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( oneOf = (
                              variants = [
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                ( structure = (
                                    name = "JsonWebKey",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey" ) ) ] ) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "ImportKeyAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::ImportKeyAlgorithm" ) ) ] ) ),
                          (boolt = void),
                          ( array = (
                              element = (
                                string = (name = "kj::String") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "exportKey",
                        returnType = (
                          promise = (
                            value = (
                              oneOf = (
                                variants = [
                                  ( array = (
                                      element = (
                                        number = (name = "unsigned char") ),
                                      name = "kj::Array" ) ),
                                  ( structure = (
                                      name = "JsonWebKey",
                                      fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey" ) ) ] ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "wrapKey",
                        returnType = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "EncryptAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                          ( jsgImpl = (type = jsgTypeHandler) ) ],
                        static = false ) ),
                    ( method = (
                        name = "unwrapKey",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "CryptoKey",
                                fullyQualifiedName = "workerd::api::CryptoKey" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "EncryptAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "ImportKeyAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::ImportKeyAlgorithm" ) ) ] ) ),
                          (boolt = void),
                          ( array = (
                              element = (
                                string = (name = "kj::String") ),
                              name = "kj::Array" ) ),
                          ( jsgImpl = (type = jsgTypeHandler) ) ],
                        static = false ) ),
                    ( method = (
                        name = "timingSafeEqual",
                        returnType = (boolt = void),
                        args = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::SubtleCrypto",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "SubtleCrypto" ) ),
            ( nested = (
                structure = (
                  name = "CryptoKey",
                  members = [
                    ( property = (
                        name = "type",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "extractable",
                        type = (boolt = void),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "algorithm",
                        type = (
                          oneOf = (
                            variants = [
                              ( structure = (
                                  name = "KeyAlgorithm",
                                  fullyQualifiedName = "workerd::api::CryptoKey::KeyAlgorithm" ) ),
                              ( structure = (
                                  name = "AesKeyAlgorithm",
                                  fullyQualifiedName = "workerd::api::CryptoKey::AesKeyAlgorithm" ) ),
                              ( structure = (
                                  name = "HmacKeyAlgorithm",
                                  fullyQualifiedName = "workerd::api::CryptoKey::HmacKeyAlgorithm" ) ),
                              ( structure = (
                                  name = "RsaKeyAlgorithm",
                                  fullyQualifiedName = "workerd::api::CryptoKey::RsaKeyAlgorithm" ) ),
                              ( structure = (
                                  name = "EllipticKeyAlgorithm",
                                  fullyQualifiedName = "workerd::api::CryptoKey::EllipticKeyAlgorithm" ) ),
                              ( structure = (
                                  name = "ArbitraryKeyAlgorithm",
                                  fullyQualifiedName = "workerd::api::CryptoKey::ArbitraryKeyAlgorithm" ) ) ] ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( property = (
                        name = "usages",
                        type = (
                          array = (
                            element = (
                              string = (name = "kj::StringPtr") ),
                            name = "kj::Array" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::CryptoKey",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "CryptoKey" ) ),
            ( nested = (
                structure = (
                  name = "CacheStorage",
                  members = [
                    ( method = (
                        name = "open",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "Cache",
                                fullyQualifiedName = "workerd::api::Cache" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "delete",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "match",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "Request",
                                    fullyQualifiedName = "workerd::api::Request" ) ),
                                ( string = (name = "kj::String") ) ] ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "CacheQueryOptions",
                                  fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "has",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "keys",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [],
                        static = false ) ),
                    ( property = (
                        name = "default",
                        type = (
                          structure = (
                            name = "Cache",
                            fullyQualifiedName = "workerd::api::Cache" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::CacheStorage",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "CacheStorage" ) ),
            ( nested = (
                structure = (
                  name = "Cache",
                  members = [
                    ( method = (
                        name = "add",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "Request",
                                    fullyQualifiedName = "workerd::api::Request" ) ),
                                ( string = (name = "kj::String") ) ] ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "addAll",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( array = (
                              element = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "Request",
                                        fullyQualifiedName = "workerd::api::Request" ) ),
                                    ( string = (name = "kj::String") ) ] ) ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "delete",
                        returnType = (
                          promise = (value = (boolt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "Request",
                                    fullyQualifiedName = "workerd::api::Request" ) ),
                                ( string = (name = "kj::String") ) ] ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "CacheQueryOptions",
                                  fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "match",
                        returnType = (
                          promise = (
                            value = (
                              maybe = (
                                value = (
                                  structure = (
                                    name = "Response",
                                    fullyQualifiedName = "workerd::api::Response" ) ),
                                name = "jsg::Optional" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "Request",
                                    fullyQualifiedName = "workerd::api::Request" ) ),
                                ( string = (name = "kj::String") ) ] ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "CacheQueryOptions",
                                  fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "put",
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "Request",
                                    fullyQualifiedName = "workerd::api::Request" ) ),
                                ( string = (name = "kj::String") ) ] ) ),
                          ( structure = (
                              name = "Response",
                              fullyQualifiedName = "workerd::api::Response" ) ),
                          ( jsgImpl = (type = configuration) ) ],
                        static = false ) ),
                    ( method = (
                        name = "matchAll",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "Request",
                                        fullyQualifiedName = "workerd::api::Request" ) ),
                                    ( string = (name = "kj::String") ) ] ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "CacheQueryOptions",
                                  fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "keys",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [
                          ( maybe = (
                              value = (
                                oneOf = (
                                  variants = [
                                    ( structure = (
                                        name = "Request",
                                        fullyQualifiedName = "workerd::api::Request" ) ),
                                    ( string = (name = "kj::String") ) ] ) ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "CacheQueryOptions",
                                  fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::Cache",
                  tsRoot = false,
                  tsOverride = "{ delete(request: RequestInfo, options?: CacheQueryOptions): Promise<boolean>; match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>; put(request: RequestInfo, response: Response): Promise<void>; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "Cache" ) ),
            ( nested = (
                structure = (
                  name = "FixedLengthStream",
                  members = [
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( number = (
                              name = "unsigned long long" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "QueuingStrategy",
                                  fullyQualifiedName = "workerd::api::IdentityTransformStream::QueuingStrategy" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "IdentityTransformStream",
                      fullyQualifiedName = "workerd::api::IdentityTransformStream" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::FixedLengthStream",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "FixedLengthStream" ) ),
            ( nested = (
                structure = (
                  name = "IdentityTransformStream",
                  members = [
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "QueuingStrategy",
                                  fullyQualifiedName = "workerd::api::IdentityTransformStream::QueuingStrategy" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "TransformStream",
                      fullyQualifiedName = "workerd::api::TransformStream" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::IdentityTransformStream",
                  tsRoot = false,
                  tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, Uint8Array>",
                  disposable = false,
                  asyncDisposable = false ),
                name = "IdentityTransformStream" ) ),
            ( nested = (
                structure = (
                  name = "HTMLRewriter",
                  members = [
                    ( method = (
                        name = "on",
                        returnType = (
                          structure = (
                            name = "HTMLRewriter",
                            fullyQualifiedName = "workerd::api::HTMLRewriter" ) ),
                        args = [
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "ElementContentHandlers",
                              fullyQualifiedName = "workerd::api::HTMLRewriter::ElementContentHandlers" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "onDocument",
                        returnType = (
                          structure = (
                            name = "HTMLRewriter",
                            fullyQualifiedName = "workerd::api::HTMLRewriter" ) ),
                        args = [
                          ( structure = (
                              name = "DocumentContentHandlers",
                              fullyQualifiedName = "workerd::api::HTMLRewriter::DocumentContentHandlers" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "transform",
                        returnType = (
                          structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "Response",
                              fullyQualifiedName = "workerd::api::Response" ) ) ],
                        static = false ) ),
                    ( constructor = (args = []) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::HTMLRewriter",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "HTMLRewriter" ) ),
            ( nested = (
                structure = (
                  name = "GPUAdapter",
                  members = [
                    ( method = (
                        name = "requestDevice",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "GPUDevice",
                                fullyQualifiedName = "workerd::api::gpu::GPUDevice" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "GPUDeviceDescriptor",
                                  fullyQualifiedName = "workerd::api::gpu::GPUDeviceDescriptor" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "requestAdapterInfo",
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "GPUAdapterInfo",
                                fullyQualifiedName = "workerd::api::gpu::GPUAdapterInfo" ) ) ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                array = (
                                  element = (
                                    string = (name = "kj::String") ),
                                  name = "kj::Array" ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( property = (
                        name = "features",
                        type = (
                          structure = (
                            name = "GPUSupportedFeatures",
                            fullyQualifiedName = "workerd::api::gpu::GPUSupportedFeatures" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "limits",
                        type = (
                          structure = (
                            name = "GPUSupportedLimits",
                            fullyQualifiedName = "workerd::api::gpu::GPUSupportedLimits" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUAdapter",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUAdapter" ) ),
            ( nested = (
                structure = (
                  name = "GPUOutOfMemoryError",
                  members = [],
                  extends = (
                    structure = (
                      name = "GPUError",
                      fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUOutOfMemoryError",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUOutOfMemoryError" ) ),
            ( nested = (
                structure = (
                  name = "GPUValidationError",
                  members = [],
                  extends = (
                    structure = (
                      name = "GPUError",
                      fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUValidationError",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUValidationError" ) ),
            ( nested = (
                structure = (
                  name = "GPUInternalError",
                  members = [],
                  extends = (
                    structure = (
                      name = "GPUError",
                      fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUInternalError",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUInternalError" ) ),
            ( nested = (
                structure = (
                  name = "GPUDeviceLostInfo",
                  members = [
                    ( property = (
                        name = "message",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "reason",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUDeviceLostInfo",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUDeviceLostInfo" ) ),
            ( nested = (
                structure = (
                  name = "GPUBufferUsage",
                  members = [
                    ( constant = (name = "MAP_READ", value = 1) ),
                    ( constant = (name = "MAP_WRITE", value = 2) ),
                    ( constant = (name = "COPY_SRC", value = 4) ),
                    ( constant = (name = "COPY_DST", value = 8) ),
                    ( constant = (name = "INDEX", value = 16) ),
                    ( constant = (name = "VERTEX", value = 32) ),
                    ( constant = (name = "UNIFORM", value = 64) ),
                    ( constant = (name = "STORAGE", value = 128) ),
                    ( constant = (name = "INDIRECT", value = 256) ),
                    ( constant = (name = "QUERY_RESOLVE", value = 512) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUBufferUsage",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUBufferUsage" ) ),
            ( nested = (
                structure = (
                  name = "GPUShaderStage",
                  members = [
                    ( constant = (name = "VERTEX", value = 1) ),
                    ( constant = (name = "FRAGMENT", value = 2) ),
                    ( constant = (name = "COMPUTE", value = 4) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUShaderStage",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUShaderStage" ) ),
            ( nested = (
                structure = (
                  name = "GPUMapMode",
                  members = [
                    ( constant = (name = "READ", value = 1) ),
                    ( constant = (name = "WRITE", value = 2) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUMapMode",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUMapMode" ) ),
            ( nested = (
                structure = (
                  name = "GPUTextureUsage",
                  members = [
                    ( constant = (name = "COPY_SRC", value = 1) ),
                    ( constant = (name = "COPY_DST", value = 2) ),
                    ( constant = (name = "TEXTURE_BINDING", value = 4) ),
                    ( constant = (name = "STORAGE_BINDING", value = 8) ),
                    ( constant = (
                        name = "RENDER_ATTACHMENT",
                        value = 16 ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUTextureUsage",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUTextureUsage" ) ),
            ( nested = (
                structure = (
                  name = "GPUColorWrite",
                  members = [
                    ( constant = (name = "RED", value = 1) ),
                    ( constant = (name = "GREEN", value = 2) ),
                    ( constant = (name = "BLUE", value = 4) ),
                    ( constant = (name = "ALPHA", value = 8) ),
                    ( constant = (name = "ALL", value = 15) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::gpu::GPUColorWrite",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "GPUColorWrite" ) ) ],
          extends = (
            structure = (
              name = "WorkerGlobalScope",
              fullyQualifiedName = "workerd::api::WorkerGlobalScope" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ServiceWorkerGlobalScope",
          tsRoot = true,
          tsOverride = "{ btoa(data: string): string; setTimeout(callback: (...args: any[]) => void, msDelay?: number): number; setTimeout<Args extends any[]>(callback: (...args: Args) => void, msDelay?: number, ...args: Args): number; setInterval(callback: (...args: any[]) => void, msDelay?: number): number; setInterval<Args extends any[]>(callback: (...args: Args) => void, msDelay?: number, ...args: Args): number; structuredClone<T>(value: T, options?: StructuredSerializeOptions): T; fetch(input: RequestInfo, init?: RequestInit<RequestInitCfProperties>): Promise<Response>; }",
          tsDefine = "interface Console { \"assert\"(condition?: boolean, ...data: any[]): void; clear(): void; count(label?: string): void; countReset(label?: string): void; debug(...data: any[]): void; dir(item?: any, options?: any): void; dirxml(...data: any[]): void; error(...data: any[]): void; group(...data: any[]): void; groupCollapsed(...data: any[]): void; groupEnd(): void; info(...data: any[]): void; log(...data: any[]): void; table(tabularData?: any, properties?: string[]): void; time(label?: string): void; timeEnd(label?: string): void; timeLog(label?: string, ...data: any[]): void; timeStamp(label?: string): void; trace(...data: any[]): void; warn(...data: any[]): void; } const console: Console; type BufferSource = ArrayBufferView | ArrayBuffer; type TypedArray = | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array | BigInt64Array | BigUint64Array; namespace WebAssembly { class CompileError extends Error { constructor(message?: string); } class RuntimeError extends Error { constructor(message?: string); } type ValueType = \"anyfunc\" | \"externref\" | \"f32\" | \"f64\" | \"i32\" | \"i64\" | \"v128\"; interface GlobalDescriptor { value: ValueType; mutable?: boolean; } class Global { constructor(descriptor: GlobalDescriptor, value?: any); value: any; valueOf(): any; } type ImportValue = ExportValue | number; type ModuleImports = Record<string, ImportValue>; type Imports = Record<string, ModuleImports>; type ExportValue = Function | Global | Memory | Table; type Exports = Record<string, ExportValue>; class Instance { constructor(module: Module, imports?: Imports); readonly exports: Exports; } interface MemoryDescriptor { initial: number; maximum?: number; shared?: boolean; } class Memory { constructor(descriptor: MemoryDescriptor); readonly buffer: ArrayBuffer; grow(delta: number): number; } type ImportExportKind = \"function\" | \"global\" | \"memory\" | \"table\"; interface ModuleExportDescriptor { kind: ImportExportKind; name: string; } interface ModuleImportDescriptor { kind: ImportExportKind; module: string; name: string; } abstract class Module { static customSections(module: Module, sectionName: string): ArrayBuffer[]; static exports(module: Module): ModuleExportDescriptor[]; static imports(module: Module): ModuleImportDescriptor[]; } type TableKind = \"anyfunc\" | \"externref\"; interface TableDescriptor { element: TableKind; initial: number; maximum?: number; } class Table { constructor(descriptor: TableDescriptor, value?: any); readonly length: number; get(index: number): any; grow(delta: number, value?: any): number; set(index: number, value?: any): void; } function instantiate(module: Module, imports?: Imports): Promise<Instance>; function validate(bytes: BufferSource): boolean; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "TestController",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TestController",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ExecutionContext",
          members = [
            ( method = (
                name = "waitUntil",
                returnType = (voidt = void),
                args = [
                  ( promise = (value = (voidt = void)) ) ],
                static = false ) ),
            ( method = (
                name = "passThroughOnException",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ExecutionContext",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ExportedHandler",
          members = [
            ( property = (
                name = "fetch",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (
                            value = (
                              structure = (
                                name = "Response",
                                fullyQualifiedName = "workerd::api::Response" ) ) ) ),
                        args = [
                          ( structure = (
                              name = "Request",
                              fullyQualifiedName = "workerd::api::Request" ) ),
                          (unknown = void),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ExecutionContext",
                                  fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                              name = "jsg::Optional" ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "tail",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( array = (
                              element = (
                                structure = (
                                  name = "TraceItem",
                                  fullyQualifiedName = "workerd::api::TraceItem" ) ),
                              name = "kj::Array" ) ),
                          (unknown = void),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ExecutionContext",
                                  fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                              name = "jsg::Optional" ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "trace",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( array = (
                              element = (
                                structure = (
                                  name = "TraceItem",
                                  fullyQualifiedName = "workerd::api::TraceItem" ) ),
                              name = "kj::Array" ) ),
                          (unknown = void),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ExecutionContext",
                                  fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                              name = "jsg::Optional" ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "scheduled",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "ScheduledController",
                              fullyQualifiedName = "workerd::api::ScheduledController" ) ),
                          (unknown = void),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ExecutionContext",
                                  fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                              name = "jsg::Optional" ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "alarm",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "AlarmInvocationInfo",
                              fullyQualifiedName = "workerd::api::AlarmInvocationInfo" ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "test",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "TestController",
                              fullyQualifiedName = "workerd::api::TestController" ) ),
                          (unknown = void),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ExecutionContext",
                                  fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                              name = "jsg::Optional" ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "webSocketMessage",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "WebSocket",
                              fullyQualifiedName = "workerd::api::WebSocket" ) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ) ] ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "webSocketClose",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "WebSocket",
                              fullyQualifiedName = "workerd::api::WebSocket" ) ),
                          (number = (name = "int")),
                          ( string = (name = "kj::String") ),
                          (boolt = void) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "webSocketError",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "WebSocket",
                              fullyQualifiedName = "workerd::api::WebSocket" ) ),
                          (unknown = void) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "self",
                type = (
                  jsgImpl = (type = jsgSelfRef) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ExportedHandler",
          tsRoot = true,
          tsOverride = "<Env = unknown, QueueHandlerMessage = unknown, CfHostMetadata = unknown> { email?: EmailExportedHandler<Env>; fetch?: ExportedHandlerFetchHandler<Env, CfHostMetadata>; tail?: ExportedHandlerTailHandler<Env>; trace?: ExportedHandlerTraceHandler<Env>; scheduled?: ExportedHandlerScheduledHandler<Env>; alarm: never; webSocketMessage: never; webSocketClose: never; webSocketError: never; queue?: ExportedHandlerQueueHandler<Env, QueueHandlerMessage>; test?: ExportedHandlerTestHandler<Env>; }",
          tsDefine = "type ExportedHandlerFetchHandler<Env = unknown, CfHostMetadata = unknown> = (request: Request<CfHostMetadata, IncomingRequestCfProperties<CfHostMetadata>>, env: Env, ctx: ExecutionContext) => Response | Promise<Response>; type ExportedHandlerTailHandler<Env = unknown> = (events: TraceItem[], env: Env, ctx: ExecutionContext) => void | Promise<void>; type ExportedHandlerTraceHandler<Env = unknown> = (traces: TraceItem[], env: Env, ctx: ExecutionContext) => void | Promise<void>; type ExportedHandlerScheduledHandler<Env = unknown> = (controller: ScheduledController, env: Env, ctx: ExecutionContext) => void | Promise<void>; type ExportedHandlerQueueHandler<Env = unknown, Message = unknown> = (batch: MessageBatch<Message>, env: Env, ctx: ExecutionContext) => void | Promise<void>; type ExportedHandlerTestHandler<Env = unknown> = (controller: TestController, env: Env, ctx: ExecutionContext) => void | Promise<void>;",
          disposable = false,
          asyncDisposable = false ),
        ( name = "StructuredCloneOptions",
          members = [
            ( property = (
                name = "transfer",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (unknown = void),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ServiceWorkerGlobalScope::StructuredCloneOptions",
          tsRoot = false,
          tsOverride = "StructuredSerializeOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "PromiseRejectionEvent",
          members = [
            ( property = (
                name = "promise",
                type = (
                  promise = (value = (unknown = void)) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "reason",
                type = (unknown = void),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          extends = (
            structure = (
              name = "Event",
              fullyQualifiedName = "workerd::api::Event" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::PromiseRejectionEvent",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Navigator",
          members = [
            ( method = (
                name = "sendBeacon",
                returnType = (boolt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "ReadableStream",
                                fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                            ( string = (name = "kj::String") ),
                            ( array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ),
                            ( structure = (
                                name = "Blob",
                                fullyQualifiedName = "workerd::api::Blob" ) ),
                            ( structure = (
                                name = "URLSearchParams",
                                fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                            ( structure = (
                                name = "FormData",
                                fullyQualifiedName = "workerd::api::FormData" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( property = (
                name = "userAgent",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "gpu",
                type = (
                  structure = (
                    name = "GPU",
                    fullyQualifiedName = "workerd::api::gpu::GPU" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Navigator",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Performance",
          members = [
            ( property = (
                name = "timeOrigin",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "now",
                returnType = (
                  number = (name = "double") ),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Performance",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AlarmInvocationInfo",
          members = [
            ( property = (
                name = "isRetry",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "retryCount",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::AlarmInvocationInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "durable-objects",
      structures = [
        ( name = "ColoLocalActorNamespace",
          members = [
            ( method = (
                name = "get",
                returnType = (
                  structure = (
                    name = "Fetcher",
                    fullyQualifiedName = "workerd::api::Fetcher" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ColoLocalActorNamespace",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "DurableObject",
          members = [
            ( property = (
                name = "id",
                type = (
                  structure = (
                    name = "DurableObjectId",
                    fullyQualifiedName = "workerd::api::DurableObjectId" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "name",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          extends = (
            structure = (
              name = "Fetcher",
              fullyQualifiedName = "workerd::api::Fetcher" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObject",
          tsRoot = false,
          tsOverride = "type DurableObjectStub<T extends Rpc.DurableObjectBranded | undefined = undefined> = Fetcher<T, \"alarm\" | \"webSocketMessage\" | \"webSocketClose\" | \"webSocketError\"> & { readonly id: DurableObjectId; readonly name?: string; }",
          tsDefine = "interface DurableObject { fetch(request: Request): Response | Promise<Response>; alarm?(): void | Promise<void>; webSocketMessage?(ws: WebSocket, message: string | ArrayBuffer): void | Promise<void>; webSocketClose?(ws: WebSocket, code: number, reason: string, wasClean: boolean): void | Promise<void>; webSocketError?(ws: WebSocket, error: unknown): void | Promise<void>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DurableObjectId",
          members = [
            ( method = (
                name = "toString",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( method = (
                name = "equals",
                returnType = (boolt = void),
                args = [
                  ( structure = (
                      name = "DurableObjectId",
                      fullyQualifiedName = "workerd::api::DurableObjectId" ) ) ],
                static = false ) ),
            ( property = (
                name = "name",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectId",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "DurableObjectNamespace",
          members = [
            ( method = (
                name = "newUniqueId",
                returnType = (
                  structure = (
                    name = "DurableObjectId",
                    fullyQualifiedName = "workerd::api::DurableObjectId" ) ),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "NewUniqueIdOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectNamespace::NewUniqueIdOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "idFromName",
                returnType = (
                  structure = (
                    name = "DurableObjectId",
                    fullyQualifiedName = "workerd::api::DurableObjectId" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "idFromString",
                returnType = (
                  structure = (
                    name = "DurableObjectId",
                    fullyQualifiedName = "workerd::api::DurableObjectId" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  structure = (
                    name = "DurableObject",
                    fullyQualifiedName = "workerd::api::DurableObject" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "DurableObjectId",
                      fullyQualifiedName = "workerd::api::DurableObjectId" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GetDurableObjectOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectNamespace::GetDurableObjectOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "jurisdiction",
                returnType = (
                  structure = (
                    name = "DurableObjectNamespace",
                    fullyQualifiedName = "workerd::api::DurableObjectNamespace" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectNamespace",
          tsRoot = true,
          tsOverride = "<T extends Rpc.DurableObjectBranded | undefined = undefined> { get(id: DurableObjectId, options?: DurableObjectNamespaceGetDurableObjectOptions): DurableObjectStub<T>; jurisdiction(jurisdiction: DurableObjectJurisdiction): DurableObjectNamespace<T>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "NewUniqueIdOptions",
          members = [
            ( property = (
                name = "jurisdiction",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectNamespace::NewUniqueIdOptions",
          tsRoot = false,
          tsOverride = "{ jurisdiction?: DurableObjectJurisdiction; }",
          tsDefine = "type DurableObjectJurisdiction = \"eu\" | \"fedramp\"",
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetDurableObjectOptions",
          members = [
            ( property = (
                name = "locationHint",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectNamespace::GetDurableObjectOptions",
          tsRoot = false,
          tsOverride = "{ locationHint?: DurableObjectLocationHint; }",
          tsDefine = "type DurableObjectLocationHint = \"wnam\" | \"enam\" | \"sam\" | \"weur\" | \"eeur\" | \"apac\" | \"oc\" | \"afr\" | \"me\"",
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "durable-objects-state",
      structures = [
        ( name = "ActorState",
          members = [
            ( property = (
                name = "id",
                type = (
                  oneOf = (
                    variants = [
                      ( structure = (
                          name = "DurableObjectId",
                          fullyQualifiedName = "workerd::api::DurableObjectId" ) ),
                      ( string = (name = "kj::StringPtr") ) ] ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "transient",
                type = (
                  maybe = (value = (unknown = void), name = "jsg::Optional") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "persistent",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "DurableObjectStorage",
                        fullyQualifiedName = "workerd::api::DurableObjectStorage" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ActorState",
          tsRoot = false,
          tsOverride = "type ActorState = never",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DurableObjectState",
          members = [
            ( method = (
                name = "waitUntil",
                returnType = (voidt = void),
                args = [
                  ( promise = (value = (voidt = void)) ) ],
                static = false ) ),
            ( property = (
                name = "id",
                type = (
                  oneOf = (
                    variants = [
                      ( structure = (
                          name = "DurableObjectId",
                          fullyQualifiedName = "workerd::api::DurableObjectId" ) ),
                      ( string = (name = "kj::StringPtr") ) ] ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "storage",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "DurableObjectStorage",
                        fullyQualifiedName = "workerd::api::DurableObjectStorage" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "blockConcurrencyWhile",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (
                        promise = (value = (unknown = void)) ),
                      args = [] ) ) ],
                static = false ) ),
            ( method = (
                name = "acceptWebSocket",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "WebSocket",
                      fullyQualifiedName = "workerd::api::WebSocket" ) ),
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            string = (name = "kj::String") ),
                          name = "kj::Array" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "getWebSockets",
                returnType = (
                  array = (
                    element = (
                      structure = (
                        name = "WebSocket",
                        fullyQualifiedName = "workerd::api::WebSocket" ) ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "setWebSocketAutoResponse",
                returnType = (voidt = void),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "WebSocketRequestResponsePair",
                          fullyQualifiedName = "workerd::api::WebSocketRequestResponsePair" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "getWebSocketAutoResponse",
                returnType = (
                  maybe = (
                    value = (
                      structure = (
                        name = "WebSocketRequestResponsePair",
                        fullyQualifiedName = "workerd::api::WebSocketRequestResponsePair" ) ),
                    name = "kj::Maybe" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "getWebSocketAutoResponseTimestamp",
                returnType = (
                  maybe = (
                    value = (
                      builtin = (type = kjDate) ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( structure = (
                      name = "WebSocket",
                      fullyQualifiedName = "workerd::api::WebSocket" ) ) ],
                static = false ) ),
            ( method = (
                name = "setHibernatableWebSocketEventTimeout",
                returnType = (voidt = void),
                args = [
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "getHibernatableWebSocketEventTimeout",
                returnType = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "kj::Maybe" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "getTags",
                returnType = (
                  array = (
                    element = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "WebSocket",
                      fullyQualifiedName = "workerd::api::WebSocket" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectState",
          tsRoot = true,
          tsOverride = "{ readonly id: DurableObjectId; readonly storage: DurableObjectStorage; blockConcurrencyWhile<T>(callback: () => Promise<T>): Promise<T>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DurableObjectTransaction",
          members = [
            ( method = (
                name = "get",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( array = (
                            element = (
                              string = (name = "kj::String") ),
                            name = "kj::Array" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GetOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::GetOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "list",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ListOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::ListOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "put",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( dict = (
                            key = (
                              string = (name = "kj::String") ),
                            value = (unknown = void) ) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::PutOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  oneOf = (
                    variants = [
                      ( promise = (value = (boolt = void)) ),
                      ( promise = (
                          value = (number = (name = "int")) ) ) ] ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( array = (
                            element = (
                              string = (name = "kj::String") ),
                            name = "kj::Array" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::PutOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "deleteAll",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "rollback",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "getAlarm",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          number = (name = "double") ),
                        name = "kj::Maybe" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GetAlarmOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::GetAlarmOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "setAlarm",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = kjDate) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SetAlarmOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::SetAlarmOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "deleteAlarm",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SetAlarmOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::SetAlarmOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectTransaction",
          tsRoot = false,
          tsOverride = "{ get<T = unknown>(key: string, options?: DurableObjectGetOptions): Promise<T | undefined>; get<T = unknown>(keys: string[], options?: DurableObjectGetOptions): Promise<Map<string, T>>; list<T = unknown>(options?: DurableObjectListOptions): Promise<Map<string, T>>; put<T>(key: string, value: T, options?: DurableObjectPutOptions): Promise<void>; put<T>(entries: Record<string, T>, options?: DurableObjectPutOptions): Promise<void>; delete(key: string, options?: DurableObjectPutOptions): Promise<boolean>; delete(keys: string[], options?: DurableObjectPutOptions): Promise<number>; deleteAll: never; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DurableObjectStorage",
          members = [
            ( method = (
                name = "get",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( array = (
                            element = (
                              string = (name = "kj::String") ),
                            name = "kj::Array" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GetOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::GetOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "list",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ListOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::ListOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "put",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( dict = (
                            key = (
                              string = (name = "kj::String") ),
                            value = (unknown = void) ) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::PutOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  oneOf = (
                    variants = [
                      ( promise = (value = (boolt = void)) ),
                      ( promise = (
                          value = (number = (name = "int")) ) ) ] ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( array = (
                            element = (
                              string = (name = "kj::String") ),
                            name = "kj::Array" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::PutOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "deleteAll",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::PutOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "transaction",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (
                        promise = (value = (unknown = void)) ),
                      args = [
                        ( structure = (
                            name = "DurableObjectTransaction",
                            fullyQualifiedName = "workerd::api::DurableObjectTransaction" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "TransactionOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorage::TransactionOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "getAlarm",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          number = (name = "double") ),
                        name = "kj::Maybe" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GetAlarmOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::GetAlarmOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "setAlarm",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = kjDate) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SetAlarmOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::SetAlarmOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "deleteAlarm",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SetAlarmOptions",
                          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::SetAlarmOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "sync",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectStorage",
          tsRoot = false,
          tsOverride = "{ get<T = unknown>(key: string, options?: DurableObjectGetOptions): Promise<T | undefined>; get<T = unknown>(keys: string[], options?: DurableObjectGetOptions): Promise<Map<string, T>>; list<T = unknown>(options?: DurableObjectListOptions): Promise<Map<string, T>>; put<T>(key: string, value: T, options?: DurableObjectPutOptions): Promise<void>; put<T>(entries: Record<string, T>, options?: DurableObjectPutOptions): Promise<void>; delete(key: string, options?: DurableObjectPutOptions): Promise<boolean>; delete(keys: string[], options?: DurableObjectPutOptions): Promise<number>; transaction<T>(closure: (txn: DurableObjectTransaction) => Promise<T>): Promise<T>; transactionSync<T>(closure: () => T): T; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "TransactionOptions",
          members = [
            ( property = (
                name = "asOfTime",
                type = (
                  maybe = (
                    value = (
                      builtin = (type = kjDate) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lowPriority",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectStorage::TransactionOptions",
          tsRoot = false,
          tsOverride = "type TransactionOptions = never",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ListOptions",
          members = [
            ( property = (
                name = "start",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "startAfter",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "end",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "prefix",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "reverse",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "limit",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "allowConcurrency",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noCache",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::ListOptions",
          tsRoot = false,
          tsOverride = "DurableObjectListOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetOptions",
          members = [
            ( property = (
                name = "allowConcurrency",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noCache",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::GetOptions",
          tsRoot = false,
          tsOverride = "DurableObjectGetOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetAlarmOptions",
          members = [
            ( property = (
                name = "allowConcurrency",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::GetAlarmOptions",
          tsRoot = false,
          tsOverride = "DurableObjectGetAlarmOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "PutOptions",
          members = [
            ( property = (
                name = "allowConcurrency",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "allowUnconfirmed",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noCache",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::PutOptions",
          tsRoot = false,
          tsOverride = "DurableObjectPutOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "SetAlarmOptions",
          members = [
            ( property = (
                name = "allowConcurrency",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "allowUnconfirmed",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectStorageOperations::SetAlarmOptions",
          tsRoot = false,
          tsOverride = "DurableObjectSetAlarmOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "WebSocketRequestResponsePair",
          members = [
            ( property = (
                name = "request",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "response",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( constructor = (
                args = [
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WebSocketRequestResponsePair",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "analytics-engine",
      structures = [
        ( name = "AnalyticsEngine",
          members = [
            ( method = (
                name = "writeDataPoint",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "AnalyticsEngineEvent",
                          fullyQualifiedName = "workerd::api::AnalyticsEngine::AnalyticsEngineEvent" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::AnalyticsEngine",
          tsRoot = true,
          tsOverride = "AnalyticsEngineDataset",
          disposable = false,
          asyncDisposable = false ),
        ( name = "AnalyticsEngineEvent",
          members = [
            ( property = (
                name = "indexes",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          maybe = (
                            value = (
                              oneOf = (
                                variants = [
                                  ( array = (
                                      element = (
                                        number = (name = "unsigned char") ),
                                      name = "kj::Array" ) ),
                                  ( string = (name = "kj::String") ) ] ) ),
                            name = "kj::Maybe" ) ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "doubles",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "double") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "blobs",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          maybe = (
                            value = (
                              oneOf = (
                                variants = [
                                  ( array = (
                                      element = (
                                        number = (name = "unsigned char") ),
                                      name = "kj::Array" ) ),
                                  ( string = (name = "kj::String") ) ] ) ),
                            name = "kj::Maybe" ) ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::AnalyticsEngine::AnalyticsEngineEvent",
          tsRoot = false,
          tsOverride = "AnalyticsEngineDataPoint",
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "basics",
      structures = [
        ( name = "Event",
          members = [
            ( property = (
                name = "type",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "eventPhase",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "composed",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "bubbles",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cancelable",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "defaultPrevented",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "returnValue",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "currentTarget",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "EventTarget",
                        fullyQualifiedName = "workerd::api::EventTarget" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "srcElement",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "EventTarget",
                        fullyQualifiedName = "workerd::api::EventTarget" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "timeStamp",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "isTrusted",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cancelBubble",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "stopImmediatePropagation",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "preventDefault",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "stopPropagation",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "composedPath",
                returnType = (
                  array = (
                    element = (
                      structure = (
                        name = "EventTarget",
                        fullyQualifiedName = "workerd::api::EventTarget" ) ),
                    name = "kj::Array" ) ),
                args = [],
                static = false ) ),
            ( constant = (name = "NONE", value = 0) ),
            ( constant = (name = "CAPTURING_PHASE", value = 1) ),
            ( constant = (name = "AT_TARGET", value = 2) ),
            ( constant = (name = "BUBBLING_PHASE", value = 3) ),
            ( constructor = (
                args = [
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "Init",
                          fullyQualifiedName = "workerd::api::Event::Init" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Event",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Init",
          members = [
            ( property = (
                name = "bubbles",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cancelable",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "composed",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Event::Init",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "EventTarget",
          members = [
            ( method = (
                name = "addEventListener",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( oneOf = (
                      variants = [
                        ( function = (
                            returnType = (
                              maybe = (value = (unknown = void), name = "jsg::Optional") ),
                            args = [
                              ( structure = (
                                  name = "Event",
                                  fullyQualifiedName = "workerd::api::Event" ) ) ] ) ),
                        ( structure = (
                            name = "HandlerObject",
                            fullyQualifiedName = "workerd::api::EventTarget::HandlerObject" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "AddEventListenerOptions",
                                fullyQualifiedName = "workerd::api::EventTarget::AddEventListenerOptions" ) ),
                            (boolt = void) ] ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "removeEventListener",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  (object = void),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "EventListenerOptions",
                                fullyQualifiedName = "workerd::api::EventTarget::EventListenerOptions" ) ),
                            (boolt = void) ] ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "dispatchEvent",
                returnType = (boolt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "Event",
                      fullyQualifiedName = "workerd::api::Event" ) ) ],
                static = false ) ),
            ( constructor = (args = []) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::EventTarget",
          tsRoot = false,
          tsOverride = "<EventMap extends Record<string, Event> = Record<string, Event>> { addEventListener<Type extends keyof EventMap>(type: Type, handler: EventListenerOrEventListenerObject<EventMap[Type]>, options?: EventTargetAddEventListenerOptions | boolean): void; removeEventListener<Type extends keyof EventMap>(type: Type, handler: EventListenerOrEventListenerObject<EventMap[Type]>, options?: EventTargetEventListenerOptions | boolean): void; dispatchEvent(event: EventMap[keyof EventMap]): boolean; }",
          tsDefine = "type EventListener<EventType extends Event = Event> = (event: EventType) => void; interface EventListenerObject<EventType extends Event = Event> { handleEvent(event: EventType): void; } type EventListenerOrEventListenerObject<EventType extends Event = Event> = EventListener<EventType> | EventListenerObject<EventType>;",
          disposable = false,
          asyncDisposable = false ),
        ( name = "EventListenerOptions",
          members = [
            ( property = (
                name = "capture",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::EventTarget::EventListenerOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AddEventListenerOptions",
          members = [
            ( property = (
                name = "capture",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "passive",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "once",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "signal",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "AbortSignal",
                        fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::EventTarget::AddEventListenerOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "HandlerObject",
          members = [
            ( property = (
                name = "handleEvent",
                type = (
                  function = (
                    returnType = (
                      maybe = (value = (unknown = void), name = "jsg::Optional") ),
                    args = [
                      ( structure = (
                          name = "Event",
                          fullyQualifiedName = "workerd::api::Event" ) ) ] ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::EventTarget::HandlerObject",
          tsRoot = false,
          tsOverride = "{ handleEvent: (event: Event) => any | undefined; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "AbortController",
          members = [
            ( property = (
                name = "signal",
                type = (
                  structure = (
                    name = "AbortSignal",
                    fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "abort",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( constructor = (args = []) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::AbortController",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AbortSignal",
          members = [
            ( method = (
                name = "abort",
                returnType = (
                  structure = (
                    name = "AbortSignal",
                    fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = true ) ),
            ( method = (
                name = "timeout",
                returnType = (
                  structure = (
                    name = "AbortSignal",
                    fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( number = (name = "double") ) ],
                static = true ) ),
            ( method = (
                name = "any",
                returnType = (
                  structure = (
                    name = "AbortSignal",
                    fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        structure = (
                          name = "AbortSignal",
                          fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                      name = "kj::Array" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = true ) ),
            ( property = (
                name = "aborted",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "reason",
                type = (unknown = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "onabort",
                type = (
                  maybe = (value = (unknown = void), name = "kj::Maybe") ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "throwIfAborted",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            structure = (
              name = "EventTarget",
              fullyQualifiedName = "workerd::api::EventTarget" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::AbortSignal",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Scheduler",
          members = [
            ( method = (
                name = "wait",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( number = (name = "double") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "WaitOptions",
                          fullyQualifiedName = "workerd::api::Scheduler::WaitOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Scheduler",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "WaitOptions",
          members = [
            ( property = (
                name = "signal",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "AbortSignal",
                        fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Scheduler::WaitOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ExtendableEvent",
          members = [
            ( method = (
                name = "waitUntil",
                returnType = (voidt = void),
                args = [
                  ( promise = (value = (voidt = void)) ) ],
                static = false ) ),
            ( property = (
                name = "actorState",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "ActorState",
                        fullyQualifiedName = "workerd::api::ActorState" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          extends = (
            structure = (
              name = "Event",
              fullyQualifiedName = "workerd::api::Event" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ExtendableEvent",
          tsRoot = false,
          tsOverride = "{ actorState: never }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "CustomEvent",
          members = [
            ( property = (
                name = "detail",
                type = (
                  maybe = (value = (unknown = void), name = "jsg::Optional") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "CustomEventInit",
                          fullyQualifiedName = "workerd::api::CustomEvent::CustomEventInit" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "Event",
              fullyQualifiedName = "workerd::api::Event" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CustomEvent",
          tsRoot = false,
          tsOverride = "<T = any> { get detail(): T; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "CustomEventInit",
          members = [
            ( property = (
                name = "bubbles",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cancelable",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "composed",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "detail",
                type = (
                  maybe = (value = (unknown = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CustomEvent::CustomEventInit",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "blob",
      structures = [
        ( name = "Blob",
          members = [
            ( property = (
                name = "size",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "type",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "slice",
                returnType = (
                  structure = (
                    name = "Blob",
                    fullyQualifiedName = "workerd::api::Blob" ) ),
                args = [
                  ( maybe = (
                      value = (number = (name = "int")),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (number = (name = "int")),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "arrayBuffer",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "text",
                returnType = (
                  promise = (
                    value = (
                      string = (name = "kj::String") ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "stream",
                returnType = (
                  structure = (
                    name = "ReadableStream",
                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                args = [],
                static = false ) ),
            ( constructor = (
                args = [
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            oneOf = (
                              variants = [
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "Blob",
                                    fullyQualifiedName = "workerd::api::Blob" ) ) ] ) ),
                          name = "kj::Array" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "Options",
                          fullyQualifiedName = "workerd::api::Blob::Options" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Blob",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Options",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "endings",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Blob::Options",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "File",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lastModified",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            oneOf = (
                              variants = [
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "Blob",
                                    fullyQualifiedName = "workerd::api::Blob" ) ) ] ) ),
                          name = "kj::Array" ) ),
                      name = "jsg::Optional" ) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "Options",
                          fullyQualifiedName = "workerd::api::File::Options" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "Blob",
              fullyQualifiedName = "workerd::api::Blob" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::File",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Options",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lastModified",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "endings",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::File::Options",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "cache",
      structures = [
        ( name = "CacheStorage",
          members = [
            ( method = (
                name = "open",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "Cache",
                        fullyQualifiedName = "workerd::api::Cache" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "match",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "CacheQueryOptions",
                          fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "has",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [],
                static = false ) ),
            ( property = (
                name = "default",
                type = (
                  structure = (
                    name = "Cache",
                    fullyQualifiedName = "workerd::api::Cache" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CacheStorage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Cache",
          members = [
            ( method = (
                name = "add",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "addAll",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( array = (
                      element = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "Request",
                                fullyQualifiedName = "workerd::api::Request" ) ),
                            ( string = (name = "kj::String") ) ] ) ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  promise = (value = (boolt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "CacheQueryOptions",
                          fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "match",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ),
                        name = "jsg::Optional" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "CacheQueryOptions",
                          fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "put",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( structure = (
                      name = "Response",
                      fullyQualifiedName = "workerd::api::Response" ) ),
                  ( jsgImpl = (type = configuration) ) ],
                static = false ) ),
            ( method = (
                name = "matchAll",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "Request",
                                fullyQualifiedName = "workerd::api::Request" ) ),
                            ( string = (name = "kj::String") ) ] ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "CacheQueryOptions",
                          fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "Request",
                                fullyQualifiedName = "workerd::api::Request" ) ),
                            ( string = (name = "kj::String") ) ] ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "CacheQueryOptions",
                          fullyQualifiedName = "workerd::api::CacheQueryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Cache",
          tsRoot = false,
          tsOverride = "{ delete(request: RequestInfo, options?: CacheQueryOptions): Promise<boolean>; match(request: RequestInfo, options?: CacheQueryOptions): Promise<Response | undefined>; put(request: RequestInfo, response: Response): Promise<void>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "CacheQueryOptions",
          members = [
            ( property = (
                name = "ignoreMethod",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ignoreSearch",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ignoreVary",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cacheName",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CacheQueryOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "crypto",
      structures = [
        ( name = "Crypto",
          members = [
            ( property = (
                name = "subtle",
                type = (
                  structure = (
                    name = "SubtleCrypto",
                    fullyQualifiedName = "workerd::api::SubtleCrypto" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "getRandomValues",
                returnType = (
                  builtin = (type = jsgBufferSource) ),
                args = [
                  ( builtin = (type = jsgBufferSource) ) ],
                static = false ) ),
            ( method = (
                name = "randomUUID",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( nested = (
                structure = (
                  name = "DigestStream",
                  members = [
                    ( property = (
                        name = "digest",
                        type = (
                          promise = (
                            value = (
                              array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ) ) ),
                        readonly = true,
                        lazy = false,
                        prototype = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( string = (name = "kj::String") ),
                                ( structure = (
                                    name = "HashAlgorithm",
                                    fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ) ] ) ) ],
                  extends = (
                    structure = (
                      name = "WritableStream",
                      fullyQualifiedName = "workerd::api::WritableStream" ) ),
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::DigestStream",
                  tsRoot = false,
                  tsOverride = "extends WritableStream<ArrayBuffer | ArrayBufferView>",
                  disposable = false,
                  asyncDisposable = false ),
                name = "DigestStream" ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Crypto",
          tsRoot = false,
          tsOverride = "{ getRandomValues< T extends | Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | BigInt64Array | BigUint64Array >(buffer: T): T; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "SubtleCrypto",
          members = [
            ( method = (
                name = "encrypt",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "EncryptAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "decrypt",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "EncryptAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "sign",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "SignAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::SignAlgorithm" ) ) ] ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "verify",
                returnType = (
                  promise = (value = (boolt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "SignAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::SignAlgorithm" ) ) ] ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "digest",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "HashAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "generateKey",
                returnType = (
                  promise = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "CryptoKey",
                              fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                          ( structure = (
                              name = "CryptoKeyPair",
                              fullyQualifiedName = "workerd::api::CryptoKeyPair" ) ) ] ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "GenerateKeyAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::GenerateKeyAlgorithm" ) ) ] ) ),
                  (boolt = void),
                  ( array = (
                      element = (
                        string = (name = "kj::String") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "deriveKey",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "CryptoKey",
                        fullyQualifiedName = "workerd::api::CryptoKey" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "DeriveKeyAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::DeriveKeyAlgorithm" ) ) ] ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ImportKeyAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::ImportKeyAlgorithm" ) ) ] ) ),
                  (boolt = void),
                  ( array = (
                      element = (
                        string = (name = "kj::String") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "deriveBits",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "DeriveKeyAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::DeriveKeyAlgorithm" ) ) ] ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( maybe = (
                      value = (number = (name = "int")),
                      name = "kj::Maybe" ) ) ],
                static = false ) ),
            ( method = (
                name = "importKey",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "CryptoKey",
                        fullyQualifiedName = "workerd::api::CryptoKey" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        ( structure = (
                            name = "JsonWebKey",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey" ) ) ] ) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ImportKeyAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::ImportKeyAlgorithm" ) ) ] ) ),
                  (boolt = void),
                  ( array = (
                      element = (
                        string = (name = "kj::String") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "exportKey",
                returnType = (
                  promise = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( structure = (
                              name = "JsonWebKey",
                              fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey" ) ) ] ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ) ],
                static = false ) ),
            ( method = (
                name = "wrapKey",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "EncryptAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "unwrapKey",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "CryptoKey",
                        fullyQualifiedName = "workerd::api::CryptoKey" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "EncryptAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm" ) ) ] ) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ImportKeyAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::ImportKeyAlgorithm" ) ) ] ) ),
                  (boolt = void),
                  ( array = (
                      element = (
                        string = (name = "kj::String") ),
                      name = "kj::Array" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "timingSafeEqual",
                returnType = (boolt = void),
                args = [
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "CryptoKey",
          members = [
            ( property = (
                name = "type",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "extractable",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "algorithm",
                type = (
                  oneOf = (
                    variants = [
                      ( structure = (
                          name = "KeyAlgorithm",
                          fullyQualifiedName = "workerd::api::CryptoKey::KeyAlgorithm" ) ),
                      ( structure = (
                          name = "AesKeyAlgorithm",
                          fullyQualifiedName = "workerd::api::CryptoKey::AesKeyAlgorithm" ) ),
                      ( structure = (
                          name = "HmacKeyAlgorithm",
                          fullyQualifiedName = "workerd::api::CryptoKey::HmacKeyAlgorithm" ) ),
                      ( structure = (
                          name = "RsaKeyAlgorithm",
                          fullyQualifiedName = "workerd::api::CryptoKey::RsaKeyAlgorithm" ) ),
                      ( structure = (
                          name = "EllipticKeyAlgorithm",
                          fullyQualifiedName = "workerd::api::CryptoKey::EllipticKeyAlgorithm" ) ),
                      ( structure = (
                          name = "ArbitraryKeyAlgorithm",
                          fullyQualifiedName = "workerd::api::CryptoKey::ArbitraryKeyAlgorithm" ) ) ] ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "usages",
                type = (
                  array = (
                    element = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Array" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "CryptoKeyPair",
          members = [
            ( property = (
                name = "publicKey",
                type = (
                  structure = (
                    name = "CryptoKey",
                    fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "privateKey",
                type = (
                  structure = (
                    name = "CryptoKey",
                    fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKeyPair",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "JsonWebKey",
          members = [
            ( property = (
                name = "kty",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "use",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "key_ops",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::String") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "alg",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ext",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "crv",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "x",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "y",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "d",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "n",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "e",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "p",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "q",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "dp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "dq",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "qi",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "oth",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          structure = (
                            name = "RsaOtherPrimesInfo",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey::RsaOtherPrimesInfo" ) ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "k",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey",
          tsRoot = false,
          tsOverride = "JsonWebKey",
          disposable = false,
          asyncDisposable = false ),
        ( name = "RsaOtherPrimesInfo",
          members = [
            ( property = (
                name = "r",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "d",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "t",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey::RsaOtherPrimesInfo",
          tsRoot = false,
          tsOverride = "RsaOtherPrimesInfo",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DeriveKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "salt",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "iterations",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "HashAlgorithm",
                              fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "$public",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "CryptoKey",
                        fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "info",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::DeriveKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "EncryptAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "iv",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "additionalData",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "tagLength",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "counter",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "length",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::EncryptAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GenerateKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "HashAlgorithm",
                              fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "modulusLength",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "publicExponent",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "length",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "namedCurve",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::GenerateKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "HashAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ImportKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "HashAlgorithm",
                              fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "length",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "namedCurve",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "compressed",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::ImportKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "SignAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "HashAlgorithm",
                              fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "dataLength",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "saltLength",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SubtleCrypto::SignAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "KeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey::KeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AesKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "length",
                type = (
                  number = (name = "unsigned short") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey::AesKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "HmacKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  structure = (
                    name = "KeyAlgorithm",
                    fullyQualifiedName = "workerd::api::CryptoKey::KeyAlgorithm" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "length",
                type = (
                  number = (name = "unsigned short") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey::HmacKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "RsaKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "modulusLength",
                type = (
                  number = (name = "unsigned short") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "publicExponent",
                type = (
                  oneOf = (
                    variants = [
                      ( array = (
                          element = (
                            number = (name = "unsigned char") ),
                          name = "kj::Array" ) ),
                      ( builtin = (type = jsgBufferSource) ) ] ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "KeyAlgorithm",
                        fullyQualifiedName = "workerd::api::CryptoKey::KeyAlgorithm" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey::RsaKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "EllipticKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "namedCurve",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey::EllipticKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ArbitraryKeyAlgorithm",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "KeyAlgorithm",
                        fullyQualifiedName = "workerd::api::CryptoKey::KeyAlgorithm" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "namedCurve",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "length",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned short") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey::ArbitraryKeyAlgorithm",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AsymmetricKeyDetails",
          members = [
            ( property = (
                name = "modulusLength",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "publicExponent",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hashAlgorithm",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mgf1HashAlgorithm",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "saltLength",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "divisorLength",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "namedCurve",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CryptoKey::AsymmetricKeyDetails",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "DigestStream",
          members = [
            ( property = (
                name = "digest",
                type = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "HashAlgorithm",
                            fullyQualifiedName = "workerd::api::SubtleCrypto::HashAlgorithm" ) ) ] ) ) ] ) ) ],
          extends = (
            structure = (
              name = "WritableStream",
              fullyQualifiedName = "workerd::api::WritableStream" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DigestStream",
          tsRoot = false,
          tsOverride = "extends WritableStream<ArrayBuffer | ArrayBufferView>",
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "encoding",
      structures = [
        ( name = "TextDecoder",
          members = [
            ( method = (
                name = "decode",
                returnType = (
                  string = (name = "jsg::JsString") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            number = (name = "unsigned char") ),
                          name = "kj::Array" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "DecodeOptions",
                          fullyQualifiedName = "workerd::api::TextDecoder::DecodeOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( property = (
                name = "encoding",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "fatal",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ignoreBOM",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ConstructorOptions",
                          fullyQualifiedName = "workerd::api::TextDecoder::ConstructorOptions" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextDecoder",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TextEncoder",
          members = [
            ( method = (
                name = "encode",
                returnType = (
                  builtin = (type = jsgBufferSource) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        string = (name = "jsg::JsString") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "encodeInto",
                returnType = (
                  structure = (
                    name = "EncodeIntoResult",
                    fullyQualifiedName = "workerd::api::TextEncoder::EncodeIntoResult" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "jsg::JsString") ),
                  ( builtin = (type = jsgBufferSource) ) ],
                static = false ) ),
            ( property = (
                name = "encoding",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (args = []) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextEncoder",
          tsRoot = false,
          tsOverride = "{ encode(input?: string): Uint8Array; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ConstructorOptions",
          members = [
            ( property = (
                name = "fatal",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ignoreBOM",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextDecoder::ConstructorOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "DecodeOptions",
          members = [
            ( property = (
                name = "stream",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextDecoder::DecodeOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "EncodeIntoResult",
          members = [
            ( property = (
                name = "read",
                type = (number = (name = "int")),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "written",
                type = (number = (name = "int")),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextEncoder::EncodeIntoResult",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "form-data",
      structures = [
        ( name = "FormData",
          members = [
            ( method = (
                name = "append",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "File",
                            fullyQualifiedName = "workerd::api::File" ) ),
                        ( structure = (
                            name = "Blob",
                            fullyQualifiedName = "workerd::api::Blob" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "File",
                              fullyQualifiedName = "workerd::api::File" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "getAll",
                returnType = (
                  array = (
                    element = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "File",
                              fullyQualifiedName = "workerd::api::File" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "kj::Array" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "has",
                returnType = (boolt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "set",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "File",
                            fullyQualifiedName = "workerd::api::File" ) ),
                        ( structure = (
                            name = "Blob",
                            fullyQualifiedName = "workerd::api::Blob" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "entries",
                returnType = (
                  structure = (
                    name = "EntryIterator",
                    fullyQualifiedName = "workerd::api::FormData::EntryIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  structure = (
                    name = "KeyIterator",
                    fullyQualifiedName = "workerd::api::FormData::KeyIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "values",
                returnType = (
                  structure = (
                    name = "ValueIterator",
                    fullyQualifiedName = "workerd::api::FormData::ValueIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "forEach",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        ( oneOf = (
                            variants = [
                              ( structure = (
                                  name = "File",
                                  fullyQualifiedName = "workerd::api::File" ) ),
                              ( string = (name = "kj::String") ) ] ) ),
                        ( string = (name = "kj::StringPtr") ),
                        ( structure = (
                            name = "FormData",
                            fullyQualifiedName = "workerd::api::FormData" ) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( constructor = (args = []) ) ],
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::FormData",
          iterator = (
            name = "entries",
            returnType = (
              structure = (
                name = "EntryIterator",
                fullyQualifiedName = "workerd::api::FormData::EntryIterator" ) ),
            args = [
              ( jsgImpl = (type = jsgLock) ) ],
            static = false ),
          tsRoot = false,
          tsOverride = "{ get(name: string): string | null; getAll(name: string): string[]; append(name: string, value: string): void; append(name: string, value: Blob, filename?: string): void; set(name: string, value: string): void; set(name: string, value: Blob, filename?: string): void; entries(): IterableIterator<[key: string, value: string]>; [Symbol.iterator](): IterableIterator<[key: string, value: string]>; forEach<This = unknown>(callback: (this: This, value: string, key: string, parent: FormData) => void, thisArg?: This): void; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "EntryIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::FormData::EntryIterator, kj::Array<kj::OneOf<workerd::jsg::Ref<workerd::api::File>, kj::String>>, workerd::api::FormData::IteratorState>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::FormData::EntryIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          oneOf = (
                            variants = [
                              ( structure = (
                                  name = "File",
                                  fullyQualifiedName = "workerd::api::File" ) ),
                              ( string = (name = "kj::String") ) ] ) ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::FormData::EntryIterator, kj::Array<kj::OneOf<workerd::jsg::Ref<workerd::api::File>, kj::String>>, workerd::api::FormData::IteratorState>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "KeyIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::FormData::KeyIterator, kj::String, workerd::api::FormData::IteratorState>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::FormData::KeyIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::FormData::KeyIterator, kj::String, workerd::api::FormData::IteratorState>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ValueIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::FormData::ValueIterator, kj::OneOf<workerd::jsg::Ref<workerd::api::File>, kj::String>, workerd::api::FormData::IteratorState>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::FormData::ValueIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "File",
                              fullyQualifiedName = "workerd::api::File" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::FormData::ValueIterator, kj::OneOf<workerd::jsg::Ref<workerd::api::File>, kj::String>, workerd::api::FormData::IteratorState>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "html-rewriter",
      structures = [
        ( name = "ContentOptions",
          members = [
            ( property = (
                name = "html",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ContentOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "HTMLRewriter",
          members = [
            ( method = (
                name = "on",
                returnType = (
                  structure = (
                    name = "HTMLRewriter",
                    fullyQualifiedName = "workerd::api::HTMLRewriter" ) ),
                args = [
                  ( string = (name = "kj::String") ),
                  ( structure = (
                      name = "ElementContentHandlers",
                      fullyQualifiedName = "workerd::api::HTMLRewriter::ElementContentHandlers" ) ) ],
                static = false ) ),
            ( method = (
                name = "onDocument",
                returnType = (
                  structure = (
                    name = "HTMLRewriter",
                    fullyQualifiedName = "workerd::api::HTMLRewriter" ) ),
                args = [
                  ( structure = (
                      name = "DocumentContentHandlers",
                      fullyQualifiedName = "workerd::api::HTMLRewriter::DocumentContentHandlers" ) ) ],
                static = false ) ),
            ( method = (
                name = "transform",
                returnType = (
                  structure = (
                    name = "Response",
                    fullyQualifiedName = "workerd::api::Response" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "Response",
                      fullyQualifiedName = "workerd::api::Response" ) ) ],
                static = false ) ),
            ( constructor = (args = []) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::HTMLRewriter",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ElementContentHandlers",
          members = [
            ( property = (
                name = "element",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(object = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "comments",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(object = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "text",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(object = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::HTMLRewriter::ElementContentHandlers",
          tsRoot = false,
          tsOverride = "{ element?(element: Element): void | Promise<void>; comments?(comment: Comment): void | Promise<void>; text?(element: Text): void | Promise<void>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DocumentContentHandlers",
          members = [
            ( property = (
                name = "doctype",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(object = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "comments",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(object = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "text",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(object = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "end",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(object = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::HTMLRewriter::DocumentContentHandlers",
          tsRoot = false,
          tsOverride = "{ doctype?(doctype: Doctype): void | Promise<void>; comments?(comment: Comment): void | Promise<void>; text?(text: Text): void | Promise<void>; end?(end: DocumentEnd): void | Promise<void>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Doctype",
          members = [
            ( property = (
                name = "name",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "publicId",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "systemId",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Doctype",
          tsRoot = true,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Element",
          members = [
            ( property = (
                name = "tagName",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "attributes",
                type = (
                  structure = (
                    name = "AttributesIterator",
                    fullyQualifiedName = "workerd::api::Element::AttributesIterator" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "removed",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "namespaceURI",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "getAttribute",
                returnType = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "hasAttribute",
                returnType = (boolt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "setAttribute",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "removeAttribute",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "before",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "after",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "prepend",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "append",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "replace",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "remove",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "removeAndKeepContent",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "setInnerContent",
                returnType = (
                  structure = (
                    name = "Element",
                    fullyQualifiedName = "workerd::api::Element" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "onEndTag",
                returnType = (voidt = void),
                args = [
                  ( function = (
                      returnType = (
                        promise = (value = (voidt = void)) ),
                      args = [(object = void)] ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Element",
          tsRoot = true,
          tsOverride = "{ before(content: string, options?: ContentOptions): Element; after(content: string, options?: ContentOptions): Element; prepend(content: string, options?: ContentOptions): Element; append(content: string, options?: ContentOptions): Element; replace(content: string, options?: ContentOptions): Element; setInnerContent(content: string, options?: ContentOptions): Element; onEndTag(handler: (tag: EndTag) => void | Promise<void>): void; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "EndTag",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "before",
                returnType = (
                  structure = (
                    name = "EndTag",
                    fullyQualifiedName = "workerd::api::EndTag" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "after",
                returnType = (
                  structure = (
                    name = "EndTag",
                    fullyQualifiedName = "workerd::api::EndTag" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "remove",
                returnType = (
                  structure = (
                    name = "EndTag",
                    fullyQualifiedName = "workerd::api::EndTag" ) ),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::EndTag",
          tsRoot = true,
          tsOverride = "{ before(content: string, options?: ContentOptions): EndTag; after(content: string, options?: ContentOptions): EndTag; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Comment",
          members = [
            ( property = (
                name = "text",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "removed",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "before",
                returnType = (
                  structure = (
                    name = "Comment",
                    fullyQualifiedName = "workerd::api::Comment" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "after",
                returnType = (
                  structure = (
                    name = "Comment",
                    fullyQualifiedName = "workerd::api::Comment" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "replace",
                returnType = (
                  structure = (
                    name = "Comment",
                    fullyQualifiedName = "workerd::api::Comment" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "remove",
                returnType = (
                  structure = (
                    name = "Comment",
                    fullyQualifiedName = "workerd::api::Comment" ) ),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Comment",
          tsRoot = true,
          tsOverride = "{ before(content: string, options?: ContentOptions): Comment; after(content: string, options?: ContentOptions): Comment; replace(content: string, options?: ContentOptions): Comment; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Text",
          members = [
            ( property = (
                name = "text",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lastInTextNode",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "removed",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "before",
                returnType = (
                  structure = (
                    name = "Text",
                    fullyQualifiedName = "workerd::api::Text" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "after",
                returnType = (
                  structure = (
                    name = "Text",
                    fullyQualifiedName = "workerd::api::Text" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "replace",
                returnType = (
                  structure = (
                    name = "Text",
                    fullyQualifiedName = "workerd::api::Text" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "remove",
                returnType = (
                  structure = (
                    name = "Text",
                    fullyQualifiedName = "workerd::api::Text" ) ),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Text",
          tsRoot = true,
          tsOverride = "{ before(content: string, options?: ContentOptions): Text; after(content: string, options?: ContentOptions): Text; replace(content: string, options?: ContentOptions): Text; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DocumentEnd",
          members = [
            ( method = (
                name = "append",
                returnType = (
                  structure = (
                    name = "DocumentEnd",
                    fullyQualifiedName = "workerd::api::DocumentEnd" ) ),
                args = [
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( structure = (
                            name = "Response",
                            fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ContentOptions",
                          fullyQualifiedName = "workerd::api::ContentOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DocumentEnd",
          tsRoot = true,
          tsOverride = "{ append(content: string, options?: ContentOptions): DocumentEnd; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "AttributesIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::api::Element::AttributesIterator::Next" ) ),
                args = [],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Element::AttributesIterator",
          iterator = (
            name = "self",
            returnType = (
              structure = (
                name = "AttributesIterator",
                fullyQualifiedName = "workerd::api::Element::AttributesIterator" ) ),
            args = [],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::String") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Element::AttributesIterator::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "http",
      structures = [
        ( name = "FetchEvent",
          members = [
            ( property = (
                name = "request",
                type = (
                  structure = (
                    name = "Request",
                    fullyQualifiedName = "workerd::api::Request" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "respondWith",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( promise = (
                      value = (
                        structure = (
                          name = "Response",
                          fullyQualifiedName = "workerd::api::Response" ) ) ) ) ],
                static = false ) ),
            ( method = (
                name = "passThroughOnException",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          extends = (
            structure = (
              name = "ExtendableEvent",
              fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::FetchEvent",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Headers",
          members = [
            ( method = (
                name = "get",
                returnType = (
                  maybe = (
                    value = (
                      string = (name = "ByteString") ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( string = (name = "ByteString") ) ],
                static = false ) ),
            ( method = (
                name = "getAll",
                returnType = (
                  array = (
                    element = (
                      string = (name = "ByteString") ),
                    name = "kj::ArrayPtr" ) ),
                args = [
                  ( string = (name = "ByteString") ) ],
                static = false ) ),
            ( method = (
                name = "has",
                returnType = (boolt = void),
                args = [
                  ( string = (name = "ByteString") ) ],
                static = false ) ),
            ( method = (
                name = "set",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "ByteString") ),
                  ( string = (name = "ByteString") ) ],
                static = false ) ),
            ( method = (
                name = "append",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "ByteString") ),
                  ( string = (name = "ByteString") ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "ByteString") ) ],
                static = false ) ),
            ( method = (
                name = "forEach",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        ( string = (name = "kj::StringPtr") ),
                        ( string = (name = "kj::StringPtr") ),
                        ( structure = (
                            name = "Headers",
                            fullyQualifiedName = "workerd::api::Headers" ) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "entries",
                returnType = (
                  structure = (
                    name = "EntryIterator",
                    fullyQualifiedName = "workerd::api::Headers::EntryIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  structure = (
                    name = "KeyIterator",
                    fullyQualifiedName = "workerd::api::Headers::KeyIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "values",
                returnType = (
                  structure = (
                    name = "ValueIterator",
                    fullyQualifiedName = "workerd::api::Headers::ValueIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "Headers",
                                fullyQualifiedName = "workerd::api::Headers" ) ),
                            ( array = (
                                element = (
                                  array = (
                                    element = (
                                      string = (name = "ByteString") ),
                                    name = "jsg::Sequence" ) ),
                                name = "jsg::Sequence" ) ),
                            ( dict = (
                                key = (
                                  string = (name = "ByteString") ),
                                value = (
                                  string = (name = "ByteString") ) ) ) ] ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Headers",
          iterator = (
            name = "entries",
            returnType = (
              structure = (
                name = "EntryIterator",
                fullyQualifiedName = "workerd::api::Headers::EntryIterator" ) ),
            args = [
              ( jsgImpl = (type = jsgLock) ) ],
            static = false ),
          tsRoot = false,
          tsOverride = "{ constructor(init?: HeadersInit); entries(): IterableIterator<[key: string, value: string]>; [Symbol.iterator](): IterableIterator<[key: string, value: string]>; forEach<This = unknown>(callback: (this: This, value: string, key: string, parent: Headers) => void, thisArg?: This): void; }",
          tsDefine = "type HeadersInit = Headers | Iterable<Iterable<string>> | Record<string, string>",
          disposable = false,
          asyncDisposable = false ),
        ( name = "EntryIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::Headers::EntryIterator, kj::Array<workerd::jsg::ByteString>, workerd::api::Headers::IteratorState<workerd::api::Headers::DisplayedHeader>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Headers::EntryIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "ByteString") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::Headers::EntryIterator, kj::Array<workerd::jsg::ByteString>, workerd::api::Headers::IteratorState<workerd::api::Headers::DisplayedHeader>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "KeyIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::Headers::KeyIterator, workerd::jsg::ByteString, workerd::api::Headers::IteratorState<workerd::jsg::ByteString>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Headers::KeyIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      string = (name = "ByteString") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::Headers::KeyIterator, workerd::jsg::ByteString, workerd::api::Headers::IteratorState<workerd::jsg::ByteString>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ValueIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::Headers::ValueIterator, workerd::jsg::ByteString, workerd::api::Headers::IteratorState<workerd::jsg::ByteString>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Headers::ValueIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      string = (name = "ByteString") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::Headers::ValueIterator, workerd::jsg::ByteString, workerd::api::Headers::IteratorState<workerd::jsg::ByteString>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Body",
          members = [
            ( property = (
                name = "body",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "ReadableStream",
                        fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "bodyUsed",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "arrayBuffer",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "text",
                returnType = (
                  promise = (
                    value = (
                      string = (name = "kj::String") ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "json",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "formData",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "FormData",
                        fullyQualifiedName = "workerd::api::FormData" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "blob",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "Blob",
                        fullyQualifiedName = "workerd::api::Blob" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Body",
          tsRoot = false,
          tsOverride = "{ json<T>(): Promise<T>; }",
          tsDefine = "type BodyInit = ReadableStream<Uint8Array> | string | ArrayBuffer | ArrayBufferView | Blob | URLSearchParams | FormData",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Response",
          members = [
            ( method = (
                name = "error",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [],
                static = true ) ),
            ( method = (
                name = "redirect",
                returnType = (
                  structure = (
                    name = "Response",
                    fullyQualifiedName = "workerd::api::Response" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (number = (name = "int")),
                      name = "jsg::Optional" ) ) ],
                static = true ) ),
            ( method = (
                name = "json",
                returnType = (
                  structure = (
                    name = "Response",
                    fullyQualifiedName = "workerd::api::Response" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "InitializerDict",
                                fullyQualifiedName = "workerd::api::Response::InitializerDict" ) ),
                            ( structure = (
                                name = "Response",
                                fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ],
                static = true ) ),
            ( method = (
                name = "clone",
                returnType = (
                  structure = (
                    name = "Response",
                    fullyQualifiedName = "workerd::api::Response" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( property = (
                name = "status",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "statusText",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "headers",
                type = (
                  structure = (
                    name = "Headers",
                    fullyQualifiedName = "workerd::api::Headers" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ok",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "redirected",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "url",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "webSocket",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "WebSocket",
                        fullyQualifiedName = "workerd::api::WebSocket" ) ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cf",
                type = (
                  maybe = (value = (object = void), name = "jsg::Optional") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        maybe = (
                          value = (
                            oneOf = (
                              variants = [
                                ( structure = (
                                    name = "ReadableStream",
                                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                                ( string = (name = "kj::String") ),
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                ( structure = (
                                    name = "Blob",
                                    fullyQualifiedName = "workerd::api::Blob" ) ),
                                ( structure = (
                                    name = "URLSearchParams",
                                    fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                                ( structure = (
                                    name = "FormData",
                                    fullyQualifiedName = "workerd::api::FormData" ) ) ] ) ),
                          name = "kj::Maybe" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "InitializerDict",
                                fullyQualifiedName = "workerd::api::Response::InitializerDict" ) ),
                            ( structure = (
                                name = "Response",
                                fullyQualifiedName = "workerd::api::Response" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "Body",
              fullyQualifiedName = "workerd::api::Body" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Response",
          tsRoot = false,
          tsOverride = "{ constructor(body?: BodyInit | null, init?: ResponseInit); }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "InitializerDict",
          members = [
            ( property = (
                name = "status",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "statusText",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "headers",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "Headers",
                              fullyQualifiedName = "workerd::api::Headers" ) ),
                          ( array = (
                              element = (
                                array = (
                                  element = (
                                    string = (name = "ByteString") ),
                                  name = "jsg::Sequence" ) ),
                              name = "jsg::Sequence" ) ),
                          ( dict = (
                              key = (
                                string = (name = "ByteString") ),
                              value = (
                                string = (name = "ByteString") ) ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cf",
                type = (
                  maybe = (value = (object = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "webSocket",
                type = (
                  maybe = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "WebSocket",
                            fullyQualifiedName = "workerd::api::WebSocket" ) ),
                        name = "kj::Maybe" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "encodeBody",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Response::InitializerDict",
          tsRoot = false,
          tsOverride = "ResponseInit { headers?: HeadersInit; encodeBody?: \"automatic\" | \"manual\"; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Request",
          members = [
            ( method = (
                name = "clone",
                returnType = (
                  structure = (
                    name = "Request",
                    fullyQualifiedName = "workerd::api::Request" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( property = (
                name = "method",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "url",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "headers",
                type = (
                  structure = (
                    name = "Headers",
                    fullyQualifiedName = "workerd::api::Headers" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "redirect",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "fetcher",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "Fetcher",
                        fullyQualifiedName = "workerd::api::Fetcher" ) ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "signal",
                type = (
                  structure = (
                    name = "AbortSignal",
                    fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cf",
                type = (
                  maybe = (value = (object = void), name = "jsg::Optional") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "integrity",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "keepalive",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "RequestInitializerDict",
                                fullyQualifiedName = "workerd::api::RequestInitializerDict" ) ),
                            ( structure = (
                                name = "Request",
                                fullyQualifiedName = "workerd::api::Request" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "Body",
              fullyQualifiedName = "workerd::api::Body" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Request",
          tsRoot = false,
          tsOverride = "<CfHostMetadata = unknown, Cf = CfProperties<CfHostMetadata>> { constructor(input: RequestInfo<CfProperties>, init?: RequestInit<Cf>); clone(): Request<CfHostMetadata, Cf>; readonly cf?: Cf; }",
          tsDefine = "type RequestInfo<CfHostMetadata = unknown, Cf = CfProperties<CfHostMetadata>> = Request<CfHostMetadata, Cf> | string | URL",
          disposable = false,
          asyncDisposable = false ),
        ( name = "RequestInitializerDict",
          members = [
            ( property = (
                name = "method",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "headers",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "Headers",
                              fullyQualifiedName = "workerd::api::Headers" ) ),
                          ( array = (
                              element = (
                                array = (
                                  element = (
                                    string = (name = "ByteString") ),
                                  name = "jsg::Sequence" ) ),
                              name = "jsg::Sequence" ) ),
                          ( dict = (
                              key = (
                                string = (name = "ByteString") ),
                              value = (
                                string = (name = "ByteString") ) ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "body",
                type = (
                  maybe = (
                    value = (
                      maybe = (
                        value = (
                          oneOf = (
                            variants = [
                              ( structure = (
                                  name = "ReadableStream",
                                  fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                              ( string = (name = "kj::String") ),
                              ( array = (
                                  element = (
                                    number = (name = "unsigned char") ),
                                  name = "kj::Array" ) ),
                              ( structure = (
                                  name = "Blob",
                                  fullyQualifiedName = "workerd::api::Blob" ) ),
                              ( structure = (
                                  name = "URLSearchParams",
                                  fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                              ( structure = (
                                  name = "FormData",
                                  fullyQualifiedName = "workerd::api::FormData" ) ) ] ) ),
                        name = "kj::Maybe" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "redirect",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "fetcher",
                type = (
                  maybe = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "Fetcher",
                            fullyQualifiedName = "workerd::api::Fetcher" ) ),
                        name = "kj::Maybe" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cf",
                type = (
                  maybe = (value = (object = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mode",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "credentials",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cache",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "referrer",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "referrerPolicy",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "integrity",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "signal",
                type = (
                  maybe = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "AbortSignal",
                            fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                        name = "kj::Maybe" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::RequestInitializerDict",
          tsRoot = false,
          tsOverride = "RequestInit<Cf = CfProperties> { headers?: HeadersInit; body?: BodyInit | null; cf?: Cf; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Fetcher",
          members = [
            ( method = (
                name = "fetch",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "Response",
                        fullyQualifiedName = "workerd::api::Response" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "Request",
                            fullyQualifiedName = "workerd::api::Request" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "RequestInitializerDict",
                                fullyQualifiedName = "workerd::api::RequestInitializerDict" ) ),
                            ( structure = (
                                name = "Request",
                                fullyQualifiedName = "workerd::api::Request" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "connect",
                returnType = (
                  structure = (
                    name = "Socket",
                    fullyQualifiedName = "workerd::api::Socket" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "SocketAddress",
                            fullyQualifiedName = "workerd::api::SocketAddress" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SocketOptions",
                          fullyQualifiedName = "workerd::api::SocketOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  promise = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "ReadableStream",
                              fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( string = (name = "kj::String") ),
                          (unknown = void) ] ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "put",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( string = (name = "kj::String") ),
                        ( array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        ( structure = (
                            name = "Blob",
                            fullyQualifiedName = "workerd::api::Blob" ) ),
                        ( structure = (
                            name = "URLSearchParams",
                            fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                        ( structure = (
                            name = "FormData",
                            fullyQualifiedName = "workerd::api::FormData" ) ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::Fetcher::PutOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Fetcher",
          tsRoot = false,
          tsOverride = "type Fetcher< T extends Rpc.EntrypointBranded | undefined = undefined, Reserved extends string = never > = ( T extends Rpc.EntrypointBranded ? Rpc.Provider<T, Reserved | \"fetch\" | \"connect\"> : unknown ) & { fetch(input: RequestInfo, init?: RequestInit): Promise<Response>; connect(address: SocketAddress | string, options?: SocketOptions): Socket; }",
          tsDefine = "type Service<T extends Rpc.WorkerEntrypointBranded | undefined = undefined> = Fetcher<T>;",
          disposable = false,
          asyncDisposable = false ),
        ( name = "PutOptions",
          members = [
            ( property = (
                name = "expiration",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "expirationTtl",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Fetcher::PutOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ScheduledOptions",
          members = [
            ( property = (
                name = "scheduledTime",
                type = (
                  maybe = (
                    value = (
                      builtin = (type = kjDate) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cron",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Fetcher::ScheduledOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ScheduledResult",
          members = [
            ( property = (
                name = "outcome",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noRetry",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Fetcher::ScheduledResult",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueResult",
          members = [
            ( property = (
                name = "outcome",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ackAll",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "retryBatch",
                type = (
                  structure = (
                    name = "QueueRetryBatch",
                    fullyQualifiedName = "workerd::api::QueueRetryBatch" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "explicitAcks",
                type = (
                  array = (
                    element = (
                      string = (name = "kj::String") ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "retryMessages",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "QueueRetryMessage",
                        fullyQualifiedName = "workerd::api::QueueRetryMessage" ) ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Fetcher::QueueResult",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ServiceBindingQueueMessage",
          members = [
            ( property = (
                name = "id",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "timestamp",
                type = (
                  builtin = (type = kjDate) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "body",
                type = (
                  maybe = (value = (unknown = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "serializedBody",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "attempts",
                type = (
                  number = (name = "unsigned short") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Fetcher::ServiceBindingQueueMessage",
          tsRoot = false,
          tsOverride = "type ServiceBindingQueueMessage<Body = unknown> = { id: string; timestamp: Date; attempts: number; } & ( | { body: Body } | { serializedBody: ArrayBuffer | ArrayBufferView } )",
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "hyperdrive",
      structures = [
        ( name = "Hyperdrive",
          members = [
            ( property = (
                name = "database",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "user",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "password",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "host",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "port",
                type = (
                  number = (name = "unsigned short") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "connectionString",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( method = (
                name = "connect",
                returnType = (
                  structure = (
                    name = "Socket",
                    fullyQualifiedName = "workerd::api::Socket" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Hyperdrive",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "kv",
      structures = [
        ( name = "KvNamespace",
          members = [
            ( method = (
                name = "get",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          oneOf = (
                            variants = [
                              ( structure = (
                                  name = "ReadableStream",
                                  fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                              ( array = (
                                  element = (
                                    number = (name = "unsigned char") ),
                                  name = "kj::Array" ) ),
                              ( string = (name = "kj::String") ),
                              (unknown = void) ] ) ),
                        name = "kj::Maybe" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( string = (name = "kj::String") ),
                            ( structure = (
                                name = "GetOptions",
                                fullyQualifiedName = "workerd::api::KvNamespace::GetOptions" ) ) ] ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = configuration) ) ],
                static = false ) ),
            ( method = (
                name = "list",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ListOptions",
                          fullyQualifiedName = "workerd::api::KvNamespace::ListOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "put",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        (object = void) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::KvNamespace::PutOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "getWithMetadata",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "GetWithMetadataResult",
                        fullyQualifiedName = "workerd::api::KvNamespace::GetWithMetadataResult" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( string = (name = "kj::String") ),
                            ( structure = (
                                name = "GetOptions",
                                fullyQualifiedName = "workerd::api::KvNamespace::GetOptions" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::KvNamespace",
          tsRoot = true,
          tsOverride = "KVNamespace<Key extends string = string> { get(key: Key, options?: Partial<KVNamespaceGetOptions<undefined>>): Promise<string | null>; get(key: Key, type: \"text\"): Promise<string | null>; get<ExpectedValue = unknown>(key: Key, type: \"json\"): Promise<ExpectedValue | null>; get(key: Key, type: \"arrayBuffer\"): Promise<ArrayBuffer | null>; get(key: Key, type: \"stream\"): Promise<ReadableStream | null>; get(key: Key, options?: KVNamespaceGetOptions<\"text\">): Promise<string | null>; get<ExpectedValue = unknown>(key: Key, options?: KVNamespaceGetOptions<\"json\">): Promise<ExpectedValue | null>; get(key: Key, options?: KVNamespaceGetOptions<\"arrayBuffer\">): Promise<ArrayBuffer | null>; get(key: Key, options?: KVNamespaceGetOptions<\"stream\">): Promise<ReadableStream | null>; list<Metadata = unknown>(options?: KVNamespaceListOptions): Promise<KVNamespaceListResult<Metadata, Key>>; put(key: Key, value: string | ArrayBuffer | ArrayBufferView | ReadableStream, options?: KVNamespacePutOptions): Promise<void>; getWithMetadata<Metadata = unknown>(key: Key, options?: Partial<KVNamespaceGetOptions<undefined>>): Promise<KVNamespaceGetWithMetadataResult<string, Metadata>>; getWithMetadata<Metadata = unknown>(key: Key, type: \"text\"): Promise<KVNamespaceGetWithMetadataResult<string, Metadata>>; getWithMetadata<ExpectedValue = unknown, Metadata = unknown>(key: Key, type: \"json\"): Promise<KVNamespaceGetWithMetadataResult<ExpectedValue, Metadata>>; getWithMetadata<Metadata = unknown>(key: Key, type: \"arrayBuffer\"): Promise<KVNamespaceGetWithMetadataResult<ArrayBuffer, Metadata>>; getWithMetadata<Metadata = unknown>(key: Key, type: \"stream\"): Promise<KVNamespaceGetWithMetadataResult<ReadableStream, Metadata>>; getWithMetadata<Metadata = unknown>(key: Key, options: KVNamespaceGetOptions<\"text\">): Promise<KVNamespaceGetWithMetadataResult<string, Metadata>>; getWithMetadata<ExpectedValue = unknown, Metadata = unknown>(key: Key, options: KVNamespaceGetOptions<\"json\">): Promise<KVNamespaceGetWithMetadataResult<ExpectedValue, Metadata>>; getWithMetadata<Metadata = unknown>(key: Key, options: KVNamespaceGetOptions<\"arrayBuffer\">): Promise<KVNamespaceGetWithMetadataResult<ArrayBuffer, Metadata>>; getWithMetadata<Metadata = unknown>(key: Key, options: KVNamespaceGetOptions<\"stream\">): Promise<KVNamespaceGetWithMetadataResult<ReadableStream, Metadata>>; delete(key: Key): Promise<void>; }",
          tsDefine = "interface KVNamespaceListKey<Metadata, Key extends string = string> { name: Key; expiration?: number; metadata?: Metadata; } type KVNamespaceListResult<Metadata, Key extends string = string> = | { list_complete: false; keys: KVNamespaceListKey<Metadata, Key>[]; cursor: string; cacheStatus: string | null; } | { list_complete: true; keys: KVNamespaceListKey<Metadata, Key>[]; cacheStatus: string | null; };",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ListOptions",
          members = [
            ( property = (
                name = "limit",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "prefix",
                type = (
                  maybe = (
                    value = (
                      maybe = (
                        value = (
                          string = (name = "kj::String") ),
                        name = "kj::Maybe" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cursor",
                type = (
                  maybe = (
                    value = (
                      maybe = (
                        value = (
                          string = (name = "kj::String") ),
                        name = "kj::Maybe" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::KvNamespace::ListOptions",
          tsRoot = false,
          tsOverride = "KVNamespaceListOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetOptions",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cacheTtl",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::KvNamespace::GetOptions",
          tsRoot = false,
          tsOverride = "KVNamespaceGetOptions<Type> { type: Type; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "PutOptions",
          members = [
            ( property = (
                name = "expiration",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "expirationTtl",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "metadata",
                type = (
                  maybe = (
                    value = (
                      maybe = (value = (unknown = void), name = "kj::Maybe") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::KvNamespace::PutOptions",
          tsRoot = false,
          tsOverride = "KVNamespacePutOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetWithMetadataResult",
          members = [
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "ReadableStream",
                              fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( string = (name = "kj::String") ),
                          (unknown = void) ] ) ),
                    name = "kj::Maybe" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "metadata",
                type = (
                  maybe = (value = (unknown = void), name = "kj::Maybe") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cacheStatus",
                type = (
                  maybe = (value = (unknown = void), name = "kj::Maybe") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::KvNamespace::GetWithMetadataResult",
          tsRoot = false,
          tsOverride = "KVNamespaceGetWithMetadataResult<Value, Metadata> { value: Value | null; metadata: Metadata | null; cacheStatus: string | null; }",
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "queue",
      structures = [
        ( name = "WorkerQueue",
          members = [
            ( method = (
                name = "send",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SendOptions",
                          fullyQualifiedName = "workerd::api::WorkerQueue::SendOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "sendBatch",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        structure = (
                          name = "MessageSendRequest",
                          fullyQualifiedName = "workerd::api::WorkerQueue::MessageSendRequest" ) ),
                      name = "jsg::Sequence" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SendBatchOptions",
                          fullyQualifiedName = "workerd::api::WorkerQueue::SendBatchOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WorkerQueue",
          tsRoot = true,
          tsOverride = "Queue<Body = unknown> { send(message: Body, options?: QueueSendOptions): Promise<void>; sendBatch(messages : Iterable<MessageSendRequest<Body>>, options ?: QueueSendBatchOptions) : Promise<void>; }",
          tsDefine = "type QueueContentType = \"text\" | \"bytes\" | \"json\" | \"v8\"",
          disposable = false,
          asyncDisposable = false ),
        ( name = "SendOptions",
          members = [
            ( property = (
                name = "contentType",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "delaySeconds",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WorkerQueue::SendOptions",
          tsRoot = false,
          tsOverride = "QueueSendOptions { contentType?: QueueContentType; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "SendBatchOptions",
          members = [
            ( property = (
                name = "delaySeconds",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WorkerQueue::SendBatchOptions",
          tsRoot = false,
          tsOverride = "QueueSendBatchOptions { delaySeconds ?: number; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "MessageSendRequest",
          members = [
            ( property = (
                name = "body",
                type = (unknown = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "contentType",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "delaySeconds",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WorkerQueue::MessageSendRequest",
          tsRoot = false,
          tsOverride = "MessageSendRequest<Body = unknown> { body: Body; contentType?: QueueContentType; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "IncomingQueueMessage",
          members = [
            ( property = (
                name = "id",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "timestamp",
                type = (
                  builtin = (type = kjDate) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "body",
                type = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "contentType",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "kj::Maybe" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "attempts",
                type = (
                  number = (name = "unsigned short") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::IncomingQueueMessage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueRetryBatch",
          members = [
            ( property = (
                name = "retry",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "delaySeconds",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueRetryBatch",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueRetryMessage",
          members = [
            ( property = (
                name = "msgId",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "delaySeconds",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueRetryMessage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueResponse",
          members = [
            ( property = (
                name = "outcome",
                type = (
                  number = (name = "unsigned short") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ackAll",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "retryBatch",
                type = (
                  structure = (
                    name = "QueueRetryBatch",
                    fullyQualifiedName = "workerd::api::QueueRetryBatch" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "explicitAcks",
                type = (
                  array = (
                    element = (
                      string = (name = "kj::String") ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "retryMessages",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "QueueRetryMessage",
                        fullyQualifiedName = "workerd::api::QueueRetryMessage" ) ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueResponse",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueRetryOptions",
          members = [
            ( property = (
                name = "delaySeconds",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueRetryOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueMessage",
          members = [
            ( property = (
                name = "id",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "timestamp",
                type = (
                  builtin = (type = kjDate) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "body",
                type = (unknown = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "attempts",
                type = (
                  number = (name = "unsigned short") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "retry",
                returnType = (voidt = void),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "QueueRetryOptions",
                          fullyQualifiedName = "workerd::api::QueueRetryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "ack",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueMessage",
          tsRoot = false,
          tsOverride = "Message<Body = unknown> { readonly body: Body; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueEvent",
          members = [
            ( property = (
                name = "messages",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "QueueMessage",
                        fullyQualifiedName = "workerd::api::QueueMessage" ) ),
                    name = "kj::ArrayPtr" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "queue",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "retryAll",
                returnType = (voidt = void),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "QueueRetryOptions",
                          fullyQualifiedName = "workerd::api::QueueRetryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "ackAll",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          extends = (
            structure = (
              name = "ExtendableEvent",
              fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueEvent",
          tsRoot = true,
          tsOverride = "QueueEvent<Body = unknown> { readonly messages: readonly Message<Body>[]; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueController",
          members = [
            ( property = (
                name = "messages",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "QueueMessage",
                        fullyQualifiedName = "workerd::api::QueueMessage" ) ),
                    name = "kj::ArrayPtr" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "queue",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "retryAll",
                returnType = (voidt = void),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "QueueRetryOptions",
                          fullyQualifiedName = "workerd::api::QueueRetryOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "ackAll",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueController",
          tsRoot = true,
          tsOverride = "MessageBatch<Body = unknown> { readonly messages: readonly Message<Body>[]; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueExportedHandler",
          members = [
            ( property = (
                name = "queue",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "QueueController",
                              fullyQualifiedName = "workerd::api::QueueController" ) ),
                          (unknown = void),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "ExecutionContext",
                                  fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                              name = "jsg::Optional" ) ) ] ) ),
                    name = "jsg::LenientOptional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueueExportedHandler",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "r2-admin",
      structures = [
        ( name = "R2Admin",
          members = [
            ( method = (
                name = "create",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "R2Bucket",
                        fullyQualifiedName = "workerd::api::public_beta::R2Bucket" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  structure = (
                    name = "R2Bucket",
                    fullyQualifiedName = "workerd::api::public_beta::R2Bucket" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "list",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "ListResult",
                        fullyQualifiedName = "workerd::api::public_beta::R2Admin::ListResult" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ListOptions",
                          fullyQualifiedName = "workerd::api::public_beta::R2Admin::ListOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ),
                  ( jsgImpl = (type = jsgTypeHandler) ),
                  ( jsgImpl = (type = configuration) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Admin",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "RetrievedBucket",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "created",
                type = (
                  builtin = (type = kjDate) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          extends = (
            structure = (
              name = "R2Bucket",
              fullyQualifiedName = "workerd::api::public_beta::R2Bucket" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Admin::RetrievedBucket",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ListOptions",
          members = [
            ( property = (
                name = "limit",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cursor",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Admin::ListOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ListResult",
          members = [
            ( property = (
                name = "buckets",
                type = (unknown = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "truncated",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cursor",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Admin::ListResult",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "r2",
      structures = [
        ( name = "R2Error",
          members = [
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "code",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "message",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "action",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stack",
                type = (unknown = void),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kErrorPrototype" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::R2Error",
          tsRoot = true,
          disposable = false,
          asyncDisposable = false ),
        ( name = "R2Bucket",
          members = [
            ( method = (
                name = "head",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "HeadResult",
                            fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HeadResult" ) ),
                        name = "kj::Maybe" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( jsgImpl = (type = jsgTypeHandler) ),
                  ( jsgImpl = (type = configuration) ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  promise = (
                    value = (
                      oneOf = (
                        variants = [
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "GetResult",
                                  fullyQualifiedName = "workerd::api::public_beta::R2Bucket::GetResult" ) ),
                              name = "kj::Maybe" ) ),
                          ( structure = (
                              name = "HeadResult",
                              fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HeadResult" ) ) ] ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GetOptions",
                          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::GetOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ),
                  ( jsgImpl = (type = configuration) ) ],
                static = false ) ),
            ( method = (
                name = "put",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "HeadResult",
                            fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HeadResult" ) ),
                        name = "kj::Maybe" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "ReadableStream",
                                fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                            ( array = (
                                element = (
                                  number = (name = "unsigned char") ),
                                name = "kj::Array" ) ),
                            ( string = (name = "kj::String") ),
                            ( structure = (
                                name = "Blob",
                                fullyQualifiedName = "workerd::api::Blob" ) ) ] ) ),
                      name = "kj::Maybe" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PutOptions",
                          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::PutOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "createMultipartUpload",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "R2MultipartUpload",
                        fullyQualifiedName = "workerd::api::public_beta::R2MultipartUpload" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "MultipartOptions",
                          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::MultipartOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "resumeMultipartUpload",
                returnType = (
                  structure = (
                    name = "R2MultipartUpload",
                    fullyQualifiedName = "workerd::api::public_beta::R2MultipartUpload" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "kj::String") ),
                        ( array = (
                            element = (
                              string = (name = "kj::String") ),
                            name = "kj::Array" ) ) ] ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "list",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "ListResult",
                        fullyQualifiedName = "workerd::api::public_beta::R2Bucket::ListResult" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ListOptions",
                          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::ListOptions" ) ),
                      name = "jsg::Optional" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ),
                  ( jsgImpl = (type = configuration) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket",
          tsRoot = true,
          tsOverride = "{ get(key: string, options: R2GetOptions & { onlyIf: R2BucketConditional | Headers }): Promise<R2ObjectBody | R2Object | null>; get(key: string, options?: R2GetOptions): Promise<R2ObjectBody | null>; put( key: string, value: ReadableStream | ArrayBuffer | ArrayBufferView | string | null | Blob, options?: R2PutOptions & { onlyIf: R2BucketConditional | Headers } ): Promise<R2Object | null>; put(key: string, value: ReadableStream | ArrayBuffer | ArrayBufferView | string | null | Blob, options?: R2PutOptions): Promise<R2Object>; }",
          tsDefine = "interface R2ListOptions { limit?: number; prefix?: string; cursor?: string; delimiter?: string; startAfter?: string; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "R2MultipartUpload",
          members = [
            ( property = (
                name = "key",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "uploadId",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( method = (
                name = "uploadPart",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "UploadedPart",
                        fullyQualifiedName = "workerd::api::public_beta::R2MultipartUpload::UploadedPart" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (number = (name = "int")),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "ReadableStream",
                            fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                        ( array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        ( string = (name = "kj::String") ),
                        ( structure = (
                            name = "Blob",
                            fullyQualifiedName = "workerd::api::Blob" ) ) ] ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "abort",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "complete",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "HeadResult",
                        fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HeadResult" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        structure = (
                          name = "UploadedPart",
                          fullyQualifiedName = "workerd::api::public_beta::R2MultipartUpload::UploadedPart" ) ),
                      name = "kj::Array" ) ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2MultipartUpload",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "UploadedPart",
          members = [
            ( property = (
                name = "partNumber",
                type = (number = (name = "int")),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "etag",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2MultipartUpload::UploadedPart",
          tsRoot = false,
          tsOverride = "R2UploadedPart",
          disposable = false,
          asyncDisposable = false ),
        ( name = "HeadResult",
          members = [
            ( property = (
                name = "key",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "version",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "size",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "etag",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "httpEtag",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "checksums",
                type = (
                  structure = (
                    name = "Checksums",
                    fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Checksums" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "uploaded",
                type = (
                  builtin = (type = kjDate) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "httpMetadata",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "HttpMetadata",
                        fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HttpMetadata" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "customMetadata",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "kj::String") ),
                        value = (
                          string = (name = "kj::String") ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "range",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "Range",
                        fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Range" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "storageClass",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( method = (
                name = "writeHttpMetadata",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "Headers",
                      fullyQualifiedName = "workerd::api::Headers" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HeadResult",
          tsRoot = false,
          tsOverride = "R2Object",
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetResult",
          members = [
            ( property = (
                name = "body",
                type = (
                  structure = (
                    name = "ReadableStream",
                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "bodyUsed",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "arrayBuffer",
                returnType = (
                  promise = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "text",
                returnType = (
                  promise = (
                    value = (
                      string = (name = "kj::String") ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "json",
                returnType = (
                  promise = (value = (unknown = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "blob",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "Blob",
                        fullyQualifiedName = "workerd::api::Blob" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            structure = (
              name = "HeadResult",
              fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HeadResult" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::GetResult",
          tsRoot = false,
          tsOverride = "R2ObjectBody { json<T>(): Promise<T>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Range",
          members = [
            ( property = (
                name = "offset",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "length",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "suffix",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Range",
          tsRoot = false,
          tsOverride = "type R2Range = | { offset: number; length?: number } | { offset?: number; length: number } | { suffix: number }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Conditional",
          members = [
            ( property = (
                name = "etagMatches",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "etagDoesNotMatch",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "uploadedBefore",
                type = (
                  maybe = (
                    value = (
                      builtin = (type = kjDate) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "uploadedAfter",
                type = (
                  maybe = (
                    value = (
                      builtin = (type = kjDate) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "secondsGranularity",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Conditional",
          tsRoot = false,
          tsOverride = "R2Conditional",
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetOptions",
          members = [
            ( property = (
                name = "onlyIf",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "Conditional",
                              fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Conditional" ) ),
                          ( structure = (
                              name = "Headers",
                              fullyQualifiedName = "workerd::api::Headers" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "range",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "Range",
                              fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Range" ) ),
                          ( structure = (
                              name = "Headers",
                              fullyQualifiedName = "workerd::api::Headers" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::GetOptions",
          tsRoot = false,
          tsOverride = "R2GetOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "PutOptions",
          members = [
            ( property = (
                name = "onlyIf",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "Conditional",
                              fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Conditional" ) ),
                          ( structure = (
                              name = "Headers",
                              fullyQualifiedName = "workerd::api::Headers" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "httpMetadata",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "HttpMetadata",
                              fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HttpMetadata" ) ),
                          ( structure = (
                              name = "Headers",
                              fullyQualifiedName = "workerd::api::Headers" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "customMetadata",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "kj::String") ),
                        value = (
                          string = (name = "kj::String") ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "md5",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha1",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha256",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha384",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha512",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ),
                          ( string = (name = "kj::String") ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "storageClass",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::PutOptions",
          tsRoot = false,
          tsOverride = "R2PutOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "MultipartOptions",
          members = [
            ( property = (
                name = "httpMetadata",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "HttpMetadata",
                              fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HttpMetadata" ) ),
                          ( structure = (
                              name = "Headers",
                              fullyQualifiedName = "workerd::api::Headers" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "customMetadata",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "kj::String") ),
                        value = (
                          string = (name = "kj::String") ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "storageClass",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::MultipartOptions",
          tsRoot = false,
          tsOverride = "R2MultipartOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Checksums",
          members = [
            ( property = (
                name = "md5",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "sha1",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "sha256",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "sha384",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "sha512",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( method = (
                name = "toJSON",
                returnType = (
                  structure = (
                    name = "StringChecksums",
                    fullyQualifiedName = "workerd::api::public_beta::R2Bucket::StringChecksums" ) ),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::Checksums",
          tsRoot = false,
          tsOverride = "R2Checksums",
          disposable = false,
          asyncDisposable = false ),
        ( name = "StringChecksums",
          members = [
            ( property = (
                name = "md5",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha1",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha256",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha384",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sha512",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::StringChecksums",
          tsRoot = false,
          tsOverride = "R2StringChecksums",
          disposable = false,
          asyncDisposable = false ),
        ( name = "HttpMetadata",
          members = [
            ( property = (
                name = "contentType",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "contentLanguage",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "contentDisposition",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "contentEncoding",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cacheControl",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cacheExpiry",
                type = (
                  maybe = (
                    value = (
                      builtin = (type = kjDate) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HttpMetadata",
          tsRoot = false,
          tsOverride = "R2HTTPMetadata",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ListOptions",
          members = [
            ( property = (
                name = "limit",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "prefix",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cursor",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "delimiter",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "startAfter",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "include",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::String") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::ListOptions",
          tsRoot = false,
          tsOverride = "type R2ListOptions = never",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ListResult",
          members = [
            ( property = (
                name = "objects",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "HeadResult",
                        fullyQualifiedName = "workerd::api::public_beta::R2Bucket::HeadResult" ) ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "truncated",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cursor",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "delimitedPrefixes",
                type = (
                  array = (
                    element = (
                      string = (name = "kj::String") ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::public_beta::R2Bucket::ListResult",
          tsRoot = false,
          tsOverride = "type R2Objects = { objects: R2Object[]; delimitedPrefixes: string[]; } & ( | { truncated: true; cursor: string } | { truncated: false } )",
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "worker-rpc",
      structures = [
        ( name = "JsRpcPromise",
          members = [
            ( method = (
                name = "then",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ),
                  ( maybe = (
                      value = (
                        builtin = (type = v8Function) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "catch",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ) ],
                static = false ) ),
            ( method = (
                name = "finally",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::JsRpcPromise",
          tsRoot = false,
          callable = (
            returnType = (
              structure = (
                name = "JsRpcPromise",
                fullyQualifiedName = "workerd::api::JsRpcPromise" ) ),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ] ),
          disposable = true,
          dispose = (
            name = "dispose",
            returnType = (voidt = void),
            args = [
              ( jsgImpl = (type = jsgLock) ) ],
            static = false ),
          asyncDisposable = false ),
        ( name = "JsRpcProperty",
          members = [
            ( method = (
                name = "then",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ),
                  ( maybe = (
                      value = (
                        builtin = (type = v8Function) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "catch",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ) ],
                static = false ) ),
            ( method = (
                name = "finally",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::JsRpcProperty",
          tsRoot = false,
          callable = (
            returnType = (
              structure = (
                name = "JsRpcPromise",
                fullyQualifiedName = "workerd::api::JsRpcPromise" ) ),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ] ),
          disposable = false,
          asyncDisposable = false ),
        ( name = "JsRpcStub",
          members = [
            ( method = (
                name = "dup",
                returnType = (
                  structure = (
                    name = "JsRpcStub",
                    fullyQualifiedName = "workerd::api::JsRpcStub" ) ),
                args = [],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "JsRpcTarget",
                      fullyQualifiedName = "workerd::api::JsRpcTarget" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::JsRpcStub",
          tsRoot = false,
          callable = (
            returnType = (
              structure = (
                name = "JsRpcPromise",
                fullyQualifiedName = "workerd::api::JsRpcPromise" ) ),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ] ),
          disposable = true,
          dispose = (
            name = "dispose",
            returnType = (voidt = void),
            args = [],
            static = false ),
          asyncDisposable = false ),
        ( name = "JsRpcTarget",
          members = [
            ( constructor = (args = []) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::JsRpcTarget",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "WorkerEntrypoint",
          members = [
            ( constructor = (
                args = [
                  ( jsgImpl = (
                      type = v8FunctionCallbackInfo ) ),
                  ( structure = (
                      name = "ExecutionContext",
                      fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                  (object = void) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WorkerEntrypoint",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "DurableObjectBase",
          members = [
            ( constructor = (
                args = [
                  ( jsgImpl = (
                      type = v8FunctionCallbackInfo ) ),
                  ( structure = (
                      name = "DurableObjectState",
                      fullyQualifiedName = "workerd::api::DurableObjectState" ) ),
                  (object = void) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DurableObjectBase",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "EntrypointsModule",
          members = [
            ( nested = (
                structure = (
                  name = "WorkerEntrypoint",
                  members = [
                    ( constructor = (
                        args = [
                          ( jsgImpl = (
                              type = v8FunctionCallbackInfo ) ),
                          ( structure = (
                              name = "ExecutionContext",
                              fullyQualifiedName = "workerd::api::ExecutionContext" ) ),
                          (object = void) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::WorkerEntrypoint",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "WorkerEntrypoint" ) ),
            ( nested = (
                structure = (
                  name = "DurableObjectBase",
                  members = [
                    ( constructor = (
                        args = [
                          ( jsgImpl = (
                              type = v8FunctionCallbackInfo ) ),
                          ( structure = (
                              name = "DurableObjectState",
                              fullyQualifiedName = "workerd::api::DurableObjectState" ) ),
                          (object = void) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::DurableObjectBase",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "DurableObject" ) ),
            ( nested = (
                structure = (
                  name = "JsRpcPromise",
                  members = [
                    ( method = (
                        name = "then",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ),
                          ( maybe = (
                              value = (
                                builtin = (type = v8Function) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "catch",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ) ],
                        static = false ) ),
                    ( method = (
                        name = "finally",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ) ],
                        static = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::JsRpcPromise",
                  tsRoot = false,
                  callable = (
                    returnType = (
                      structure = (
                        name = "JsRpcPromise",
                        fullyQualifiedName = "workerd::api::JsRpcPromise" ) ),
                    args = [
                      ( jsgImpl = (
                          type = v8FunctionCallbackInfo ) ) ] ),
                  disposable = true,
                  dispose = (
                    name = "dispose",
                    returnType = (voidt = void),
                    args = [
                      ( jsgImpl = (type = jsgLock) ) ],
                    static = false ),
                  asyncDisposable = false ),
                name = "RpcPromise" ) ),
            ( nested = (
                structure = (
                  name = "JsRpcProperty",
                  members = [
                    ( method = (
                        name = "then",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ),
                          ( maybe = (
                              value = (
                                builtin = (type = v8Function) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "catch",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ) ],
                        static = false ) ),
                    ( method = (
                        name = "finally",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ) ],
                        static = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::JsRpcProperty",
                  tsRoot = false,
                  callable = (
                    returnType = (
                      structure = (
                        name = "JsRpcPromise",
                        fullyQualifiedName = "workerd::api::JsRpcPromise" ) ),
                    args = [
                      ( jsgImpl = (
                          type = v8FunctionCallbackInfo ) ) ] ),
                  disposable = false,
                  asyncDisposable = false ),
                name = "RpcProperty" ) ),
            ( nested = (
                structure = (
                  name = "JsRpcStub",
                  members = [
                    ( method = (
                        name = "dup",
                        returnType = (
                          structure = (
                            name = "JsRpcStub",
                            fullyQualifiedName = "workerd::api::JsRpcStub" ) ),
                        args = [],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "JsRpcTarget",
                              fullyQualifiedName = "workerd::api::JsRpcTarget" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::JsRpcStub",
                  tsRoot = false,
                  callable = (
                    returnType = (
                      structure = (
                        name = "JsRpcPromise",
                        fullyQualifiedName = "workerd::api::JsRpcPromise" ) ),
                    args = [
                      ( jsgImpl = (
                          type = v8FunctionCallbackInfo ) ) ] ),
                  disposable = true,
                  dispose = (
                    name = "dispose",
                    returnType = (voidt = void),
                    args = [],
                    static = false ),
                  asyncDisposable = false ),
                name = "RpcStub" ) ),
            ( nested = (
                structure = (
                  name = "JsRpcTarget",
                  members = [
                    ( constructor = (args = []) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::JsRpcTarget",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "RpcTarget" ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::EntrypointsModule",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "scheduled",
      structures = [
        ( name = "ScheduledEvent",
          members = [
            ( property = (
                name = "scheduledTime",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cron",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "noRetry",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          extends = (
            structure = (
              name = "ExtendableEvent",
              fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ScheduledEvent",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ScheduledController",
          members = [
            ( property = (
                name = "scheduledTime",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cron",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "noRetry",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ScheduledController",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "streams",
      structures = [
        ( name = "StreamQueuingStrategy",
          members = [
            ( property = (
                name = "highWaterMark",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "size",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          number = (
                            name = "unsigned long long" ) ),
                        args = [(unknown = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::StreamQueuingStrategy",
          tsRoot = false,
          tsOverride = "QueuingStrategy<T = any> { size?: (chunk: T) => number | bigint; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "UnderlyingSink",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "start",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "WritableStreamDefaultController",
                              fullyQualifiedName = "workerd::api::WritableStreamDefaultController" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "write",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          (unknown = void),
                          ( structure = (
                              name = "WritableStreamDefaultController",
                              fullyQualifiedName = "workerd::api::WritableStreamDefaultController" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "abort",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(unknown = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "close",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::UnderlyingSink",
          tsRoot = false,
          tsOverride = "<W = any> { write?: (chunk: W, controller: WritableStreamDefaultController) => void | Promise<void>; start?: (controller: WritableStreamDefaultController) => void | Promise<void>; abort?: (reason: any) => void | Promise<void>; close?: () => void | Promise<void>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "UnderlyingSource",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "autoAllocateChunkSize",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "start",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "ReadableStreamDefaultController",
                                    fullyQualifiedName = "workerd::api::ReadableStreamDefaultController" ) ),
                                ( structure = (
                                    name = "ReadableByteStreamController",
                                    fullyQualifiedName = "workerd::api::ReadableByteStreamController" ) ) ] ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "pull",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( oneOf = (
                              variants = [
                                ( structure = (
                                    name = "ReadableStreamDefaultController",
                                    fullyQualifiedName = "workerd::api::ReadableStreamDefaultController" ) ),
                                ( structure = (
                                    name = "ReadableByteStreamController",
                                    fullyQualifiedName = "workerd::api::ReadableByteStreamController" ) ) ] ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cancel",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(unknown = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "expectedLength",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::UnderlyingSource",
          tsRoot = false,
          tsOverride = "<R = any> { type?: \"\" | undefined; autoAllocateChunkSize: never; start?: (controller: ReadableStreamDefaultController<R>) => void | Promise<void>; pull?: (controller: ReadableStreamDefaultController<R>) => void | Promise<void>; cancel?: (reason: any) => void | Promise<void>; }",
          tsDefine = "interface UnderlyingByteSource { type: \"bytes\"; autoAllocateChunkSize?: number; start?: (controller: ReadableByteStreamController) => void | Promise<void>; pull?: (controller: ReadableByteStreamController) => void | Promise<void>; cancel?: (reason: any) => void | Promise<void>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Transformer",
          members = [
            ( property = (
                name = "readableType",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "writableType",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "start",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "TransformStreamDefaultController",
                              fullyQualifiedName = "workerd::api::TransformStreamDefaultController" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "transform",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          (unknown = void),
                          ( structure = (
                              name = "TransformStreamDefaultController",
                              fullyQualifiedName = "workerd::api::TransformStreamDefaultController" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "flush",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [
                          ( structure = (
                              name = "TransformStreamDefaultController",
                              fullyQualifiedName = "workerd::api::TransformStreamDefaultController" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cancel",
                type = (
                  maybe = (
                    value = (
                      function = (
                        returnType = (
                          promise = (value = (voidt = void)) ),
                        args = [(unknown = void)] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "expectedLength",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Transformer",
          tsRoot = false,
          tsOverride = "<I = any, O = any> { start?: (controller: TransformStreamDefaultController<O>) => void | Promise<void>; transform?: (chunk: I, controller: TransformStreamDefaultController<O>) => void | Promise<void>; flush?: (controller: TransformStreamDefaultController<O>) => void | Promise<void>; cancel?: (reason: any) => void | Promise<void>; expectedLength?: number; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "PipeToOptions",
          members = [
            ( property = (
                name = "preventClose",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "preventAbort",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "preventCancel",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "signal",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "AbortSignal",
                        fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::PipeToOptions",
          tsRoot = false,
          tsOverride = "StreamPipeOptions",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadResult",
          members = [
            ( property = (
                name = "value",
                type = (
                  maybe = (value = (unknown = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadResult",
          tsRoot = false,
          tsOverride = "type ReadableStreamReadResult<R = any> = | { done: false, value: R; } | { done: true; value?: undefined; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableStream",
          members = [
            ( property = (
                name = "locked",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "cancel",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "getReader",
                returnType = (
                  oneOf = (
                    variants = [
                      ( structure = (
                          name = "ReadableStreamDefaultReader",
                          fullyQualifiedName = "workerd::api::ReadableStreamDefaultReader" ) ),
                      ( structure = (
                          name = "ReadableStreamBYOBReader",
                          fullyQualifiedName = "workerd::api::ReadableStreamBYOBReader" ) ) ] ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GetReaderOptions",
                          fullyQualifiedName = "workerd::api::ReadableStream::GetReaderOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "pipeThrough",
                returnType = (
                  structure = (
                    name = "ReadableStream",
                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "Transform",
                      fullyQualifiedName = "workerd::api::ReadableStream::Transform" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PipeToOptions",
                          fullyQualifiedName = "workerd::api::PipeToOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "pipeTo",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "WritableStream",
                      fullyQualifiedName = "workerd::api::WritableStream" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "PipeToOptions",
                          fullyQualifiedName = "workerd::api::PipeToOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "tee",
                returnType = (
                  array = (
                    element = (
                      structure = (
                        name = "ReadableStream",
                        fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "values",
                returnType = (
                  structure = (
                    name = "ReadableStreamAsyncIterator",
                    fullyQualifiedName = "workerd::api::ReadableStream::ReadableStreamAsyncIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ValuesOptions",
                          fullyQualifiedName = "workerd::api::ReadableStream::ValuesOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "from",
                returnType = (
                  structure = (
                    name = "ReadableStream",
                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (unknown = void),
                      name = "jsg::AsyncGenerator" ) ) ],
                static = true ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "UnderlyingSource",
                          fullyQualifiedName = "workerd::api::UnderlyingSource" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "StreamQueuingStrategy",
                          fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = true,
          fullyQualifiedName = "workerd::api::ReadableStream",
          asyncIterator = (
            name = "values",
            returnType = (
              structure = (
                name = "ReadableStreamAsyncIterator",
                fullyQualifiedName = "workerd::api::ReadableStream::ReadableStreamAsyncIterator" ) ),
            args = [
              ( jsgImpl = (type = jsgLock) ),
              ( maybe = (
                  value = (
                    structure = (
                      name = "ValuesOptions",
                      fullyQualifiedName = "workerd::api::ReadableStream::ValuesOptions" ) ),
                  name = "jsg::Optional" ) ) ],
            static = false ),
          tsRoot = false,
          tsOverride = "const ReadableStream: { prototype: ReadableStream; new (underlyingSource: UnderlyingByteSource, strategy?: QueuingStrategy<Uint8Array>): ReadableStream<Uint8Array>; new <R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>; }",
          tsDefine = "interface ReadableStream<R = any> { readonly locked: boolean; cancel(reason?: any): Promise<void>; getReader(): ReadableStreamDefaultReader<R>; getReader(options: ReadableStreamGetReaderOptions): ReadableStreamBYOBReader; pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>; pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>; tee(): [ReadableStream<R>, ReadableStream<R>]; values(options?: ReadableStreamValuesOptions): AsyncIterableIterator<R>; [Symbol.asyncIterator](options?: ReadableStreamValuesOptions): AsyncIterableIterator<R>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableStreamDefaultReader",
          members = [
            ( property = (
                name = "closed",
                type = (
                  promise = (value = (voidt = void)) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "cancel",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "read",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "ReadResult",
                        fullyQualifiedName = "workerd::api::ReadResult" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "releaseLock",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "ReadableStream",
                      fullyQualifiedName = "workerd::api::ReadableStream" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStreamDefaultReader",
          tsRoot = false,
          tsOverride = "<R = any> { read(): Promise<ReadableStreamReadResult<R>>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableStreamBYOBReader",
          members = [
            ( property = (
                name = "closed",
                type = (
                  promise = (value = (voidt = void)) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "cancel",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "read",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "ReadResult",
                        fullyQualifiedName = "workerd::api::ReadResult" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8ArrayBufferView) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "ReadableStreamBYOBReaderReadOptions",
                          fullyQualifiedName = "workerd::api::ReadableStreamBYOBReader::ReadableStreamBYOBReaderReadOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "releaseLock",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "readAtLeast",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "ReadResult",
                        fullyQualifiedName = "workerd::api::ReadResult" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (number = (name = "int")),
                  ( builtin = (type = v8ArrayBufferView) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "ReadableStream",
                      fullyQualifiedName = "workerd::api::ReadableStream" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStreamBYOBReader",
          tsRoot = false,
          tsOverride = "ReadableStreamBYOBReader { read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>; readAtLeast<T extends ArrayBufferView>(minElements: number, view: T): Promise<ReadableStreamReadResult<T>>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableStreamBYOBReaderReadOptions",
          members = [
            ( property = (
                name = "min",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStreamBYOBReader::ReadableStreamBYOBReaderReadOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GetReaderOptions",
          members = [
            ( property = (
                name = "mode",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStream::GetReaderOptions",
          tsRoot = false,
          tsOverride = "{ mode: \"byob\" }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableStreamBYOBRequest",
          members = [
            ( property = (
                name = "view",
                type = (
                  maybe = (
                    value = (
                      builtin = (type = v8Uint8Array) ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "respond",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (number = (name = "int")) ],
                static = false ) ),
            ( method = (
                name = "respondWithNewView",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = jsgBufferSource) ) ],
                static = false ) ),
            ( property = (
                name = "atLeast",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStreamBYOBRequest",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableStreamDefaultController",
          members = [
            ( property = (
                name = "desiredSize",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "close",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "enqueue",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "error",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStreamDefaultController",
          tsRoot = false,
          tsOverride = "<R = any> { enqueue(chunk?: R): void; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableByteStreamController",
          members = [
            ( property = (
                name = "byobRequest",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "ReadableStreamBYOBRequest",
                        fullyQualifiedName = "workerd::api::ReadableStreamBYOBRequest" ) ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "desiredSize",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "close",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "enqueue",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = jsgBufferSource) ) ],
                static = false ) ),
            ( method = (
                name = "error",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableByteStreamController",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "WritableStreamDefaultController",
          members = [
            ( property = (
                name = "signal",
                type = (
                  structure = (
                    name = "AbortSignal",
                    fullyQualifiedName = "workerd::api::AbortSignal" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "error",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WritableStreamDefaultController",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TransformStreamDefaultController",
          members = [
            ( property = (
                name = "desiredSize",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "enqueue",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ),
            ( method = (
                name = "error",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ),
            ( method = (
                name = "terminate",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TransformStreamDefaultController",
          tsRoot = false,
          tsOverride = "<O = any> { enqueue(chunk?: O): void; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Transform",
          members = [
            ( property = (
                name = "writable",
                type = (
                  structure = (
                    name = "WritableStream",
                    fullyQualifiedName = "workerd::api::WritableStream" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "readable",
                type = (
                  structure = (
                    name = "ReadableStream",
                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStream::Transform",
          tsRoot = false,
          tsOverride = "ReadableWritablePair<R = any, W = any> { readable: ReadableStream<R>; writable: WritableStream<W>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "WritableStream",
          members = [
            ( property = (
                name = "locked",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "abort",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "close",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "getWriter",
                returnType = (
                  structure = (
                    name = "WritableStreamDefaultWriter",
                    fullyQualifiedName = "workerd::api::WritableStreamDefaultWriter" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "UnderlyingSink",
                          fullyQualifiedName = "workerd::api::UnderlyingSink" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "StreamQueuingStrategy",
                          fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WritableStream",
          tsRoot = false,
          tsOverride = "<W = any> { getWriter(): WritableStreamDefaultWriter<W>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "WritableStreamDefaultWriter",
          members = [
            ( property = (
                name = "closed",
                type = (
                  promise = (value = (voidt = void)) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ready",
                type = (
                  promise = (value = (voidt = void)) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "desiredSize",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "abort",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "close",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "write",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ),
            ( method = (
                name = "releaseLock",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "WritableStream",
                      fullyQualifiedName = "workerd::api::WritableStream" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WritableStreamDefaultWriter",
          tsRoot = false,
          tsOverride = "<W = any> { write(chunk?: W): Promise<void>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "TransformStream",
          members = [
            ( property = (
                name = "readable",
                type = (
                  structure = (
                    name = "ReadableStream",
                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "writable",
                type = (
                  structure = (
                    name = "WritableStream",
                    fullyQualifiedName = "workerd::api::WritableStream" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "Transformer",
                          fullyQualifiedName = "workerd::api::Transformer" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "StreamQueuingStrategy",
                          fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "StreamQueuingStrategy",
                          fullyQualifiedName = "workerd::api::StreamQueuingStrategy" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TransformStream",
          tsRoot = false,
          tsOverride = "<I = any, O = any> { constructor(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>); readonly readable: ReadableStream<O>; readonly writable: WritableStream<I>; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "FixedLengthStream",
          members = [
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( number = (
                      name = "unsigned long long" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "QueuingStrategy",
                          fullyQualifiedName = "workerd::api::IdentityTransformStream::QueuingStrategy" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "IdentityTransformStream",
              fullyQualifiedName = "workerd::api::IdentityTransformStream" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::FixedLengthStream",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "IdentityTransformStream",
          members = [
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "QueuingStrategy",
                          fullyQualifiedName = "workerd::api::IdentityTransformStream::QueuingStrategy" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "TransformStream",
              fullyQualifiedName = "workerd::api::TransformStream" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::IdentityTransformStream",
          tsRoot = false,
          tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, Uint8Array>",
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueuingStrategy",
          members = [
            ( property = (
                name = "highWaterMark",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::IdentityTransformStream::QueuingStrategy",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ValuesOptions",
          members = [
            ( property = (
                name = "preventCancel",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ReadableStream::ValuesOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ReadableStreamAsyncIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "Value>>",
                        fullyQualifiedName = "workerd::jsg::AsyncIteratorImpl::Next<workerd::jsg::V8Ref<v8::Value>>" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "return",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "Value>>",
                        fullyQualifiedName = "workerd::jsg::AsyncIteratorImpl::Next<workerd::jsg::V8Ref<v8::Value>>" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kAsyncIteratorPrototype" ) ),
          iterable = false,
          asyncIterable = true,
          fullyQualifiedName = "workerd::api::ReadableStream::ReadableStreamAsyncIterator",
          asyncIterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Value>>",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (value = (unknown = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::AsyncIteratorImpl::Next<workerd::jsg::V8Ref<v8::Value>>",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "CompressionStream",
          members = [
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ] ) ) ],
          extends = (
            structure = (
              name = "TransformStream",
              fullyQualifiedName = "workerd::api::TransformStream" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CompressionStream",
          tsRoot = false,
          tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, Uint8Array> { constructor(format: \"gzip\" | \"deflate\" | \"deflate-raw\"); }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "DecompressionStream",
          members = [
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ] ) ) ],
          extends = (
            structure = (
              name = "TransformStream",
              fullyQualifiedName = "workerd::api::TransformStream" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::DecompressionStream",
          tsRoot = false,
          tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, Uint8Array> { constructor(format: \"gzip\" | \"deflate\" | \"deflate-raw\"); }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "TextEncoderStream",
          members = [
            ( property = (
                name = "encoding",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ) ] ) ) ],
          extends = (
            structure = (
              name = "TransformStream",
              fullyQualifiedName = "workerd::api::TransformStream" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextEncoderStream",
          tsRoot = false,
          tsOverride = "extends TransformStream<string, Uint8Array>",
          disposable = false,
          asyncDisposable = false ),
        ( name = "TextDecoderStream",
          members = [
            ( property = (
                name = "encoding",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "fatal",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "ignoreBOM",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "TextDecoderStreamInit",
                          fullyQualifiedName = "workerd::api::TextDecoderStream::TextDecoderStreamInit" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "TransformStream",
              fullyQualifiedName = "workerd::api::TransformStream" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextDecoderStream",
          tsRoot = false,
          tsOverride = "extends TransformStream<ArrayBuffer | ArrayBufferView, string>",
          disposable = false,
          asyncDisposable = false ),
        ( name = "TextDecoderStreamInit",
          members = [
            ( property = (
                name = "fatal",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ignoreBOM",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TextDecoderStream::TextDecoderStreamInit",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ByteLengthQueuingStrategy",
          members = [
            ( property = (
                name = "highWaterMark",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "size",
                type = (
                  function = (
                    returnType = (
                      maybe = (
                        value = (
                          number = (name = "unsigned int") ),
                        name = "jsg::Optional" ) ),
                    args = [
                      ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ] ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( constructor = (
                args = [
                  ( structure = (
                      name = "QueuingStrategyInit",
                      fullyQualifiedName = "workerd::api::QueuingStrategyInit" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ByteLengthQueuingStrategy",
          tsRoot = false,
          tsOverride = "implements QueuingStrategy<ArrayBufferView> { get size(): (chunk?: any) => number; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "CountQueuingStrategy",
          members = [
            ( property = (
                name = "highWaterMark",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "size",
                type = (
                  function = (
                    returnType = (
                      maybe = (
                        value = (
                          number = (name = "unsigned int") ),
                        name = "jsg::Optional" ) ),
                    args = [
                      ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ] ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( constructor = (
                args = [
                  ( structure = (
                      name = "QueuingStrategyInit",
                      fullyQualifiedName = "workerd::api::QueuingStrategyInit" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CountQueuingStrategy",
          tsRoot = false,
          tsOverride = "implements QueuingStrategy { get size(): (chunk?: any) => number; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueuingStrategyInit",
          members = [
            ( property = (
                name = "highWaterMark",
                type = (
                  number = (name = "double") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::QueuingStrategyInit",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "trace",
      structures = [
        ( name = "ScriptVersion",
          members = [
            ( property = (
                name = "id",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "tag",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "message",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ScriptVersion",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TailEvent",
          members = [
            ( property = (
                name = "events",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "TraceItem",
                        fullyQualifiedName = "workerd::api::TraceItem" ) ),
                    name = "kj::Array" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "traces",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "TraceItem",
                        fullyQualifiedName = "workerd::api::TraceItem" ) ),
                    name = "kj::Array" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          extends = (
            structure = (
              name = "ExtendableEvent",
              fullyQualifiedName = "workerd::api::ExtendableEvent" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TailEvent",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TraceItem",
          members = [
            ( property = (
                name = "event",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( structure = (
                              name = "FetchEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::FetchEventInfo" ) ),
                          ( structure = (
                              name = "JsRpcEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::JsRpcEventInfo" ) ),
                          ( structure = (
                              name = "ScheduledEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::ScheduledEventInfo" ) ),
                          ( structure = (
                              name = "AlarmEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::AlarmEventInfo" ) ),
                          ( structure = (
                              name = "QueueEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::QueueEventInfo" ) ),
                          ( structure = (
                              name = "EmailEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::EmailEventInfo" ) ),
                          ( structure = (
                              name = "TailEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::TailEventInfo" ) ),
                          ( structure = (
                              name = "CustomEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::CustomEventInfo" ) ),
                          ( structure = (
                              name = "HibernatableWebSocketEventInfo",
                              fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo" ) ) ] ) ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "eventTimestamp",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "logs",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "TraceLog",
                        fullyQualifiedName = "workerd::api::TraceLog" ) ),
                    name = "kj::ArrayPtr" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "exceptions",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "TraceException",
                        fullyQualifiedName = "workerd::api::TraceException" ) ),
                    name = "kj::ArrayPtr" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "diagnosticsChannelEvents",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "TraceDiagnosticChannelEvent",
                        fullyQualifiedName = "workerd::api::TraceDiagnosticChannelEvent" ) ),
                    name = "kj::ArrayPtr" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "scriptName",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "entrypoint",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "scriptVersion",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "ScriptVersion",
                        fullyQualifiedName = "workerd::api::ScriptVersion" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "dispatchNamespace",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "scriptTags",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::StringPtr") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "outcome",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AlarmEventInfo",
          members = [
            ( property = (
                name = "scheduledTime",
                type = (
                  builtin = (type = kjDate) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::AlarmEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "CustomEventInfo",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::CustomEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ScheduledEventInfo",
          members = [
            ( property = (
                name = "scheduledTime",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "cron",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::ScheduledEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "QueueEventInfo",
          members = [
            ( property = (
                name = "queue",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "batchSize",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::QueueEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "EmailEventInfo",
          members = [
            ( property = (
                name = "mailFrom",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "rcptTo",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "rawSize",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::EmailEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TailEventInfo",
          members = [
            ( property = (
                name = "consumedEvents",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "TailItem",
                        fullyQualifiedName = "workerd::api::TraceItem::TailEventInfo::TailItem" ) ),
                    name = "kj::Array" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::TailEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TailItem",
          members = [
            ( property = (
                name = "scriptName",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::TailEventInfo::TailItem",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "FetchEventInfo",
          members = [
            ( property = (
                name = "response",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "Response",
                        fullyQualifiedName = "workerd::api::TraceItem::FetchEventInfo::Response" ) ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "request",
                type = (
                  structure = (
                    name = "Request",
                    fullyQualifiedName = "workerd::api::TraceItem::FetchEventInfo::Request" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::FetchEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Request",
          members = [
            ( property = (
                name = "cf",
                type = (
                  maybe = (value = (object = void), name = "jsg::Optional") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "headers",
                type = (
                  dict = (
                    key = (
                      string = (name = "ByteString") ),
                    value = (
                      string = (name = "ByteString") ) ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "method",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "url",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( method = (
                name = "getUnredacted",
                returnType = (
                  structure = (
                    name = "Request",
                    fullyQualifiedName = "workerd::api::TraceItem::FetchEventInfo::Request" ) ),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::FetchEventInfo::Request",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Response",
          members = [
            ( property = (
                name = "status",
                type = (
                  number = (name = "unsigned short") ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::FetchEventInfo::Response",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "JsRpcEventInfo",
          members = [
            ( property = (
                name = "rpcMethod",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::JsRpcEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "HibernatableWebSocketEventInfo",
          members = [
            ( property = (
                name = "getWebSocketEvent",
                type = (
                  oneOf = (
                    variants = [
                      ( structure = (
                          name = "Message",
                          fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo::Message" ) ),
                      ( structure = (
                          name = "Close",
                          fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo::Close" ) ),
                      ( structure = (
                          name = "Error",
                          fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo::Error" ) ) ] ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Message",
          members = [
            ( property = (
                name = "webSocketEventType",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo::Message",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Close",
          members = [
            ( property = (
                name = "webSocketEventType",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "code",
                type = (
                  number = (name = "unsigned short") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "wasClean",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo::Close",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Error",
          members = [
            ( property = (
                name = "webSocketEventType",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceItem::HibernatableWebSocketEventInfo::Error",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TraceLog",
          members = [
            ( property = (
                name = "timestamp",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "level",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "message",
                type = (object = void),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceLog",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TraceException",
          members = [
            ( property = (
                name = "timestamp",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "message",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "name",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "stack",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "jsg::Optional" ) ),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceException",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TraceDiagnosticChannelEvent",
          members = [
            ( property = (
                name = "timestamp",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "channel",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = true,
                prototype = false ) ),
            ( property = (
                name = "message",
                type = (unknown = void),
                readonly = true,
                lazy = true,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceDiagnosticChannelEvent",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TraceMetrics",
          members = [
            ( property = (
                name = "cpuTime",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "wallTime",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TraceMetrics",
          tsRoot = true,
          disposable = false,
          asyncDisposable = false ),
        ( name = "UnsafeTraceMetrics",
          members = [
            ( method = (
                name = "fromTrace",
                returnType = (
                  structure = (
                    name = "TraceMetrics",
                    fullyQualifiedName = "workerd::api::TraceMetrics" ) ),
                args = [
                  ( structure = (
                      name = "TraceItem",
                      fullyQualifiedName = "workerd::api::TraceItem" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::UnsafeTraceMetrics",
          tsRoot = true,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "url",
      structures = [
        ( name = "URL",
          members = [
            ( property = (
                name = "href",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "origin",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "protocol",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "username",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "password",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "host",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hostname",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "port",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "pathname",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "search",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "searchParams",
                type = (
                  structure = (
                    name = "URLSearchParams",
                    fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( method = (
                name = "toString",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( method = (
                name = "toJSON",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( constructor = (
                args = [
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URL",
          tsRoot = false,
          tsOverride = "{ constructor(url: string | URL, base?: string | URL); }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "URLSearchParams",
          members = [
            ( property = (
                name = "size",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "append",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "getAll",
                returnType = (
                  array = (
                    element = (
                      string = (name = "kj::String") ),
                    name = "kj::Array" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "has",
                returnType = (boolt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "set",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "sort",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "entries",
                returnType = (
                  structure = (
                    name = "EntryIterator",
                    fullyQualifiedName = "workerd::api::URLSearchParams::EntryIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  structure = (
                    name = "KeyIterator",
                    fullyQualifiedName = "workerd::api::URLSearchParams::KeyIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "values",
                returnType = (
                  structure = (
                    name = "ValueIterator",
                    fullyQualifiedName = "workerd::api::URLSearchParams::ValueIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "forEach",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        ( string = (name = "kj::StringPtr") ),
                        ( string = (name = "kj::StringPtr") ),
                        ( structure = (
                            name = "URLSearchParams",
                            fullyQualifiedName = "workerd::api::URLSearchParams" ) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "toString",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( constructor = (
                args = [
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( structure = (
                                name = "URLSearchParams",
                                fullyQualifiedName = "workerd::api::URLSearchParams" ) ),
                            ( string = (name = "kj::String") ),
                            ( dict = (
                                key = (
                                  string = (name = "kj::String") ),
                                value = (
                                  string = (name = "kj::String") ) ) ),
                            ( array = (
                                element = (
                                  array = (
                                    element = (
                                      string = (name = "kj::String") ),
                                    name = "kj::Array" ) ),
                                name = "kj::Array" ) ) ] ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLSearchParams",
          iterator = (
            name = "entries",
            returnType = (
              structure = (
                name = "EntryIterator",
                fullyQualifiedName = "workerd::api::URLSearchParams::EntryIterator" ) ),
            args = [
              ( jsgImpl = (type = jsgLock) ) ],
            static = false ),
          tsRoot = false,
          tsOverride = "{ constructor(init?: URLSearchParams | string | Record<string, string> | [key: string, value: string][]); entries(): IterableIterator<[key: string, value: string]>; [Symbol.iterator](): IterableIterator<[key: string, value: string]>; forEach<This = unknown>(callback: (this: This, value: string, key: string, parent: URLSearchParams) => void, thisArg?: This): void; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "EntryIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::URLSearchParams::EntryIterator, kj::Array<kj::String>, workerd::api::URLSearchParams::IteratorState>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLSearchParams::EntryIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::String") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::URLSearchParams::EntryIterator, kj::Array<kj::String>, workerd::api::URLSearchParams::IteratorState>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "KeyIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::URLSearchParams::KeyIterator, kj::String, workerd::api::URLSearchParams::IteratorState>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLSearchParams::KeyIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::URLSearchParams::KeyIterator, kj::String, workerd::api::URLSearchParams::IteratorState>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ValueIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::URLSearchParams::ValueIterator, kj::String, workerd::api::URLSearchParams::IteratorState>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLSearchParams::ValueIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::URLSearchParams::ValueIterator, kj::String, workerd::api::URLSearchParams::IteratorState>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "url-standard",
      structures = [
        ( name = "URL",
          members = [
            ( property = (
                name = "origin",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::Array" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "href",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "protocol",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "username",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "password",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "host",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "hostname",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "port",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "pathname",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "search",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "hash",
                type = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "searchParams",
                type = (
                  structure = (
                    name = "URLSearchParams",
                    fullyQualifiedName = "workerd::api::url::URLSearchParams" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "toJSON",
                returnType = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "toString",
                returnType = (
                  array = (
                    element = (number = (name = "char")),
                    name = "kj::ArrayPtr" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "canParse",
                returnType = (boolt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = true ) ),
            ( method = (
                name = "parse",
                returnType = (
                  maybe = (
                    value = (
                      structure = (
                        name = "URL",
                        fullyQualifiedName = "workerd::api::url::URL" ) ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = true ) ),
            ( constructor = (
                args = [
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::url::URL",
          tsRoot = false,
          tsOverride = "URL { constructor(url: string | URL, base?: string | URL); }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "URLSearchParams",
          members = [
            ( property = (
                name = "size",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "append",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "delete",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  maybe = (
                    value = (
                      array = (
                        element = (number = (name = "char")),
                        name = "kj::ArrayPtr" ) ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "getAll",
                returnType = (
                  array = (
                    element = (
                      array = (
                        element = (number = (name = "char")),
                        name = "kj::ArrayPtr" ) ),
                    name = "kj::Array" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "has",
                returnType = (boolt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "set",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "sort",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "entries",
                returnType = (
                  structure = (
                    name = "EntryIterator",
                    fullyQualifiedName = "workerd::api::url::URLSearchParams::EntryIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  structure = (
                    name = "KeyIterator",
                    fullyQualifiedName = "workerd::api::url::URLSearchParams::KeyIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "values",
                returnType = (
                  structure = (
                    name = "ValueIterator",
                    fullyQualifiedName = "workerd::api::url::URLSearchParams::ValueIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "forEach",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        ( string = (name = "kj::StringPtr") ),
                        ( string = (name = "kj::StringPtr") ),
                        ( structure = (
                            name = "URLSearchParams",
                            fullyQualifiedName = "workerd::api::url::URLSearchParams" ) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ) ],
                static = false ) ),
            ( method = (
                name = "toString",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( constructor = (
                args = [
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( array = (
                                element = (
                                  array = (
                                    element = (
                                      string = (name = "kj::String") ),
                                    name = "jsg::Sequence" ) ),
                                name = "jsg::Sequence" ) ),
                            ( dict = (
                                key = (
                                  string = (name = "kj::String") ),
                                value = (
                                  string = (name = "kj::String") ) ) ),
                            ( string = (name = "kj::String") ) ] ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::url::URLSearchParams",
          iterator = (
            name = "entries",
            returnType = (
              structure = (
                name = "EntryIterator",
                fullyQualifiedName = "workerd::api::url::URLSearchParams::EntryIterator" ) ),
            args = [
              ( jsgImpl = (type = jsgLock) ) ],
            static = false ),
          tsRoot = false,
          tsOverride = "URLSearchParams { delete(name: string): void; has(name: string): boolean; entries(): IterableIterator<[key: string, value: string]>; [Symbol.iterator](): IterableIterator<[key: string, value: string]>; forEach<This = unknown>(callback: (this: This, value: string, key: string, parent: URLSearchParams) => void, thisArg?: This): void; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "EntryIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::url::URLSearchParams::EntryIterator, kj::Array<kj::ArrayPtr<char const>>, workerd::api::url::URLSearchParams::IteratorState<workerd::jsg::UrlSearchParams::EntryIterator>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::url::URLSearchParams::EntryIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          array = (
                            element = (number = (name = "char")),
                            name = "kj::ArrayPtr" ) ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::url::URLSearchParams::EntryIterator, kj::Array<kj::ArrayPtr<char const>>, workerd::api::url::URLSearchParams::IteratorState<workerd::jsg::UrlSearchParams::EntryIterator>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "KeyIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::url::URLSearchParams::KeyIterator, kj::ArrayPtr<char const>, workerd::api::url::URLSearchParams::IteratorState<workerd::jsg::UrlSearchParams::KeyIterator>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::url::URLSearchParams::KeyIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (number = (name = "char")),
                        name = "kj::ArrayPtr" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::url::URLSearchParams::KeyIterator, kj::ArrayPtr<char const>, workerd::api::url::URLSearchParams::IteratorState<workerd::jsg::UrlSearchParams::KeyIterator>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ValueIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::url::URLSearchParams::ValueIterator, kj::ArrayPtr<char const>, workerd::api::url::URLSearchParams::IteratorState<workerd::jsg::UrlSearchParams::ValueIterator>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::url::URLSearchParams::ValueIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (number = (name = "char")),
                        name = "kj::ArrayPtr" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::url::URLSearchParams::ValueIterator, kj::ArrayPtr<char const>, workerd::api::url::URLSearchParams::IteratorState<workerd::jsg::UrlSearchParams::ValueIterator>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "url-pattern",
      structures = [
        ( name = "URLPattern",
          members = [
            ( property = (
                name = "protocol",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "username",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "password",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "hostname",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "port",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "pathname",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "search",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "hash",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "test",
                returnType = (boolt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( string = (name = "kj::String") ),
                            ( structure = (
                                name = "URLPatternInit",
                                fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit" ) ) ] ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "exec",
                returnType = (
                  maybe = (
                    value = (
                      structure = (
                        name = "URLPatternResult",
                        fullyQualifiedName = "workerd::api::URLPattern::URLPatternResult" ) ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( string = (name = "kj::String") ),
                            ( structure = (
                                name = "URLPatternInit",
                                fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit" ) ) ] ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( string = (name = "kj::String") ),
                            ( structure = (
                                name = "URLPatternInit",
                                fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit" ) ) ] ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "URLPatternOptions",
                          fullyQualifiedName = "workerd::api::URLPattern::URLPatternOptions" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLPattern",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "URLPatternInit",
          members = [
            ( property = (
                name = "protocol",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "username",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "password",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hostname",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "port",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "pathname",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "search",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "baseURL",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "URLPatternComponentResult",
          members = [
            ( property = (
                name = "input",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "groups",
                type = (
                  dict = (
                    key = (
                      string = (name = "kj::String") ),
                    value = (
                      string = (name = "kj::String") ) ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "URLPatternResult",
          members = [
            ( property = (
                name = "inputs",
                type = (
                  array = (
                    element = (
                      oneOf = (
                        variants = [
                          ( string = (name = "kj::String") ),
                          ( structure = (
                              name = "URLPatternInit",
                              fullyQualifiedName = "workerd::api::URLPattern::URLPatternInit" ) ) ] ) ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "protocol",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "username",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "password",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hostname",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "port",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "pathname",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "search",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hash",
                type = (
                  structure = (
                    name = "URLPatternComponentResult",
                    fullyQualifiedName = "workerd::api::URLPattern::URLPatternComponentResult" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLPattern::URLPatternResult",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "URLPatternOptions",
          members = [
            ( property = (
                name = "ignoreCase",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::URLPattern::URLPatternOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "websocket",
      structures = [
        ( name = "CloseEvent",
          members = [
            ( property = (
                name = "code",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "reason",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "wasClean",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "Initializer",
                          fullyQualifiedName = "workerd::api::CloseEvent::Initializer" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "Event",
              fullyQualifiedName = "workerd::api::Event" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CloseEvent",
          tsRoot = true,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Initializer",
          members = [
            ( property = (
                name = "code",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "reason",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "wasClean",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::CloseEvent::Initializer",
          tsRoot = false,
          tsOverride = "CloseEventInit",
          disposable = false,
          asyncDisposable = false ),
        ( name = "MessageEvent",
          members = [
            ( property = (
                name = "data",
                type = (unknown = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "origin",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lastEventId",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "source",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "ports",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( structure = (
                      name = "Initializer",
                      fullyQualifiedName = "workerd::api::MessageEvent::Initializer" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "Event",
              fullyQualifiedName = "workerd::api::Event" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::MessageEvent",
          tsRoot = true,
          tsOverride = "{ readonly data: ArrayBuffer | string; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Initializer",
          members = [
            ( property = (
                name = "data",
                type = (unknown = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::MessageEvent::Initializer",
          tsRoot = false,
          tsOverride = "MessageEventInit { data: ArrayBuffer | string; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "ErrorEvent",
          members = [
            ( property = (
                name = "filename",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "message",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lineno",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "colno",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "error",
                type = (unknown = void),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          extends = (
            structure = (
              name = "Event",
              fullyQualifiedName = "workerd::api::Event" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::ErrorEvent",
          tsRoot = true,
          disposable = false,
          asyncDisposable = false ),
        ( name = "WebSocket",
          members = [
            ( method = (
                name = "accept",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "send",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        ( string = (name = "kj::String") ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "close",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (number = (name = "int")),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "serializeAttachment",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ),
            ( method = (
                name = "deserializeAttachment",
                returnType = (
                  maybe = (value = (unknown = void), name = "kj::Maybe") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( constant = (
                name = "READY_STATE_CONNECTING",
                value = 0 ) ),
            ( constant = (name = "CONNECTING", value = 0) ),
            ( constant = (
                name = "READY_STATE_OPEN",
                value = 1 ) ),
            ( constant = (name = "OPEN", value = 1) ),
            ( constant = (
                name = "READY_STATE_CLOSING",
                value = 2 ) ),
            ( constant = (name = "CLOSING", value = 2) ),
            ( constant = (
                name = "READY_STATE_CLOSED",
                value = 3 ) ),
            ( constant = (name = "CLOSED", value = 3) ),
            ( property = (
                name = "readyState",
                type = (number = (name = "int")),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "url",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "protocol",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "extensions",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Maybe" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        oneOf = (
                          variants = [
                            ( array = (
                                element = (
                                  string = (name = "kj::String") ),
                                name = "kj::Array" ) ),
                            ( string = (name = "kj::String") ) ] ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          extends = (
            structure = (
              name = "EventTarget",
              fullyQualifiedName = "workerd::api::EventTarget" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WebSocket",
          tsRoot = false,
          tsOverride = "extends EventTarget<WebSocketEventMap>",
          tsDefine = "type WebSocketEventMap = { close: CloseEvent; message: MessageEvent; open: Event; error: ErrorEvent; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "WebSocketPair",
          members = [
            ( property = (
                name = "0",
                type = (
                  structure = (
                    name = "WebSocket",
                    fullyQualifiedName = "workerd::api::WebSocket" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "1",
                type = (
                  structure = (
                    name = "WebSocket",
                    fullyQualifiedName = "workerd::api::WebSocket" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constructor = (args = []) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::WebSocketPair",
          tsRoot = false,
          tsOverride = "const WebSocketPair: { new (): { 0: WebSocket; 1: WebSocket }; }",
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "sql",
      structures = [
        ( name = "SqlStorage",
          members = [
            ( method = (
                name = "exec",
                returnType = (
                  structure = (
                    name = "Cursor",
                    fullyQualifiedName = "workerd::api::SqlStorage::Cursor" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( jsgImpl = (type = jsgVarargs) ) ],
                static = false ) ),
            ( method = (
                name = "prepare",
                returnType = (
                  structure = (
                    name = "Statement",
                    fullyQualifiedName = "workerd::api::SqlStorage::Statement" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( property = (
                name = "databaseSize",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( nested = (
                structure = (
                  name = "Cursor",
                  members = [
                    ( method = (
                        name = "raw",
                        returnType = (
                          structure = (
                            name = "RawIterator",
                            fullyQualifiedName = "workerd::api::SqlStorage::Cursor::RawIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( property = (
                        name = "columnNames",
                        type = (
                          array = (
                            element = (
                              string = (name = "jsg::JsString") ),
                            name = "kj::Array" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "rowsRead",
                        type = (
                          number = (name = "double") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "rowsWritten",
                        type = (
                          number = (name = "double") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ) ],
                  iterable = true,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::SqlStorage::Cursor",
                  iterator = (
                    name = "rows",
                    returnType = (
                      structure = (
                        name = "RowIterator",
                        fullyQualifiedName = "workerd::api::SqlStorage::Cursor::RowIterator" ) ),
                    args = [
                      ( jsgImpl = (type = jsgLock) ) ],
                    static = false ),
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "Cursor" ) ),
            ( nested = (
                structure = (
                  name = "Statement",
                  members = [],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::SqlStorage::Statement",
                  tsRoot = false,
                  callable = (
                    returnType = (
                      structure = (
                        name = "Cursor",
                        fullyQualifiedName = "workerd::api::SqlStorage::Cursor" ) ),
                    args = [
                      ( jsgImpl = (type = jsgVarargs) ) ] ),
                  disposable = false,
                  asyncDisposable = false ),
                name = "Statement" ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SqlStorage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Statement",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SqlStorage::Statement",
          tsRoot = false,
          callable = (
            returnType = (
              structure = (
                name = "Cursor",
                fullyQualifiedName = "workerd::api::SqlStorage::Cursor" ) ),
            args = [
              ( jsgImpl = (type = jsgVarargs) ) ] ),
          disposable = false,
          asyncDisposable = false ),
        ( name = "Cursor",
          members = [
            ( method = (
                name = "raw",
                returnType = (
                  structure = (
                    name = "RawIterator",
                    fullyQualifiedName = "workerd::api::SqlStorage::Cursor::RawIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( property = (
                name = "columnNames",
                type = (
                  array = (
                    element = (
                      string = (name = "jsg::JsString") ),
                    name = "kj::Array" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "rowsRead",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "rowsWritten",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SqlStorage::Cursor",
          iterator = (
            name = "rows",
            returnType = (
              structure = (
                name = "RowIterator",
                fullyQualifiedName = "workerd::api::SqlStorage::Cursor::RowIterator" ) ),
            args = [
              ( jsgImpl = (type = jsgLock) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "RowIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::SqlStorage::Cursor::RowIterator, workerd::jsg::Dict<kj::Maybe<kj::OneOf<kj::Array<unsigned char>, kj::StringPtr, double>>, workerd::jsg::JsString>, workerd::jsg::Ref<workerd::api::SqlStorage::Cursor>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SqlStorage::Cursor::RowIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "jsg::JsString") ),
                        value = (
                          maybe = (
                            value = (
                              oneOf = (
                                variants = [
                                  ( array = (
                                      element = (
                                        number = (name = "unsigned char") ),
                                      name = "kj::Array" ) ),
                                  ( string = (name = "kj::StringPtr") ),
                                  ( number = (name = "double") ) ] ) ),
                            name = "kj::Maybe" ) ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::SqlStorage::Cursor::RowIterator, workerd::jsg::Dict<kj::Maybe<kj::OneOf<kj::Array<unsigned char>, kj::StringPtr, double>>, workerd::jsg::JsString>, workerd::jsg::Ref<workerd::api::SqlStorage::Cursor>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "RawIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::SqlStorage::Cursor::RawIterator, kj::Array<kj::Maybe<kj::OneOf<kj::Array<unsigned char>, kj::StringPtr, double>>>, workerd::jsg::Ref<workerd::api::SqlStorage::Cursor>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SqlStorage::Cursor::RawIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          maybe = (
                            value = (
                              oneOf = (
                                variants = [
                                  ( array = (
                                      element = (
                                        number = (name = "unsigned char") ),
                                      name = "kj::Array" ) ),
                                  ( string = (name = "kj::StringPtr") ),
                                  ( number = (name = "double") ) ] ) ),
                            name = "kj::Maybe" ) ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::SqlStorage::Cursor::RawIterator, kj::Array<kj::Maybe<kj::OneOf<kj::Array<unsigned char>, kj::StringPtr, double>>>, workerd::jsg::Ref<workerd::api::SqlStorage::Cursor>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "sockets",
      structures = [
        ( name = "Socket",
          members = [
            ( property = (
                name = "readable",
                type = (
                  structure = (
                    name = "ReadableStream",
                    fullyQualifiedName = "workerd::api::ReadableStream" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "writable",
                type = (
                  structure = (
                    name = "WritableStream",
                    fullyQualifiedName = "workerd::api::WritableStream" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "closed",
                type = (
                  promise = (value = (voidt = void)) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "opened",
                type = (
                  promise = (
                    value = (
                      structure = (
                        name = "SocketInfo",
                        fullyQualifiedName = "workerd::api::SocketInfo" ) ) ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "close",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "startTls",
                returnType = (
                  structure = (
                    name = "Socket",
                    fullyQualifiedName = "workerd::api::Socket" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "TlsOptions",
                          fullyQualifiedName = "workerd::api::TlsOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::Socket",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "SocketOptions",
          members = [
            ( property = (
                name = "secureTransport",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "allowHalfOpen",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SocketOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "SocketAddress",
          members = [
            ( property = (
                name = "hostname",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "port",
                type = (
                  number = (name = "unsigned short") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SocketAddress",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "TlsOptions",
          members = [
            ( property = (
                name = "expectedServerHostname",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::TlsOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "SocketsModule",
          members = [
            ( method = (
                name = "connect",
                returnType = (
                  structure = (
                    name = "Socket",
                    fullyQualifiedName = "workerd::api::Socket" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( structure = (
                            name = "SocketAddress",
                            fullyQualifiedName = "workerd::api::SocketAddress" ) ),
                        ( string = (name = "kj::String") ) ] ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "SocketOptions",
                          fullyQualifiedName = "workerd::api::SocketOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SocketsModule",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "SocketInfo",
          members = [
            ( property = (
                name = "remoteAddress",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "localAddress",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::SocketInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "node",
      structures = [
        ( name = "CompatibilityFlags",
          members = [
            ( property = (
                name = "formDataParserSupportsFiles",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "fetchRefusesUnknownProtocols",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "esiIncludeIsVoidTag",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "obsolete3",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "durableObjectFetchRequiresSchemeAuthority",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "streamsByobReaderDetachesBuffer",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "streamsJavaScriptControllers",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "jsgPropertyOnPrototypeTemplate",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "minimalSubrequests",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noCotsOnExternalFetch",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "specCompliantUrl",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "globalNavigator",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "captureThrowsAsRejections",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "r2PublicBetaApi",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "obsolete14",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noSubstituteNull",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "transformStreamJavaScriptControllers",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "r2ListHonorIncludeFields",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "exportCommonJsDefaultNamespace",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "obsolete19",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "webSocketCompression",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "nodeJsCompat",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "obsolete22",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "specCompliantResponseRedirect",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "workerdExperimental",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "durableObjectGetExisting",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "httpHeadersGetSetCookie",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "dispatchExceptionTunneling",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "serviceBindingExtraHandlers",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noCfBotManagementDefault",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "urlSearchParamsDeleteHasValueArg",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "strictCompression",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "brotliContentEncoding",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "strictCrypto",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "rttiApi",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "webgpu",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cryptoPreservePublicExponent",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "vectorizeQueryMetadataOptional",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "unsafeModule",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "jsRpc",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "noImportScripts",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "nodeJsAls",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "queuesJsonMessages",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "pythonWorkers",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "fetcherNoGetPutDelete",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "unwrapCustomThenables",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "fetcherRpc",
                type = (boolt = void),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CompatibilityFlags",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "BufferUtil",
          members = [
            ( method = (
                name = "byteLength",
                returnType = (
                  number = (name = "unsigned int") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "jsg::JsString") ) ],
                static = false ) ),
            ( method = (
                name = "compare",
                returnType = (number = (name = "int")),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "CompareOptions",
                          fullyQualifiedName = "workerd::api::node::BufferUtil::CompareOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "concat",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        array = (
                          element = (
                            number = (name = "unsigned char") ),
                          name = "kj::Array" ) ),
                      name = "kj::Array" ) ),
                  ( number = (name = "unsigned int") ) ],
                static = false ) ),
            ( method = (
                name = "decodeString",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "jsg::JsString") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "fillImpl",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "jsg::JsString") ),
                        ( builtin = (type = jsgBufferSource) ) ] ) ),
                  ( number = (name = "unsigned int") ),
                  ( number = (name = "unsigned int") ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "indexOf",
                returnType = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( oneOf = (
                      variants = [
                        ( string = (name = "jsg::JsString") ),
                        ( builtin = (type = jsgBufferSource) ) ] ) ),
                  (number = (name = "int")),
                  ( string = (name = "kj::String") ),
                  (boolt = void) ],
                static = false ) ),
            ( method = (
                name = "swap",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  (number = (name = "int")) ],
                static = false ) ),
            ( method = (
                name = "toString",
                returnType = (
                  string = (name = "jsg::JsString") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( number = (name = "unsigned int") ),
                  ( number = (name = "unsigned int") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "write",
                returnType = (
                  number = (name = "unsigned int") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( string = (name = "jsg::JsString") ),
                  ( number = (name = "unsigned int") ),
                  ( number = (name = "unsigned int") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "decode",
                returnType = (
                  string = (name = "jsg::JsString") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "flush",
                returnType = (
                  string = (name = "jsg::JsString") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::BufferUtil",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "CompareOptions",
          members = [
            ( property = (
                name = "aStart",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "aEnd",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "bStart",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "bEnd",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::BufferUtil::CompareOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "CryptoImpl",
          members = [
            ( nested = (
                structure = (
                  name = "DiffieHellmanHandle",
                  members = [
                    ( method = (
                        name = "setPublicKey",
                        returnType = (voidt = void),
                        args = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "setPrivateKey",
                        returnType = (voidt = void),
                        args = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "getPublicKey",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "getPrivateKey",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "getGenerator",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "getPrime",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "computeSecret",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "generateKeys",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "getVerifyError",
                        returnType = (number = (name = "int")),
                        args = [],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( oneOf = (
                              variants = [
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                (number = (name = "int")) ] ) ),
                          ( oneOf = (
                              variants = [
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                (number = (name = "int")) ] ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::CryptoImpl::DiffieHellmanHandle",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "DiffieHellmanHandle" ) ),
            ( method = (
                name = "DiffieHellmanGroupHandle",
                returnType = (
                  structure = (
                    name = "DiffieHellmanHandle",
                    fullyQualifiedName = "workerd::api::node::CryptoImpl::DiffieHellmanHandle" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "randomPrime",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( number = (name = "unsigned int") ),
                  (boolt = void),
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            number = (name = "unsigned char") ),
                          name = "kj::Array" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            number = (name = "unsigned char") ),
                          name = "kj::Array" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "checkPrimeSync",
                returnType = (boolt = void),
                args = [
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( number = (name = "unsigned int") ) ],
                static = false ) ),
            ( nested = (
                structure = (
                  name = "HashHandle",
                  members = [
                    ( method = (
                        name = "update",
                        returnType = (number = (name = "int")),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "digest",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "copy",
                        returnType = (
                          structure = (
                            name = "HashHandle",
                            fullyQualifiedName = "workerd::api::node::CryptoImpl::HashHandle" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                number = (name = "unsigned int") ),
                              name = "kj::Maybe" ) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( maybe = (
                              value = (
                                number = (name = "unsigned int") ),
                              name = "kj::Maybe" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::CryptoImpl::HashHandle",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "HashHandle" ) ),
            ( nested = (
                structure = (
                  name = "HmacHandle",
                  members = [
                    ( method = (
                        name = "update",
                        returnType = (number = (name = "int")),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( array = (
                              element = (
                                number = (name = "unsigned char") ),
                              name = "kj::Array" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "digest",
                        returnType = (
                          array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( string = (name = "kj::String") ),
                          ( oneOf = (
                              variants = [
                                ( array = (
                                    element = (
                                      number = (name = "unsigned char") ),
                                    name = "kj::Array" ) ),
                                ( structure = (
                                    name = "CryptoKey",
                                    fullyQualifiedName = "workerd::api::CryptoKey" ) ) ] ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::CryptoImpl::HmacHandle",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "HmacHandle" ) ),
            ( method = (
                name = "getHkdf",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( string = (name = "kj::String") ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( number = (name = "unsigned int") ) ],
                static = false ) ),
            ( method = (
                name = "getPbkdf",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ),
                  ( number = (name = "unsigned int") ),
                  ( number = (name = "unsigned int") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "exportKey",
                returnType = (
                  oneOf = (
                    variants = [
                      ( string = (name = "kj::String") ),
                      ( array = (
                          element = (
                            number = (name = "unsigned char") ),
                          name = "kj::Array" ) ),
                      ( structure = (
                          name = "JsonWebKey",
                          fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey" ) ) ] ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "KeyExportOptions",
                          fullyQualifiedName = "workerd::api::node::CryptoImpl::KeyExportOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "equals",
                returnType = (boolt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ) ],
                static = false ) ),
            ( method = (
                name = "getAsymmetricKeyDetail",
                returnType = (
                  structure = (
                    name = "AsymmetricKeyDetails",
                    fullyQualifiedName = "workerd::api::CryptoKey::AsymmetricKeyDetails" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ) ],
                static = false ) ),
            ( method = (
                name = "getAsymmetricKeyType",
                returnType = (
                  string = (name = "kj::StringPtr") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "CryptoKey",
                      fullyQualifiedName = "workerd::api::CryptoKey" ) ) ],
                static = false ) ),
            ( method = (
                name = "createSecretKey",
                returnType = (
                  structure = (
                    name = "CryptoKey",
                    fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "createPrivateKey",
                returnType = (
                  structure = (
                    name = "CryptoKey",
                    fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "CreateAsymmetricKeyOptions",
                      fullyQualifiedName = "workerd::api::node::CryptoImpl::CreateAsymmetricKeyOptions" ) ) ],
                static = false ) ),
            ( method = (
                name = "createPublicKey",
                returnType = (
                  structure = (
                    name = "CryptoKey",
                    fullyQualifiedName = "workerd::api::CryptoKey" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "CreateAsymmetricKeyOptions",
                      fullyQualifiedName = "workerd::api::node::CryptoImpl::CreateAsymmetricKeyOptions" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CryptoImpl",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "DiffieHellmanHandle",
          members = [
            ( method = (
                name = "setPublicKey",
                returnType = (voidt = void),
                args = [
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "setPrivateKey",
                returnType = (voidt = void),
                args = [
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "getPublicKey",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "getPrivateKey",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "getGenerator",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "getPrime",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "computeSecret",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "generateKeys",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "getVerifyError",
                returnType = (number = (name = "int")),
                args = [],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        (number = (name = "int")) ] ) ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        (number = (name = "int")) ] ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CryptoImpl::DiffieHellmanHandle",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "HashHandle",
          members = [
            ( method = (
                name = "update",
                returnType = (number = (name = "int")),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "digest",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "copy",
                returnType = (
                  structure = (
                    name = "HashHandle",
                    fullyQualifiedName = "workerd::api::node::CryptoImpl::HashHandle" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "kj::Maybe" ) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "kj::Maybe" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CryptoImpl::HashHandle",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "HmacHandle",
          members = [
            ( method = (
                name = "update",
                returnType = (number = (name = "int")),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( array = (
                      element = (
                        number = (name = "unsigned char") ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "digest",
                returnType = (
                  array = (
                    element = (
                      number = (name = "unsigned char") ),
                    name = "kj::Array" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( string = (name = "kj::String") ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned char") ),
                            name = "kj::Array" ) ),
                        ( structure = (
                            name = "CryptoKey",
                            fullyQualifiedName = "workerd::api::CryptoKey" ) ) ] ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CryptoImpl::HmacHandle",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "KeyExportOptions",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "format",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cipher",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "passphrase",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CryptoImpl::KeyExportOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GenerateKeyPairOptions",
          members = [
            ( property = (
                name = "modulusLength",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "publicExponent",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hashAlgorithm",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mgf1HashAlgorithm",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "saltLength",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "divisorLength",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "namedCurve",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "prime",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "primeLength",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "generator",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "groupName",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "paramEncoding",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "publicKeyEncoding",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "KeyExportOptions",
                        fullyQualifiedName = "workerd::api::node::CryptoImpl::KeyExportOptions" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "privateKeyEncoding",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "KeyExportOptions",
                        fullyQualifiedName = "workerd::api::node::CryptoImpl::KeyExportOptions" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CryptoImpl::GenerateKeyPairOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "CreateAsymmetricKeyOptions",
          members = [
            ( property = (
                name = "key",
                type = (
                  oneOf = (
                    variants = [
                      ( array = (
                          element = (
                            number = (name = "unsigned char") ),
                          name = "kj::Array" ) ),
                      ( structure = (
                          name = "JsonWebKey",
                          fullyQualifiedName = "workerd::api::SubtleCrypto::JsonWebKey" ) ),
                      ( structure = (
                          name = "CryptoKey",
                          fullyQualifiedName = "workerd::api::CryptoKey" ) ) ] ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "format",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "passphrase",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          number = (name = "unsigned char") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::CryptoImpl::CreateAsymmetricKeyOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Channel",
          members = [
            ( method = (
                name = "hasSubscribers",
                returnType = (boolt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "publish",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ),
            ( method = (
                name = "subscribe",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        (unknown = void),
                        ( jsgImpl = (type = jsgName) ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "unsubscribe",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        (unknown = void),
                        ( jsgImpl = (type = jsgName) ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "bindStore",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "AsyncLocalStorage",
                      fullyQualifiedName = "workerd::api::node::AsyncLocalStorage" ) ),
                  ( maybe = (
                      value = (
                        function = (
                          returnType = (unknown = void),
                          args = [(unknown = void)] ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "unbindStore",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "AsyncLocalStorage",
                      fullyQualifiedName = "workerd::api::node::AsyncLocalStorage" ) ) ],
                static = false ) ),
            ( method = (
                name = "runStores",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void),
                  ( function = (
                      returnType = (unknown = void),
                      args = [
                        ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                  ( jsgImpl = (type = jsgVarargs) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::Channel",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "DiagnosticsChannelModule",
          members = [
            ( method = (
                name = "hasSubscribers",
                returnType = (boolt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( jsgImpl = (type = jsgName) ) ],
                static = false ) ),
            ( method = (
                name = "channel",
                returnType = (
                  structure = (
                    name = "Channel",
                    fullyQualifiedName = "workerd::api::node::Channel" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( jsgImpl = (type = jsgName) ) ],
                static = false ) ),
            ( method = (
                name = "subscribe",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( jsgImpl = (type = jsgName) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        (unknown = void),
                        ( jsgImpl = (type = jsgName) ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "unsubscribe",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( jsgImpl = (type = jsgName) ),
                  ( function = (
                      returnType = (voidt = void),
                      args = [
                        (unknown = void),
                        ( jsgImpl = (type = jsgName) ) ] ) ) ],
                static = false ) ),
            ( nested = (
                structure = (
                  name = "Channel",
                  members = [
                    ( method = (
                        name = "hasSubscribers",
                        returnType = (boolt = void),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "publish",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (unknown = void) ],
                        static = false ) ),
                    ( method = (
                        name = "subscribe",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( function = (
                              returnType = (voidt = void),
                              args = [
                                (unknown = void),
                                ( jsgImpl = (type = jsgName) ) ] ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "unsubscribe",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( function = (
                              returnType = (voidt = void),
                              args = [
                                (unknown = void),
                                ( jsgImpl = (type = jsgName) ) ] ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "bindStore",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "AsyncLocalStorage",
                              fullyQualifiedName = "workerd::api::node::AsyncLocalStorage" ) ),
                          ( maybe = (
                              value = (
                                function = (
                                  returnType = (unknown = void),
                                  args = [(unknown = void)] ) ),
                              name = "jsg::Optional" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "unbindStore",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( structure = (
                              name = "AsyncLocalStorage",
                              fullyQualifiedName = "workerd::api::node::AsyncLocalStorage" ) ) ],
                        static = false ) ),
                    ( method = (
                        name = "runStores",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (unknown = void),
                          ( function = (
                              returnType = (unknown = void),
                              args = [
                                ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                          ( jsgImpl = (type = jsgVarargs) ) ],
                        static = false ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::Channel",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "Channel" ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::DiagnosticsChannelModule",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AsyncHooksModule",
          members = [
            ( nested = (
                structure = (
                  name = "AsyncLocalStorage",
                  members = [
                    ( method = (
                        name = "run",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (unknown = void),
                          ( function = (
                              returnType = (unknown = void),
                              args = [
                                ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                          ( jsgImpl = (type = jsgVarargs) ) ],
                        static = false ) ),
                    ( method = (
                        name = "exit",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( function = (
                              returnType = (unknown = void),
                              args = [
                                ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                          ( jsgImpl = (type = jsgVarargs) ) ],
                        static = false ) ),
                    ( method = (
                        name = "getStore",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "enterWith",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          (unknown = void) ],
                        static = false ) ),
                    ( method = (
                        name = "disable",
                        returnType = (voidt = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "bind",
                        returnType = (
                          builtin = (type = v8Function) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ) ],
                        static = true ) ),
                    ( method = (
                        name = "snapshot",
                        returnType = (
                          builtin = (type = v8Function) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = true ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::AsyncLocalStorage",
                  tsRoot = false,
                  tsOverride = "AsyncLocalStorage<T> { getStore(): T | undefined; run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R; exit<R, TArgs extends any[]>(callback: (...args: TArgs) => R, ...args: TArgs): R; enterWith(store: T): never; disable(): never; static bind<Func extends (...args: any[]) => any>(fn: Func): Func; static snapshot<R, TArgs extends any[]>(): (fn: (...args: TArgs) => R, ...args: TArgs) => R; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "AsyncLocalStorage" ) ),
            ( nested = (
                structure = (
                  name = "AsyncResource",
                  members = [
                    ( method = (
                        name = "bind",
                        returnType = (
                          builtin = (type = v8Function) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                          ( jsgImpl = (type = jsgTypeHandler) ) ],
                        static = true ) ),
                    ( method = (
                        name = "asyncId",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "triggerAsyncId",
                        returnType = (
                          jsgImpl = (type = jsgUnimplemented) ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "bind",
                        returnType = (
                          builtin = (type = v8Function) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( builtin = (type = v8Function) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                          ( jsgImpl = (type = jsgTypeHandler) ) ],
                        static = false ) ),
                    ( method = (
                        name = "runInAsyncScope",
                        returnType = (unknown = void),
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( function = (
                              returnType = (unknown = void),
                              args = [
                                ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                          ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                          ( jsgImpl = (type = jsgVarargs) ) ],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( jsgImpl = (type = jsgLock) ),
                          ( maybe = (
                              value = (
                                string = (name = "kj::String") ),
                              name = "jsg::Optional" ) ),
                          ( maybe = (
                              value = (
                                structure = (
                                  name = "Options",
                                  fullyQualifiedName = "workerd::api::node::AsyncResource::Options" ) ),
                              name = "jsg::Optional" ) ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::AsyncResource",
                  tsRoot = false,
                  tsOverride = "AsyncResource { constructor(type: string, options?: AsyncResourceOptions); static bind<Func extends (this: ThisArg, ...args: any[]) => any, ThisArg>(fn: Func, type?: string, thisArg?: ThisArg): Func; bind<Func extends (...args: any[]) => any>(fn: Func): Func; runInAsyncScope<This, Result>(fn: (this: This, ...args: any[]) => Result, thisArg?: This, ...args: any[]): Result; }",
                  disposable = false,
                  asyncDisposable = false ),
                name = "AsyncResource" ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::AsyncHooksModule",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AsyncResource",
          members = [
            ( method = (
                name = "bind",
                returnType = (
                  builtin = (type = v8Function) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = true ) ),
            ( method = (
                name = "asyncId",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "triggerAsyncId",
                returnType = (
                  jsgImpl = (type = jsgUnimplemented) ),
                args = [],
                static = false ) ),
            ( method = (
                name = "bind",
                returnType = (
                  builtin = (type = v8Function) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                  ( jsgImpl = (type = jsgTypeHandler) ) ],
                static = false ) ),
            ( method = (
                name = "runInAsyncScope",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (unknown = void),
                      args = [
                        ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                  ( maybe = (value = (unknown = void), name = "jsg::Optional") ),
                  ( jsgImpl = (type = jsgVarargs) ) ],
                static = false ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        string = (name = "kj::String") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "Options",
                          fullyQualifiedName = "workerd::api::node::AsyncResource::Options" ) ),
                      name = "jsg::Optional" ) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::AsyncResource",
          tsRoot = false,
          tsOverride = "AsyncResource { constructor(type: string, options?: AsyncResourceOptions); static bind<Func extends (this: ThisArg, ...args: any[]) => any, ThisArg>(fn: Func, type?: string, thisArg?: ThisArg): Func; bind<Func extends (...args: any[]) => any>(fn: Func): Func; runInAsyncScope<This, Result>(fn: (this: This, ...args: any[]) => Result, thisArg?: This, ...args: any[]): Result; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "Options",
          members = [
            ( property = (
                name = "triggerAsyncId",
                type = (
                  jsgImpl = (type = jsgUnimplemented) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::AsyncResource::Options",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "AsyncLocalStorage",
          members = [
            ( method = (
                name = "run",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void),
                  ( function = (
                      returnType = (unknown = void),
                      args = [
                        ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                  ( jsgImpl = (type = jsgVarargs) ) ],
                static = false ) ),
            ( method = (
                name = "exit",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( function = (
                      returnType = (unknown = void),
                      args = [
                        ( jsgImpl = (type = jsgVarargs) ) ] ) ),
                  ( jsgImpl = (type = jsgVarargs) ) ],
                static = false ) ),
            ( method = (
                name = "getStore",
                returnType = (unknown = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "enterWith",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (unknown = void) ],
                static = false ) ),
            ( method = (
                name = "disable",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "bind",
                returnType = (
                  builtin = (type = v8Function) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( builtin = (type = v8Function) ) ],
                static = true ) ),
            ( method = (
                name = "snapshot",
                returnType = (
                  builtin = (type = v8Function) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = true ) ),
            ( constructor = (
                args = [
                  ( jsgImpl = (type = jsgLock) ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::AsyncLocalStorage",
          tsRoot = false,
          tsOverride = "AsyncLocalStorage<T> { getStore(): T | undefined; run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R; exit<R, TArgs extends any[]>(callback: (...args: TArgs) => R, ...args: TArgs): R; enterWith(store: T): never; disable(): never; static bind<Func extends (...args: any[]) => any>(fn: Func): Func; static snapshot<R, TArgs extends any[]>(): (fn: (...args: TArgs) => R, ...args: TArgs) => R; }",
          disposable = false,
          asyncDisposable = false ),
        ( name = "UtilModule",
          members = [
            ( nested = (
                structure = (
                  name = "MIMEType",
                  members = [
                    ( property = (
                        name = "type",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = false,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "subtype",
                        type = (
                          string = (name = "kj::StringPtr") ),
                        readonly = false,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "essence",
                        type = (
                          string = (name = "kj::String") ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( property = (
                        name = "params",
                        type = (
                          structure = (
                            name = "MIMEParams",
                            fullyQualifiedName = "workerd::api::node::MIMEParams" ) ),
                        readonly = true,
                        lazy = false,
                        prototype = true ) ),
                    ( method = (
                        name = "toString",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "toJSON",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( constructor = (
                        args = [
                          ( string = (name = "kj::String") ) ] ) ) ],
                  iterable = false,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::MIMEType",
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "MIMEType" ) ),
            ( nested = (
                structure = (
                  name = "MIMEParams",
                  members = [
                    ( method = (
                        name = "delete",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "get",
                        returnType = (
                          maybe = (
                            value = (
                              string = (name = "kj::StringPtr") ),
                            name = "kj::Maybe" ) ),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "has",
                        returnType = (boolt = void),
                        args = [
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "set",
                        returnType = (voidt = void),
                        args = [
                          ( string = (name = "kj::String") ),
                          ( string = (name = "kj::String") ) ],
                        static = false ) ),
                    ( method = (
                        name = "entries",
                        returnType = (
                          structure = (
                            name = "EntryIterator",
                            fullyQualifiedName = "workerd::api::node::MIMEParams::EntryIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "keys",
                        returnType = (
                          structure = (
                            name = "KeyIterator",
                            fullyQualifiedName = "workerd::api::node::MIMEParams::KeyIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "values",
                        returnType = (
                          structure = (
                            name = "ValueIterator",
                            fullyQualifiedName = "workerd::api::node::MIMEParams::ValueIterator" ) ),
                        args = [
                          ( jsgImpl = (type = jsgLock) ) ],
                        static = false ) ),
                    ( method = (
                        name = "toString",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( method = (
                        name = "toJSON",
                        returnType = (
                          string = (name = "kj::String") ),
                        args = [],
                        static = false ) ),
                    ( constructor = (args = []) ) ],
                  iterable = true,
                  asyncIterable = false,
                  fullyQualifiedName = "workerd::api::node::MIMEParams",
                  iterator = (
                    name = "entries",
                    returnType = (
                      structure = (
                        name = "EntryIterator",
                        fullyQualifiedName = "workerd::api::node::MIMEParams::EntryIterator" ) ),
                    args = [
                      ( jsgImpl = (type = jsgLock) ) ],
                    static = false ),
                  tsRoot = false,
                  disposable = false,
                  asyncDisposable = false ),
                name = "MIMEParams" ) ),
            ( property = (
                name = "kResourceTypeInspect",
                type = (
                  jsgImpl = (type = jsgName) ),
                readonly = true,
                lazy = false,
                prototype = false ) ),
            ( constant = (name = "ALL_PROPERTIES", value = 0) ),
            ( constant = (name = "ONLY_ENUMERABLE", value = 2) ),
            ( method = (
                name = "getOwnNonIndexProperties",
                returnType = (
                  array = (
                    element = (unknown = void),
                    name = "jsg::JsArray" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (object = void),
                  (number = (name = "int")) ],
                static = false ) ),
            ( constant = (name = "kPending", value = 0) ),
            ( constant = (name = "kFulfilled", value = 1) ),
            ( constant = (name = "kRejected", value = 2) ),
            ( method = (
                name = "getPromiseDetails",
                returnType = (
                  maybe = (
                    value = (
                      structure = (
                        name = "PromiseDetails",
                        fullyQualifiedName = "workerd::api::node::UtilModule::PromiseDetails" ) ),
                    name = "jsg::Optional" ) ),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "getProxyDetails",
                returnType = (
                  maybe = (
                    value = (
                      structure = (
                        name = "ProxyDetails",
                        fullyQualifiedName = "workerd::api::node::UtilModule::ProxyDetails" ) ),
                    name = "jsg::Optional" ) ),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "previewEntries",
                returnType = (
                  maybe = (
                    value = (
                      structure = (
                        name = "PreviewedEntries",
                        fullyQualifiedName = "workerd::api::node::UtilModule::PreviewedEntries" ) ),
                    name = "jsg::Optional" ) ),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "getConstructorName",
                returnType = (
                  string = (name = "jsg::JsString") ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  (object = void) ],
                static = false ) ),
            ( method = (
                name = "isArrayBufferView",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isArgumentsObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isArrayBuffer",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isAsyncFunction",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isBigInt64Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isBigIntObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isBigUint64Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isBooleanObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isDataView",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isDate",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isFloat32Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isFloat64Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isGeneratorFunction",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isGeneratorObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isInt8Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isInt16Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isInt32Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isMap",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isMapIterator",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isModuleNamespaceObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isNativeError",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isNumberObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isPromise",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isProxy",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isRegExp",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isSet",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isSetIterator",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isSharedArrayBuffer",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isStringObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isSymbolObject",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isTypedArray",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isUint8Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isUint8ClampedArray",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isUint16Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isUint32Array",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isWeakMap",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isWeakSet",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isAnyArrayBuffer",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ),
            ( method = (
                name = "isBoxedPrimitive",
                returnType = (boolt = void),
                args = [(unknown = void)],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::UtilModule",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "PromiseDetails",
          members = [
            ( property = (
                name = "state",
                type = (number = (name = "int")),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "result",
                type = (
                  maybe = (value = (unknown = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::UtilModule::PromiseDetails",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ProxyDetails",
          members = [
            ( property = (
                name = "target",
                type = (unknown = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "handler",
                type = (unknown = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::UtilModule::ProxyDetails",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "PreviewedEntries",
          members = [
            ( property = (
                name = "entries",
                type = (
                  array = (
                    element = (unknown = void),
                    name = "jsg::JsArray" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "isKeyValue",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::UtilModule::PreviewedEntries",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "MIMEType",
          members = [
            ( property = (
                name = "type",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "subtype",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = false,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "essence",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "params",
                type = (
                  structure = (
                    name = "MIMEParams",
                    fullyQualifiedName = "workerd::api::node::MIMEParams" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "toString",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( method = (
                name = "toJSON",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( constructor = (
                args = [
                  ( string = (name = "kj::String") ) ] ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::MIMEType",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "MIMEParams",
          members = [
            ( method = (
                name = "delete",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "get",
                returnType = (
                  maybe = (
                    value = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Maybe" ) ),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "has",
                returnType = (boolt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "set",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ),
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "entries",
                returnType = (
                  structure = (
                    name = "EntryIterator",
                    fullyQualifiedName = "workerd::api::node::MIMEParams::EntryIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  structure = (
                    name = "KeyIterator",
                    fullyQualifiedName = "workerd::api::node::MIMEParams::KeyIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "values",
                returnType = (
                  structure = (
                    name = "ValueIterator",
                    fullyQualifiedName = "workerd::api::node::MIMEParams::ValueIterator" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "toString",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( method = (
                name = "toJSON",
                returnType = (
                  string = (name = "kj::String") ),
                args = [],
                static = false ) ),
            ( constructor = (args = []) ) ],
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::MIMEParams",
          iterator = (
            name = "entries",
            returnType = (
              structure = (
                name = "EntryIterator",
                fullyQualifiedName = "workerd::api::node::MIMEParams::EntryIterator" ) ),
            args = [
              ( jsgImpl = (type = jsgLock) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "EntryIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::node::MIMEParams::EntryIterator, kj::Array<kj::String>, workerd::api::node::MIMEParams::IteratorState<kj::Array<kj::String>>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::MIMEParams::EntryIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "ValueIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::node::MIMEParams::ValueIterator, kj::String, workerd::api::node::MIMEParams::IteratorState<kj::String>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::MIMEParams::ValueIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "KeyIterator",
          members = [
            ( method = (
                name = "next",
                returnType = (
                  structure = (
                    name = "Next",
                    fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::node::MIMEParams::KeyIterator, kj::String, workerd::api::node::MIMEParams::IteratorState<kj::String>>::Next" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          extends = (
            intrinsic = (
              name = "v8::kIteratorPrototype" ) ),
          iterable = true,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::node::MIMEParams::KeyIterator",
          iterator = (
            name = "self",
            returnType = (object = void),
            args = [
              ( jsgImpl = (
                  type = v8FunctionCallbackInfo ) ) ],
            static = false ),
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::String") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::node::MIMEParams::EntryIterator, kj::Array<kj::String>, workerd::api::node::MIMEParams::IteratorState<kj::Array<kj::String>>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::node::MIMEParams::ValueIterator, kj::String, workerd::api::node::MIMEParams::IteratorState<kj::String>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "Next",
          members = [
            ( property = (
                name = "done",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "value",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::jsg::IteratorBase<workerd::api::node::MIMEParams::KeyIterator, kj::String, workerd::api::node::MIMEParams::IteratorState<kj::String>>::Next",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ),
    ( name = "webgpu",
      structures = [
        ( name = "GPU",
          members = [
            ( method = (
                name = "requestAdapter",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "GPUAdapter",
                            fullyQualifiedName = "workerd::api::gpu::GPUAdapter" ) ),
                        name = "kj::Maybe" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GPURequestAdapterOptions",
                          fullyQualifiedName = "workerd::api::gpu::GPURequestAdapterOptions" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPU",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUAdapter",
          members = [
            ( method = (
                name = "requestDevice",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "GPUDevice",
                        fullyQualifiedName = "workerd::api::gpu::GPUDevice" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GPUDeviceDescriptor",
                          fullyQualifiedName = "workerd::api::gpu::GPUDeviceDescriptor" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "requestAdapterInfo",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "GPUAdapterInfo",
                        fullyQualifiedName = "workerd::api::gpu::GPUAdapterInfo" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            string = (name = "kj::String") ),
                          name = "kj::Array" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( property = (
                name = "features",
                type = (
                  structure = (
                    name = "GPUSupportedFeatures",
                    fullyQualifiedName = "workerd::api::gpu::GPUSupportedFeatures" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "limits",
                type = (
                  structure = (
                    name = "GPUSupportedLimits",
                    fullyQualifiedName = "workerd::api::gpu::GPUSupportedLimits" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUAdapter",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUDevice",
          members = [
            ( method = (
                name = "createBuffer",
                returnType = (
                  structure = (
                    name = "GPUBuffer",
                    fullyQualifiedName = "workerd::api::gpu::GPUBuffer" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "GPUBufferDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUBufferDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createBindGroupLayout",
                returnType = (
                  structure = (
                    name = "GPUBindGroupLayout",
                    fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayout" ) ),
                args = [
                  ( structure = (
                      name = "GPUBindGroupLayoutDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayoutDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createBindGroup",
                returnType = (
                  structure = (
                    name = "GPUBindGroup",
                    fullyQualifiedName = "workerd::api::gpu::GPUBindGroup" ) ),
                args = [
                  ( structure = (
                      name = "GPUBindGroupDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUBindGroupDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createSampler",
                returnType = (
                  structure = (
                    name = "GPUSampler",
                    fullyQualifiedName = "workerd::api::gpu::GPUSampler" ) ),
                args = [
                  ( structure = (
                      name = "GPUSamplerDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUSamplerDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createShaderModule",
                returnType = (
                  structure = (
                    name = "GPUShaderModule",
                    fullyQualifiedName = "workerd::api::gpu::GPUShaderModule" ) ),
                args = [
                  ( structure = (
                      name = "GPUShaderModuleDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUShaderModuleDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createPipelineLayout",
                returnType = (
                  structure = (
                    name = "GPUPipelineLayout",
                    fullyQualifiedName = "workerd::api::gpu::GPUPipelineLayout" ) ),
                args = [
                  ( structure = (
                      name = "GPUPipelineLayoutDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUPipelineLayoutDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createComputePipeline",
                returnType = (
                  structure = (
                    name = "GPUComputePipeline",
                    fullyQualifiedName = "workerd::api::gpu::GPUComputePipeline" ) ),
                args = [
                  ( structure = (
                      name = "GPUComputePipelineDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUComputePipelineDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createRenderPipeline",
                returnType = (
                  structure = (
                    name = "GPURenderPipeline",
                    fullyQualifiedName = "workerd::api::gpu::GPURenderPipeline" ) ),
                args = [
                  ( structure = (
                      name = "GPURenderPipelineDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPURenderPipelineDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "createCommandEncoder",
                returnType = (
                  structure = (
                    name = "GPUCommandEncoder",
                    fullyQualifiedName = "workerd::api::gpu::GPUCommandEncoder" ) ),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GPUCommandEncoderDescriptor",
                          fullyQualifiedName = "workerd::api::gpu::GPUCommandEncoderDescriptor" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "createTexture",
                returnType = (
                  structure = (
                    name = "GPUTexture",
                    fullyQualifiedName = "workerd::api::gpu::GPUTexture" ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( structure = (
                      name = "GPUTextureDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUTextureDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "destroy",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( method = (
                name = "createQuerySet",
                returnType = (
                  structure = (
                    name = "GPUQuerySet",
                    fullyQualifiedName = "workerd::api::gpu::GPUQuerySet" ) ),
                args = [
                  ( structure = (
                      name = "GPUQuerySetDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPUQuerySetDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "pushErrorScope",
                returnType = (voidt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "popErrorScope",
                returnType = (
                  promise = (
                    value = (
                      maybe = (
                        value = (
                          structure = (
                            name = "GPUError",
                            fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
                        name = "kj::Maybe" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( property = (
                name = "queue",
                type = (
                  structure = (
                    name = "GPUQueue",
                    fullyQualifiedName = "workerd::api::gpu::GPUQueue" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "lost",
                type = (
                  promise = (
                    value = (
                      structure = (
                        name = "GPUDeviceLostInfo",
                        fullyQualifiedName = "workerd::api::gpu::GPUDeviceLostInfo" ) ) ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "features",
                type = (
                  structure = (
                    name = "GPUSupportedFeatures",
                    fullyQualifiedName = "workerd::api::gpu::GPUSupportedFeatures" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "limits",
                type = (
                  structure = (
                    name = "GPUSupportedLimits",
                    fullyQualifiedName = "workerd::api::gpu::GPUSupportedLimits" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          extends = (
            structure = (
              name = "EventTarget",
              fullyQualifiedName = "workerd::api::EventTarget" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUDevice",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUDeviceDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "requiredFeatures",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::String") ),
                        name = "kj::Array" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "requiredLimits",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "kj::String") ),
                        value = (
                          number = (
                            name = "unsigned long long" ) ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "defaultQueue",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUQueueDescriptor",
                        fullyQualifiedName = "workerd::api::gpu::GPUQueueDescriptor" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUDeviceDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBufferDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "size",
                type = (
                  number = (
                    name = "unsigned long long" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "usage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mappedAtCreation",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBufferDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUQueueDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUQueueDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBufferUsage",
          members = [
            ( constant = (name = "MAP_READ", value = 1) ),
            ( constant = (name = "MAP_WRITE", value = 2) ),
            ( constant = (name = "COPY_SRC", value = 4) ),
            ( constant = (name = "COPY_DST", value = 8) ),
            ( constant = (name = "INDEX", value = 16) ),
            ( constant = (name = "VERTEX", value = 32) ),
            ( constant = (name = "UNIFORM", value = 64) ),
            ( constant = (name = "STORAGE", value = 128) ),
            ( constant = (name = "INDIRECT", value = 256) ),
            ( constant = (name = "QUERY_RESOLVE", value = 512) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBufferUsage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBuffer",
          members = [
            ( method = (
                name = "getMappedRange",
                returnType = (
                  builtin = (type = v8ArrayBuffer) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "unmap",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "destroy",
                returnType = (voidt = void),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ),
            ( method = (
                name = "mapAsync",
                returnType = (
                  promise = (value = (voidt = void)) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ),
                  ( number = (name = "unsigned int") ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( property = (
                name = "size",
                type = (
                  number = (
                    name = "unsigned long long" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "usage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "mapState",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBuffer",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUShaderStage",
          members = [
            ( constant = (name = "VERTEX", value = 1) ),
            ( constant = (name = "FRAGMENT", value = 2) ),
            ( constant = (name = "COMPUTE", value = 4) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUShaderStage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBindGroupLayoutDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "entries",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "GPUBindGroupLayoutEntry",
                        fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayoutEntry" ) ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayoutDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBindGroupLayoutEntry",
          members = [
            ( property = (
                name = "binding",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "visibility",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "buffer",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUBufferBindingLayout",
                        fullyQualifiedName = "workerd::api::gpu::GPUBufferBindingLayout" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sampler",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUSamplerBindingLayout",
                        fullyQualifiedName = "workerd::api::gpu::GPUSamplerBindingLayout" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "texture",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUTextureBindingLayout",
                        fullyQualifiedName = "workerd::api::gpu::GPUTextureBindingLayout" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "storageTexture",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUStorageTextureBindingLayout",
                        fullyQualifiedName = "workerd::api::gpu::GPUStorageTextureBindingLayout" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayoutEntry",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUStorageTextureBindingLayout",
          members = [
            ( property = (
                name = "access",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "format",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "viewDimension",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUStorageTextureBindingLayout",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUTextureBindingLayout",
          members = [
            ( property = (
                name = "sampleType",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "viewDimension",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "multisampled",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUTextureBindingLayout",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUSamplerBindingLayout",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUSamplerBindingLayout",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBufferBindingLayout",
          members = [
            ( property = (
                name = "type",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "hasDynamicOffset",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "minBindingSize",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBufferBindingLayout",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBindGroupLayout",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayout",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBindGroup",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBindGroup",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBindGroupDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "layout",
                type = (
                  structure = (
                    name = "GPUBindGroupLayout",
                    fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayout" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "entries",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "GPUBindGroupEntry",
                        fullyQualifiedName = "workerd::api::gpu::GPUBindGroupEntry" ) ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBindGroupDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBindGroupEntry",
          members = [
            ( property = (
                name = "binding",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "resource",
                type = (
                  oneOf = (
                    variants = [
                      ( structure = (
                          name = "GPUBufferBinding",
                          fullyQualifiedName = "workerd::api::gpu::GPUBufferBinding" ) ),
                      ( structure = (
                          name = "GPUSampler",
                          fullyQualifiedName = "workerd::api::gpu::GPUSampler" ) ) ] ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBindGroupEntry",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBufferBinding",
          members = [
            ( property = (
                name = "buffer",
                type = (
                  structure = (
                    name = "GPUBuffer",
                    fullyQualifiedName = "workerd::api::gpu::GPUBuffer" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "offset",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "size",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBufferBinding",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUSampler",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUSampler",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUSamplerDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "addressModeU",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "addressModeV",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "addressModeW",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "magFilter",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "minFilter",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mipmapFilter",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lodMinClamp",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "lodMaxClamp",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "compare",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "maxAnisotropy",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned short") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUSamplerDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUShaderModule",
          members = [
            ( method = (
                name = "getCompilationInfo",
                returnType = (
                  promise = (
                    value = (
                      structure = (
                        name = "GPUCompilationInfo",
                        fullyQualifiedName = "workerd::api::gpu::GPUCompilationInfo" ) ) ) ),
                args = [
                  ( jsgImpl = (type = jsgLock) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUShaderModule",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUShaderModuleDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "code",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUShaderModuleDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUPipelineLayout",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUPipelineLayout",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUPipelineLayoutDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "bindGroupLayouts",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "GPUBindGroupLayout",
                        fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayout" ) ),
                    name = "kj::Array" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUPipelineLayoutDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUComputePipeline",
          members = [
            ( method = (
                name = "getBindGroupLayout",
                returnType = (
                  structure = (
                    name = "GPUBindGroupLayout",
                    fullyQualifiedName = "workerd::api::gpu::GPUBindGroupLayout" ) ),
                args = [
                  ( number = (name = "unsigned int") ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUComputePipeline",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUComputePipelineDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "compute",
                type = (
                  structure = (
                    name = "GPUProgrammableStage",
                    fullyQualifiedName = "workerd::api::gpu::GPUProgrammableStage" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "layout",
                type = (
                  oneOf = (
                    variants = [
                      ( string = (name = "kj::String") ),
                      ( structure = (
                          name = "GPUPipelineLayout",
                          fullyQualifiedName = "workerd::api::gpu::GPUPipelineLayout" ) ) ] ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUComputePipelineDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUProgrammableStage",
          members = [
            ( property = (
                name = "module",
                type = (
                  structure = (
                    name = "GPUShaderModule",
                    fullyQualifiedName = "workerd::api::gpu::GPUShaderModule" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "entryPoint",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "constants",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "kj::String") ),
                        value = (
                          number = (name = "double") ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUProgrammableStage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUCommandEncoder",
          members = [
            ( property = (
                name = "label",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( method = (
                name = "beginComputePass",
                returnType = (
                  structure = (
                    name = "GPUComputePassEncoder",
                    fullyQualifiedName = "workerd::api::gpu::GPUComputePassEncoder" ) ),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GPUComputePassDescriptor",
                          fullyQualifiedName = "workerd::api::gpu::GPUComputePassDescriptor" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "beginRenderPass",
                returnType = (
                  structure = (
                    name = "GPURenderPassEncoder",
                    fullyQualifiedName = "workerd::api::gpu::GPURenderPassEncoder" ) ),
                args = [
                  ( structure = (
                      name = "GPURenderPassDescriptor",
                      fullyQualifiedName = "workerd::api::gpu::GPURenderPassDescriptor" ) ) ],
                static = false ) ),
            ( method = (
                name = "copyBufferToBuffer",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPUBuffer",
                      fullyQualifiedName = "workerd::api::gpu::GPUBuffer" ) ),
                  ( number = (
                      name = "unsigned long long" ) ),
                  ( structure = (
                      name = "GPUBuffer",
                      fullyQualifiedName = "workerd::api::gpu::GPUBuffer" ) ),
                  ( number = (
                      name = "unsigned long long" ) ),
                  ( number = (
                      name = "unsigned long long" ) ) ],
                static = false ) ),
            ( method = (
                name = "finish",
                returnType = (
                  structure = (
                    name = "GPUCommandBuffer",
                    fullyQualifiedName = "workerd::api::gpu::GPUCommandBuffer" ) ),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GPUCommandBufferDescriptor",
                          fullyQualifiedName = "workerd::api::gpu::GPUCommandBufferDescriptor" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "copyTextureToBuffer",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPUImageCopyTexture",
                      fullyQualifiedName = "workerd::api::gpu::GPUImageCopyTexture" ) ),
                  ( structure = (
                      name = "GPUImageCopyBuffer",
                      fullyQualifiedName = "workerd::api::gpu::GPUImageCopyBuffer" ) ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned int") ),
                            name = "jsg::Sequence" ) ),
                        ( structure = (
                            name = "GPUExtent3DDict",
                            fullyQualifiedName = "workerd::api::gpu::GPUExtent3DDict" ) ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "copyBufferToTexture",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPUImageCopyBuffer",
                      fullyQualifiedName = "workerd::api::gpu::GPUImageCopyBuffer" ) ),
                  ( structure = (
                      name = "GPUImageCopyTexture",
                      fullyQualifiedName = "workerd::api::gpu::GPUImageCopyTexture" ) ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned int") ),
                            name = "jsg::Sequence" ) ),
                        ( structure = (
                            name = "GPUExtent3DDict",
                            fullyQualifiedName = "workerd::api::gpu::GPUExtent3DDict" ) ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "copyTextureToTexture",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPUImageCopyTexture",
                      fullyQualifiedName = "workerd::api::gpu::GPUImageCopyTexture" ) ),
                  ( structure = (
                      name = "GPUImageCopyTexture",
                      fullyQualifiedName = "workerd::api::gpu::GPUImageCopyTexture" ) ),
                  ( oneOf = (
                      variants = [
                        ( array = (
                            element = (
                              number = (name = "unsigned int") ),
                            name = "jsg::Sequence" ) ),
                        ( structure = (
                            name = "GPUExtent3DDict",
                            fullyQualifiedName = "workerd::api::gpu::GPUExtent3DDict" ) ) ] ) ) ],
                static = false ) ),
            ( method = (
                name = "clearBuffer",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPUBuffer",
                      fullyQualifiedName = "workerd::api::gpu::GPUBuffer" ) ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUCommandEncoder",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUCommandEncoderDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUCommandEncoderDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUComputePassEncoder",
          members = [
            ( method = (
                name = "setPipeline",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPUComputePipeline",
                      fullyQualifiedName = "workerd::api::gpu::GPUComputePipeline" ) ) ],
                static = false ) ),
            ( method = (
                name = "setBindGroup",
                returnType = (voidt = void),
                args = [
                  ( number = (name = "unsigned int") ),
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GPUBindGroup",
                          fullyQualifiedName = "workerd::api::gpu::GPUBindGroup" ) ),
                      name = "kj::Maybe" ) ),
                  ( maybe = (
                      value = (
                        array = (
                          element = (
                            number = (name = "unsigned int") ),
                          name = "jsg::Sequence" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "dispatchWorkgroups",
                returnType = (voidt = void),
                args = [
                  ( number = (name = "unsigned int") ),
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "end",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUComputePassEncoder",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUComputePassDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "timestampWrites",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUComputePassTimestampWrites",
                        fullyQualifiedName = "workerd::api::gpu::GPUComputePassTimestampWrites" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUComputePassDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUQuerySet",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUQuerySet",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUQuerySetDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUQuerySetDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUComputePassTimestampWrites",
          members = [
            ( property = (
                name = "querySet",
                type = (
                  structure = (
                    name = "GPUQuerySet",
                    fullyQualifiedName = "workerd::api::gpu::GPUQuerySet" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "beginningOfPassWriteIndex",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "endOfPassWriteIndex",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUComputePassTimestampWrites",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUCommandBufferDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUCommandBufferDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUCommandBuffer",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUCommandBuffer",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUQueue",
          members = [
            ( method = (
                name = "submit",
                returnType = (voidt = void),
                args = [
                  ( array = (
                      element = (
                        structure = (
                          name = "GPUCommandBuffer",
                          fullyQualifiedName = "workerd::api::gpu::GPUCommandBuffer" ) ),
                      name = "kj::Array" ) ) ],
                static = false ) ),
            ( method = (
                name = "writeBuffer",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPUBuffer",
                      fullyQualifiedName = "workerd::api::gpu::GPUBuffer" ) ),
                  ( number = (
                      name = "unsigned long long" ) ),
                  ( builtin = (type = jsgBufferSource) ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        number = (
                          name = "unsigned long long" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUQueue",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUMapMode",
          members = [
            ( constant = (name = "READ", value = 1) ),
            ( constant = (name = "WRITE", value = 2) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUMapMode",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURequestAdapterOptions",
          members = [
            ( property = (
                name = "powerPreference",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "forceFallbackAdapter",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURequestAdapterOptions",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUAdapterInfo",
          members = [
            ( property = (
                name = "vendor",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "architecture",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "device",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "description",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUAdapterInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUSupportedFeatures",
          members = [
            ( method = (
                name = "has",
                returnType = (boolt = void),
                args = [
                  ( string = (name = "kj::String") ) ],
                static = false ) ),
            ( method = (
                name = "keys",
                returnType = (
                  array = (
                    element = (
                      string = (name = "kj::StringPtr") ),
                    name = "kj::Array" ) ),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUSupportedFeatures",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUSupportedLimits",
          members = [
            ( property = (
                name = "maxTextureDimension1D",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxTextureDimension2D",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxTextureDimension3D",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxTextureArrayLayers",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxBindGroups",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxBindingsPerBindGroup",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxDynamicUniformBuffersPerPipelineLayout",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxDynamicStorageBuffersPerPipelineLayout",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxSampledTexturesPerShaderStage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxSamplersPerShaderStage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxStorageBuffersPerShaderStage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxStorageTexturesPerShaderStage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxUniformBuffersPerShaderStage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxUniformBufferBindingSize",
                type = (
                  number = (
                    name = "unsigned long long" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxStorageBufferBindingSize",
                type = (
                  number = (
                    name = "unsigned long long" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "minUniformBufferOffsetAlignment",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "minStorageBufferOffsetAlignment",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxVertexBuffers",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxBufferSize",
                type = (
                  number = (
                    name = "unsigned long long" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxVertexAttributes",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxVertexBufferArrayStride",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxInterStageShaderComponents",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxInterStageShaderVariables",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxColorAttachments",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxColorAttachmentBytesPerSample",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxComputeWorkgroupStorageSize",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxComputeInvocationsPerWorkgroup",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxComputeWorkgroupSizeX",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxComputeWorkgroupSizeY",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxComputeWorkgroupSizeZ",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "maxComputeWorkgroupsPerDimension",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUSupportedLimits",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUError",
          members = [
            ( property = (
                name = "message",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUError",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUOutOfMemoryError",
          members = [],
          extends = (
            structure = (
              name = "GPUError",
              fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUOutOfMemoryError",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUInternalError",
          members = [],
          extends = (
            structure = (
              name = "GPUError",
              fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUInternalError",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUValidationError",
          members = [],
          extends = (
            structure = (
              name = "GPUError",
              fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUValidationError",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUDeviceLostInfo",
          members = [
            ( property = (
                name = "message",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "reason",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUDeviceLostInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUCompilationMessage",
          members = [
            ( property = (
                name = "message",
                type = (
                  string = (name = "kj::StringPtr") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "type",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "lineNum",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "linePos",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "offset",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "length",
                type = (
                  number = (name = "double") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUCompilationMessage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUCompilationInfo",
          members = [
            ( property = (
                name = "messages",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "GPUCompilationMessage",
                        fullyQualifiedName = "workerd::api::gpu::GPUCompilationMessage" ) ),
                    name = "kj::ArrayPtr" ) ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUCompilationInfo",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUUncapturedErrorEvent",
          members = [
            ( property = (
                name = "error",
                type = (
                  structure = (
                    name = "GPUError",
                    fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
                readonly = true,
                lazy = false,
                prototype = false ) ) ],
          extends = (
            structure = (
              name = "Event",
              fullyQualifiedName = "workerd::api::Event" ) ),
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUUncapturedErrorEvent",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUUncapturedErrorEventInit",
          members = [
            ( property = (
                name = "error",
                type = (
                  structure = (
                    name = "GPUError",
                    fullyQualifiedName = "workerd::api::gpu::GPUError" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUUncapturedErrorEventInit",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUTextureUsage",
          members = [
            ( constant = (name = "COPY_SRC", value = 1) ),
            ( constant = (name = "COPY_DST", value = 2) ),
            ( constant = (name = "TEXTURE_BINDING", value = 4) ),
            ( constant = (name = "STORAGE_BINDING", value = 8) ),
            ( constant = (
                name = "RENDER_ATTACHMENT",
                value = 16 ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUTextureUsage",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUTextureDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "size",
                type = (
                  oneOf = (
                    variants = [
                      ( array = (
                          element = (
                            number = (name = "unsigned int") ),
                          name = "jsg::Sequence" ) ),
                      ( structure = (
                          name = "GPUExtent3DDict",
                          fullyQualifiedName = "workerd::api::gpu::GPUExtent3DDict" ) ) ] ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mipLevelCount",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "sampleCount",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "dimension",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "format",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "usage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "viewFormats",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          string = (name = "kj::String") ),
                        name = "jsg::Sequence" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUTextureDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUExtent3DDict",
          members = [
            ( property = (
                name = "width",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "height",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthOrArrayLayers",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUExtent3DDict",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUTexture",
          members = [
            ( method = (
                name = "createView",
                returnType = (
                  structure = (
                    name = "GPUTextureView",
                    fullyQualifiedName = "workerd::api::gpu::GPUTextureView" ) ),
                args = [
                  ( maybe = (
                      value = (
                        structure = (
                          name = "GPUTextureViewDescriptor",
                          fullyQualifiedName = "workerd::api::gpu::GPUTextureViewDescriptor" ) ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "destroy",
                returnType = (voidt = void),
                args = [],
                static = false ) ),
            ( property = (
                name = "width",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "height",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "depthOrArrayLayers",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "mipLevelCount",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "dimension",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "format",
                type = (
                  string = (name = "kj::String") ),
                readonly = true,
                lazy = false,
                prototype = true ) ),
            ( property = (
                name = "usage",
                type = (
                  number = (name = "unsigned int") ),
                readonly = true,
                lazy = false,
                prototype = true ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUTexture",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUTextureView",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUTextureView",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUTextureViewDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "format",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "dimension",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "aspect",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "baseMipLevel",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mipLevelCount",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "baseArrayLayer",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "arrayLayerCount",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUTextureViewDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUColorWrite",
          members = [
            ( constant = (name = "RED", value = 1) ),
            ( constant = (name = "GREEN", value = 2) ),
            ( constant = (name = "BLUE", value = 4) ),
            ( constant = (name = "ALPHA", value = 8) ),
            ( constant = (name = "ALL", value = 15) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUColorWrite",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURenderPipeline",
          members = [],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURenderPipeline",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURenderPipelineDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "layout",
                type = (
                  oneOf = (
                    variants = [
                      ( string = (name = "kj::String") ),
                      ( structure = (
                          name = "GPUPipelineLayout",
                          fullyQualifiedName = "workerd::api::gpu::GPUPipelineLayout" ) ) ] ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "vertex",
                type = (
                  structure = (
                    name = "GPUVertexState",
                    fullyQualifiedName = "workerd::api::gpu::GPUVertexState" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "primitive",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUPrimitiveState",
                        fullyQualifiedName = "workerd::api::gpu::GPUPrimitiveState" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthStencil",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUDepthStencilState",
                        fullyQualifiedName = "workerd::api::gpu::GPUDepthStencilState" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "multisample",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUMultisampleState",
                        fullyQualifiedName = "workerd::api::gpu::GPUMultisampleState" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "fragment",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUFragmentState",
                        fullyQualifiedName = "workerd::api::gpu::GPUFragmentState" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURenderPipelineDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUVertexState",
          members = [
            ( property = (
                name = "module",
                type = (
                  structure = (
                    name = "GPUShaderModule",
                    fullyQualifiedName = "workerd::api::gpu::GPUShaderModule" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "entryPoint",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "constants",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "kj::String") ),
                        value = (
                          number = (name = "double") ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "buffers",
                type = (
                  maybe = (
                    value = (
                      array = (
                        element = (
                          structure = (
                            name = "GPUVertexBufferLayout",
                            fullyQualifiedName = "workerd::api::gpu::GPUVertexBufferLayout" ) ),
                        name = "jsg::Sequence" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUVertexState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUVertexBufferLayout",
          members = [
            ( property = (
                name = "arrayStride",
                type = (
                  number = (
                    name = "unsigned long long" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stepMode",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "attributes",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "GPUVertexAttribute",
                        fullyQualifiedName = "workerd::api::gpu::GPUVertexAttribute" ) ),
                    name = "jsg::Sequence" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUVertexBufferLayout",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUVertexAttribute",
          members = [
            ( property = (
                name = "format",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "offset",
                type = (
                  number = (
                    name = "unsigned long long" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "shaderLocation",
                type = (
                  number = (name = "unsigned int") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUVertexAttribute",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUPrimitiveState",
          members = [
            ( property = (
                name = "topology",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stripIndexFormat",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "frontFace",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "cullMode",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "unclippedDepth",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUPrimitiveState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUStencilFaceState",
          members = [
            ( property = (
                name = "compare",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "failOp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthFailOp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "passOp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUStencilFaceState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUDepthStencilState",
          members = [
            ( property = (
                name = "format",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthWriteEnabled",
                type = (boolt = void),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthCompare",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilFront",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUStencilFaceState",
                        fullyQualifiedName = "workerd::api::gpu::GPUStencilFaceState" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilBack",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUStencilFaceState",
                        fullyQualifiedName = "workerd::api::gpu::GPUStencilFaceState" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilReadMask",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilWriteMask",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthBias",
                type = (
                  maybe = (
                    value = (number = (name = "int")),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthBiasSlopeScale",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthBiasClamp",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUDepthStencilState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUMultisampleState",
          members = [
            ( property = (
                name = "count",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mask",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "alphaToCoverageEnabled",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUMultisampleState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUFragmentState",
          members = [
            ( property = (
                name = "module",
                type = (
                  structure = (
                    name = "GPUShaderModule",
                    fullyQualifiedName = "workerd::api::gpu::GPUShaderModule" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "entryPoint",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "constants",
                type = (
                  maybe = (
                    value = (
                      dict = (
                        key = (
                          string = (name = "kj::String") ),
                        value = (
                          number = (name = "double") ) ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "targets",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "GPUColorTargetState",
                        fullyQualifiedName = "workerd::api::gpu::GPUColorTargetState" ) ),
                    name = "jsg::Sequence" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUFragmentState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUColorTargetState",
          members = [
            ( property = (
                name = "format",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "blend",
                type = (
                  structure = (
                    name = "GPUBlendState",
                    fullyQualifiedName = "workerd::api::gpu::GPUBlendState" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "writeMask",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUColorTargetState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBlendState",
          members = [
            ( property = (
                name = "color",
                type = (
                  structure = (
                    name = "GPUBlendComponent",
                    fullyQualifiedName = "workerd::api::gpu::GPUBlendComponent" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "alpha",
                type = (
                  structure = (
                    name = "GPUBlendComponent",
                    fullyQualifiedName = "workerd::api::gpu::GPUBlendComponent" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBlendState",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUBlendComponent",
          members = [
            ( property = (
                name = "operation",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "srcFactor",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "dstFactor",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUBlendComponent",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURenderPassEncoder",
          members = [
            ( method = (
                name = "setPipeline",
                returnType = (voidt = void),
                args = [
                  ( structure = (
                      name = "GPURenderPipeline",
                      fullyQualifiedName = "workerd::api::gpu::GPURenderPipeline" ) ) ],
                static = false ) ),
            ( method = (
                name = "draw",
                returnType = (voidt = void),
                args = [
                  ( number = (name = "unsigned int") ),
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "jsg::Optional" ) ),
                  ( maybe = (
                      value = (
                        number = (name = "unsigned int") ),
                      name = "jsg::Optional" ) ) ],
                static = false ) ),
            ( method = (
                name = "end",
                returnType = (voidt = void),
                args = [],
                static = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURenderPassEncoder",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURenderPassDescriptor",
          members = [
            ( property = (
                name = "label",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "colorAttachments",
                type = (
                  array = (
                    element = (
                      structure = (
                        name = "GPURenderPassColorAttachment",
                        fullyQualifiedName = "workerd::api::gpu::GPURenderPassColorAttachment" ) ),
                    name = "jsg::Sequence" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthStencilAttachment",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPURenderPassDepthStencilAttachment",
                        fullyQualifiedName = "workerd::api::gpu::GPURenderPassDepthStencilAttachment" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "occlusionQuerySet",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUQuerySet",
                        fullyQualifiedName = "workerd::api::gpu::GPUQuerySet" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "timestampWrites",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPURenderPassTimestampWrites",
                        fullyQualifiedName = "workerd::api::gpu::GPURenderPassTimestampWrites" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "maxDrawCount",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURenderPassDescriptor",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURenderPassColorAttachment",
          members = [
            ( property = (
                name = "view",
                type = (
                  structure = (
                    name = "GPUTextureView",
                    fullyQualifiedName = "workerd::api::gpu::GPUTextureView" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthSlice",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "resolveTarget",
                type = (
                  maybe = (
                    value = (
                      structure = (
                        name = "GPUTextureView",
                        fullyQualifiedName = "workerd::api::gpu::GPUTextureView" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "clearValue",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "double") ),
                              name = "jsg::Sequence" ) ),
                          ( structure = (
                              name = "GPUColorDict",
                              fullyQualifiedName = "workerd::api::gpu::GPUColorDict" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "loadOp",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "storeOp",
                type = (
                  string = (name = "kj::String") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURenderPassColorAttachment",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUColorDict",
          members = [
            ( property = (
                name = "r",
                type = (
                  number = (name = "double") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "g",
                type = (
                  number = (name = "double") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "b",
                type = (
                  number = (name = "double") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "a",
                type = (
                  number = (name = "double") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUColorDict",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURenderPassDepthStencilAttachment",
          members = [
            ( property = (
                name = "view",
                type = (
                  structure = (
                    name = "GPUTextureView",
                    fullyQualifiedName = "workerd::api::gpu::GPUTextureView" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthClearValue",
                type = (
                  maybe = (
                    value = (
                      number = (name = "double") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthLoadOp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthStoreOp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "depthReadOnly",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilClearValue",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilLoadOp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilStoreOp",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "stencilReadOnly",
                type = (
                  maybe = (value = (boolt = void), name = "jsg::Optional") ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURenderPassDepthStencilAttachment",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPURenderPassTimestampWrites",
          members = [
            ( property = (
                name = "querySet",
                type = (
                  structure = (
                    name = "GPUQuerySet",
                    fullyQualifiedName = "workerd::api::gpu::GPUQuerySet" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "beginningOfPassWriteIndex",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "endOfPassWriteIndex",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPURenderPassTimestampWrites",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUImageCopyTexture",
          members = [
            ( property = (
                name = "texture",
                type = (
                  structure = (
                    name = "GPUTexture",
                    fullyQualifiedName = "workerd::api::gpu::GPUTexture" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "mipLevel",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "origin",
                type = (
                  maybe = (
                    value = (
                      oneOf = (
                        variants = [
                          ( array = (
                              element = (
                                number = (name = "unsigned int") ),
                              name = "jsg::Sequence" ) ),
                          ( structure = (
                              name = "GPUOrigin3DDict",
                              fullyQualifiedName = "workerd::api::gpu::GPUOrigin3DDict" ) ) ] ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "aspect",
                type = (
                  maybe = (
                    value = (
                      string = (name = "kj::String") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUImageCopyTexture",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUImageCopyBuffer",
          members = [
            ( property = (
                name = "buffer",
                type = (
                  structure = (
                    name = "GPUBuffer",
                    fullyQualifiedName = "workerd::api::gpu::GPUBuffer" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "offset",
                type = (
                  maybe = (
                    value = (
                      number = (
                        name = "unsigned long long" ) ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "bytesPerRow",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "rowsPerImage",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUImageCopyBuffer",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ),
        ( name = "GPUOrigin3DDict",
          members = [
            ( property = (
                name = "x",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "y",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ),
            ( property = (
                name = "z",
                type = (
                  maybe = (
                    value = (
                      number = (name = "unsigned int") ),
                    name = "jsg::Optional" ) ),
                readonly = false,
                lazy = false,
                prototype = false ) ) ],
          iterable = false,
          asyncIterable = false,
          fullyQualifiedName = "workerd::api::gpu::GPUOrigin3DDict",
          tsRoot = false,
          disposable = false,
          asyncDisposable = false ) ] ) ] )
